import smartpy as sp

tstorage = sp.record(administrator = sp.address, frags = sp.big_map(sp.nat, sp.bytes), ledger = sp.big_map(sp.nat, sp.address), metadata = sp.big_map(sp.string, sp.bytes), next_token_id = sp.nat, operators = sp.big_map(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.unit), token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info")))).layout(("administrator", ("frags", ("ledger", ("metadata", ("next_token_id", ("operators", "token_metadata")))))))
tparameter = sp.variant(add_fragment = sp.record(frag = sp.bytes, frag_id = sp.nat).layout(("frag", "frag_id")), balance_of = sp.record(callback = sp.contract(sp.list(sp.record(balance = sp.nat, request = sp.record(owner = sp.address, token_id = sp.nat).layout(("owner", "token_id"))).layout(("request", "balance")))), requests = sp.list(sp.record(owner = sp.address, token_id = sp.nat).layout(("owner", "token_id")))).layout(("requests", "callback")), burn = sp.list(sp.record(amount = sp.nat, from_ = sp.address, token_id = sp.nat).layout(("from_", ("token_id", "amount")))), mint = sp.bytes, set_administrator = sp.address, transfer = sp.list(sp.record(from_ = sp.address, txs = sp.list(sp.record(amount = sp.nat, to_ = sp.address, token_id = sp.nat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), update_operators = sp.list(sp.variant(add_operator = sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), remove_operator = sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id")))).layout(("add_operator", "remove_operator")))).layout((("add_fragment", ("balance_of", "burn")), (("mint", "set_administrator"), ("transfer", "update_operators"))))
tprivates = { "balance_": sp.lambda_(sp.pair(sp.lambda_(sp.nat, sp.bool, with_storage="read-only", tstorage=sp.record(administrator = sp.address, frags = sp.big_map(sp.nat, sp.bytes), ledger = sp.big_map(sp.nat, sp.address), metadata = sp.big_map(sp.string, sp.bytes), next_token_id = sp.nat, operators = sp.big_map(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.unit), token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info")))).layout(("administrator", ("frags", ("ledger", ("metadata", ("next_token_id", ("operators", "token_metadata"))))))), with_operations=False, with_exceptions=True, with_mutez_overflow=True, with_mutez_underflow=True), sp.record(owner = sp.address, token_id = sp.nat).layout(("owner", "token_id"))), sp.nat, with_storage="read-only", tstorage=sp.record(administrator = sp.address, frags = sp.big_map(sp.nat, sp.bytes), ledger = sp.big_map(sp.nat, sp.address), metadata = sp.big_map(sp.string, sp.bytes), next_token_id = sp.nat, operators = sp.big_map(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.unit), token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info")))).layout(("administrator", ("frags", ("ledger", ("metadata", ("next_token_id", ("operators", "token_metadata"))))))), with_operations=False, with_exceptions=True, with_mutez_overflow=True, with_mutez_underflow=True), "check_operator_update_permissions_": sp.lambda_(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.unit, with_storage="no-access", with_operations=False, with_exceptions=True, with_mutez_overflow=True, with_mutez_underflow=True), "check_tx_transfer_permissions_": sp.lambda_(sp.record(from_ = sp.address, to_ = sp.address, token_id = sp.nat).layout(("from_", ("to_", "token_id"))), sp.unit, with_storage="read-only", tstorage=sp.record(administrator = sp.address, frags = sp.big_map(sp.nat, sp.bytes), ledger = sp.big_map(sp.nat, sp.address), metadata = sp.big_map(sp.string, sp.bytes), next_token_id = sp.nat, operators = sp.big_map(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.unit), token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info")))).layout(("administrator", ("frags", ("ledger", ("metadata", ("next_token_id", ("operators", "token_metadata"))))))), with_operations=False, with_exceptions=True, with_mutez_overflow=True, with_mutez_underflow=True), "is_administrator_": sp.lambda_(sp.unit, sp.bool, with_storage="read-only", tstorage=sp.record(administrator = sp.address, frags = sp.big_map(sp.nat, sp.bytes), ledger = sp.big_map(sp.nat, sp.address), metadata = sp.big_map(sp.string, sp.bytes), next_token_id = sp.nat, operators = sp.big_map(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.unit), token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info")))).layout(("administrator", ("frags", ("ledger", ("metadata", ("next_token_id", ("operators", "token_metadata"))))))), with_operations=False, with_exceptions=True, with_mutez_overflow=True, with_mutez_underflow=True), "is_defined_": sp.lambda_(sp.nat, sp.bool, with_storage="read-only", tstorage=sp.record(administrator = sp.address, frags = sp.big_map(sp.nat, sp.bytes), ledger = sp.big_map(sp.nat, sp.address), metadata = sp.big_map(sp.string, sp.bytes), next_token_id = sp.nat, operators = sp.big_map(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.unit), token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info")))).layout(("administrator", ("frags", ("ledger", ("metadata", ("next_token_id", ("operators", "token_metadata"))))))), with_operations=False, with_exceptions=True, with_mutez_overflow=True, with_mutez_underflow=True), "is_operator_": sp.lambda_(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.bool, with_storage="read-only", tstorage=sp.record(administrator = sp.address, frags = sp.big_map(sp.nat, sp.bytes), ledger = sp.big_map(sp.nat, sp.address), metadata = sp.big_map(sp.string, sp.bytes), next_token_id = sp.nat, operators = sp.big_map(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.unit), token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info")))).layout(("administrator", ("frags", ("ledger", ("metadata", ("next_token_id", ("operators", "token_metadata"))))))), with_operations=False, with_exceptions=True, with_mutez_overflow=True, with_mutez_underflow=True), "rand": sp.lambda_(sp.record(entropy = sp.bytes, n = sp.nat).layout(("entropy", "n")), sp.nat, with_storage="read-only", tstorage=sp.record(administrator = sp.address, frags = sp.big_map(sp.nat, sp.bytes), ledger = sp.big_map(sp.nat, sp.address), metadata = sp.big_map(sp.string, sp.bytes), next_token_id = sp.nat, operators = sp.big_map(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.unit), token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info")))).layout(("administrator", ("frags", ("ledger", ("metadata", ("next_token_id", ("operators", "token_metadata"))))))), with_operations=False, with_exceptions=True, with_mutez_overflow=True, with_mutez_underflow=True), "supply_": sp.lambda_(sp.pair(sp.lambda_(sp.nat, sp.bool, with_storage="read-only", tstorage=sp.record(administrator = sp.address, frags = sp.big_map(sp.nat, sp.bytes), ledger = sp.big_map(sp.nat, sp.address), metadata = sp.big_map(sp.string, sp.bytes), next_token_id = sp.nat, operators = sp.big_map(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.unit), token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info")))).layout(("administrator", ("frags", ("ledger", ("metadata", ("next_token_id", ("operators", "token_metadata"))))))), with_operations=False, with_exceptions=True, with_mutez_overflow=True, with_mutez_underflow=True), sp.nat), sp.nat, with_storage="read-only", tstorage=sp.record(administrator = sp.address, frags = sp.big_map(sp.nat, sp.bytes), ledger = sp.big_map(sp.nat, sp.address), metadata = sp.big_map(sp.string, sp.bytes), next_token_id = sp.nat, operators = sp.big_map(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.unit), token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info")))).layout(("administrator", ("frags", ("ledger", ("metadata", ("next_token_id", ("operators", "token_metadata"))))))), with_operations=False, with_exceptions=True, with_mutez_overflow=True, with_mutez_underflow=True), "transfer_tx_": sp.lambda_(sp.record(from_ = sp.address, tx = sp.record(amount = sp.nat, to_ = sp.address, token_id = sp.nat).layout(("to_", ("token_id", "amount")))).layout(("from_", "tx")), sp.unit, with_storage="read-write", tstorage=sp.record(administrator = sp.address, frags = sp.big_map(sp.nat, sp.bytes), ledger = sp.big_map(sp.nat, sp.address), metadata = sp.big_map(sp.string, sp.bytes), next_token_id = sp.nat, operators = sp.big_map(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.unit), token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info")))).layout(("administrator", ("frags", ("ledger", ("metadata", ("next_token_id", ("operators", "token_metadata"))))))), with_operations=False, with_exceptions=True, with_mutez_overflow=True, with_mutez_underflow=True) }
tviews = { "get_balance_of": (sp.list(sp.record(owner = sp.address, token_id = sp.nat).layout(("owner", "token_id"))), sp.list(sp.record(balance = sp.nat, request = sp.record(owner = sp.address, token_id = sp.nat).layout(("owner", "token_id"))).layout(("request", "balance")))), "all_tokens": ((), sp.list(sp.nat)), "is_operator": (sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.bool), "get_balance": (sp.record(owner = sp.address, token_id = sp.nat).layout(("owner", "token_id")), sp.nat), "total_supply": (sp.record(token_id = sp.nat).layout("token_id"), sp.nat) }
