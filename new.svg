<svg xmlns="http://www.w3.org/2000/svg" width="800" height="600" style="background:#fff">
  <script><![CDATA[
    // Provided/injected:
    const seed = 0xDEADBEEF; // <- injected
    const tokenId = 33;       // <- injected

    // sfc32 PRNG core
    function sfc32(a, b, c, d) {
      return function() {
        a |= 0; b |= 0; c |= 0; d |= 0;
        var t = (a + b | 0) + d | 0;
        d = d + 1 | 0;
        a = b ^ (b >>> 9);
        b = (c + (c << 3)) | 0;
        c = (c << 21) | (c >>> 11);
        c = (c + t) | 0;
        // [0,1)
        return (t >>> 0) / 4294967296;
      };
    }

    // xmur3: small hash to expand a seed string into 32-bit seeds
    function xmur3(str) {
      let h = 1779033703 ^ str.length;
      for (let i = 0; i < str.length; i++) {
        h = Math.imul(h ^ str.charCodeAt(i), 3432918353);
        h = (h << 13) | (h >>> 19);
      }
      return function() {
        h = Math.imul(h ^ (h >>> 16), 2246822507);
        h = Math.imul(h ^ (h >>> 13), 3266489909);
        return (h ^= h >>> 16) >>> 0;
      };
    }

    // Build a stable seed string from the injected values
    const seedStr = seed.toString(16) + "-" + String(tokenId);
    const seeder = xmur3(seedStr);
    const rndCore = sfc32(seeder(), seeder(), seeder(), seeder());

    // Expose a global namespace and rnd() function
    window.$o = window.$o || {};
    $o.rnd = () => rndCore();

    // Optional: warm up the generator a touch
    for (let i = 0; i < 15; i++) $o.rnd();

    // Helpers
    const randBetween = (min, max) => min + ($o.rnd() * (max - min));
    const randInt = (min, max) => Math.floor(randBetween(min, max + 1));

    // Draw a bunch of shapes
    (function draw() {
      const svg = document.documentElement; // this <svg>
      const w = (svg.viewBox && svg.viewBox.baseVal && svg.viewBox.baseVal.width) ? svg.viewBox.baseVal.width : svg.width.baseVal.value;
      const h = (svg.viewBox && svg.viewBox.baseVal && svg.viewBox.baseVal.height) ? svg.viewBox.baseVal.height : svg.height.baseVal.value;

      const NS = "http://www.w3.org/2000/svg";
      const count = 240; // how many shapes to drop

      for (let i = 0; i < count; i++) {
        const isCircle = $o.rnd() < 0.5;

        if (isCircle) {
          const r = randBetween(4, 40);
          const cx = randBetween(0, w);
          const cy = randBetween(0, h);

          const c = document.createElementNS(NS, "circle");
          c.setAttribute("cx", cx.toFixed(2));
          c.setAttribute("cy", cy.toFixed(2));
          c.setAttribute("r", r.toFixed(2));
          c.setAttribute("fill", `hsl(${Math.floor($o.rnd()*360)},100%,50%)`);
          c.setAttribute("fill-opacity", "0.35");
          c.setAttribute("stroke", "black");
          c.setAttribute("stroke-opacity", "0.15");
          c.setAttribute("stroke-width", "1");
          svg.appendChild(c);
        } else {
          const size = randBetween(8, 60);
          const x = randBetween(0, Math.max(0, w - size));
          const y = randBetween(0, Math.max(0, h - size));

          const r = randInt(0, 3) * 2; // slight rounding options
          const q = document.createElementNS(NS, "rect");
          q.setAttribute("x", x.toFixed(2));
          q.setAttribute("y", y.toFixed(2));
          q.setAttribute("width", size.toFixed(2));
          q.setAttribute("height", size.toFixed(2));
          q.setAttribute("rx", r);
          q.setAttribute("ry", r);
          q.setAttribute("fill", `hsl(${Math.floor($o.rnd()*360)},100%,50%)`);
          q.setAttribute("fill-opacity", "0.35");
          q.setAttribute("stroke", "black");
          q.setAttribute("stroke-opacity", "0.15");
          q.setAttribute("stroke-width", "1");
          svg.appendChild(q);
        }
      }
    })();
  ]]></script>
</svg>
