logo
Search...
Introduction
Get Started
REST API
Accounts
BigMaps
Blocks
Commitments
Constants
Contracts
Cycles
Delegates
Domains
Events
Head
Helpers
Operations
get
Get operations by hash
get
Get operations by hash and counter
get
Get operations by hash, counter and nonce
get
Get operation status
get
Get attestations
get
Get attestation by hash
get
Get attestations count
get
Get preattestations
get
Get preattestation by hash
get
Get preattestations count
get
Get ballots
get
Get ballot by hash
get
Get ballots count
get
Get proposals
get
Get proposal by hash
get
Get proposals count
get
Get activations
get
Get activation by hash
get
Get activations count
get
Get dal entrapment evidences
get
Get dal entrapment evidence by hash
get
Get dal entrapment evidences count
get
Get double baking
get
Get double baking by hash
get
Get double baking count
get
Get double consensus
get
Get double consensus by hash
get
Get double consensus count
get
Get nonce revelations
get
Get nonce revelation by hash
get
Get nonce revelations count
get
Get vdf revelations
get
Get vdf revelation by hash
get
Get vdf revelations count
get
Get drain delegate
get
Get drain delegate by hash
get
Get drain delegate count
get
Get delegations
get
Get delegation by hash
get
Get delegation status
get
Get delegations count
get
Get originations
get
Get origination by hash
get
Get origination status
get
Get originations count
get
Get transactions
get
Get transaction by hash
get
Get transaction by hash and counter
get
Get transaction by hash, counter and nonce
get
Get transaction status
get
Get transactions count
get
Get reveals
get
Get reveal by hash
get
Get reveal status
get
Get reveals count
get
Get register constants
get
Get register constant by hash
get
Get register constant status
get
Get register constants count
get
Get set deposits limits
get
Get set deposits limit by hash
get
Get set deposits limit status
get
Get set deposits limits count
get
Get transfer ticket
get
Get transfer ticket by hash
get
Get transfer ticket status
get
Get transfer ticket count
get
Get tx rollup commit
get
Get tx rollup commit by hash
get
Get tx rollup commit status
get
Get tx rollup commit count
get
Get tx rollup dispatch tickets
get
Get tx rollup dispatch tickets by hash
get
Get tx rollup dispatch tickets status
get
Get tx rollup dispatch tickets count
get
Get tx rollup finalize commitment
get
Get tx rollup finalize commitment by hash
get
Get tx rollup finalize commitment status
get
Get tx rollup finalize commitment count
get
Get tx rollup origination
get
Get tx rollup origination by hash
get
Get tx rollup origination status
get
Get tx rollup origination count
get
Get tx rollup rejection
get
Get tx rollup rejection by hash
get
Get tx rollup rejection status
get
Get tx rollup rejection count
get
Get tx rollup remove commitment
get
Get tx rollup remove commitment by hash
get
Get tx rollup remove commitment status
get
Get tx rollup remove commitment count
get
Get tx rollup return bond
get
Get tx rollup return bond by hash
get
Get tx rollup return bond status
get
Get tx rollup return bond count
get
Get tx rollup submit batch
get
Get tx rollup submit batch by hash
get
Get tx rollup submit batch status
get
Get tx rollup submit batch count
get
Get increase paid storage
get
Get increase paid storage by hash
get
Get increase paid storage count
get
Get update secondary key
get
Get update secondary key by hash
get
Get update secondary key count
get
Get smart rollup add messages
get
Get smart rollup add messages count
get
Get smart rollup cement
get
Get smart rollup cement count
get
Get smart rollup execute
get
Get smart rollup execute count
get
Get smart rollup originate
get
Get smart rollup originate count
get
Get smart rollup publish
get
Get smart rollup publish count
get
Get smart rollup recover bond
get
Get smart rollup recover bond count
get
Get smart rollup refute
get
Get smart rollup refute count
get
Get staking ops
get
Get staking ops count
get
Get migrations
get
Get migration by id
get
Get migrations count
get
Get revelation penalties
get
Get revelation penalty by id
get
Get revelation penalties count
get
Get baking
get
Get baking by id
get
Get baking count
get
Get attestation rewards
get
Get attestation reward by id
get
Get attestation rewards count
get
Get dal attestation rewards
get
Get dal attestation reward by id
get
Get dal attestation rewards count
get
Get autostaking ops
get
Get autostaking ops count
get
Get set_delegate_parameters ops
get
Get set_delegate_parameters ops count
get
Get dal_publish_commitment ops
get
Get dal_publish_commitment ops count
Protocols
Quotes
Rewards
Rights
SmartRollups
Software
Staking
Statistics
Tickets
Tokens
Voting
WebSocket API
Get Started
Subscriptions
Examples
Libraries
Typescript SDK
Taquito extension
Documentation Powered by ReDoc
TzKT API (1.16.0)
Baking Bad Team: hello@bakingbad.dev
URL: https://bakingbad.dev
Introduction
TzKT is the most widely used tool in Tezos that provides you with convenient and flexible access to the Tezos blockchain data, processed and indexed by its own indexer. You can fetch all historical data via REST API, or subscribe for real-time data via WebSocket API. TzKT was built by the joint efforts of the entire Tezos community to help developers build more services and dapps on top of Tezos.

TzKT Indexer and API are open-source, so don't be afraid to depend on the third-party service, because you can always clone, build and run it yourself to have full control over all the components.

Feel free to contact us if you have any questions or feature requests. Your feedback is much appreciated!

Discord: https://discord.gg/aG8XKuwsQd
Telegram: https://t.me/baking_bad_chat
Slack: https://tezos-dev.slack.com/archives/CV5NX7F2L
Twitter: https://twitter.com/TezosBakingBad
Email: hello@bakingbad.dev
And don't forget to star TzKT on GitHub if you like it ðŸ˜Š

Get Started
There are two API services provided for public use:

Free TzKT API with free anonymous access;
TzKT Pro with paid subscriptions with increased rate limits, off-chain data, extended support and business-level SLA.
You can find more details about differences between available tiers here.

Free TzKT API
Free-tier TzKT API is the best way to get started and explore available Tezos data and API functionality. It doesn't require authorization and is free for everyone and for both commercial and non-commercial use.

Note: attribution required
If you use free-tier TzKT API, you must mention it on your website or application by placing the label "Powered by TzKT API", or "Built with TzKT API", or "Data provided by TzKT API" with a direct link to tzkt.io.

It's available for the following Tezos networks with the following base URLs:

Mainnet: https://api.tzkt.io/ or https://api.mainnet.tzkt.io/ (view docs)
Ghostnet: https://api.ghostnet.tzkt.io/ (view docs)
Seoulnet: https://api.seoulnet.tzkt.io/ (view docs)
Sending Requests
To send a request to Free TzKT API you need literally nothing. Just take the base URL of the particular network (for example, Tezos mainnet: https://api.tzkt.io) and append the path of the particular endpoint (for example, chain's head: /v1/head), that's pretty much it:

curl https://api.tzkt.io/v1/head
Read through this documentation to explore available endpoints, query parameters (note, if you click on a query parameter, you will see available modes, such as .eq, .in, etc.) and response models. If you have any questions, do not hesitate to ask for support, Tezos community has always been very friendly! ðŸ˜‰

Rate Limits
Please, refer to https://tzkt.io/api to check relevant rate limits.

If you exceed the limit, the API will respond with HTTP 429 status code.

TzKT Pro
TzKT Pro is intended for professional use, for those who seek for extended capabilities, performance, reliability and business-level SLA. TzKT Pro service is provided via paid subscriptions. Please, refer to Pricing Plans to check available tiers.

It's available for the following Tezos networks with the following base URLs:

Mainnet: https://pro.tzkt.io/ (view docs)
Testnets: let us know if you need TzKT Pro for testnets
Authorization
To access TzKT Pro you will need to authorize requests with your personal API key, that you will receive on your email after purchasing a subscription. This can be done by adding the query string parameter ?apikey={your_key} or by adding the HTTP header apikey: {your_key}.

Note that you can have multiple API keys within a single subscription.

Keep your API keys private, do not publish it anywhere and do not hardcode it, especially in public repositories. If your key was compromised, just let us know and we will issue a new one.

Also note that passing the API key via HTTP headers is more secure, because in HTTPS headers are encrypted, but query string is not, so the key can be unintentionally exposed to third parties.

Sending Requests
Sending a request with the API key passed as a query string parameter:

curl https://pro.tzkt.io/v1/head?apikey={your_key}
Sending a request with the API key passed via an HTTP header:

curl https://pro.tzkt.io/v1/head \
    -H 'apikey: {your_key}'
Rate Limits
Please, refer to https://tzkt.io/api to check relevant rate limits for different pricing plans.

Also, TzKT Pro provides you with the additional HTTP headers to show the allowed limits, number of available requests and the time remaining (in seconds) until the quota is reset. Here's an example:

RateLimit-Limit: 50
RateLimit-Remaining: 49
RateLimit-Reset: 1
It also sends general information about your rate limits per second and per day:

X-RateLimit-Limit-Second: 50
X-RateLimit-Remaining-Second: 49
X-RateLimit-Limit-Day: 3000000
X-RateLimit-Remaining-Day: 2994953
If you exceed the limit, the API will respond with HTTP 429 status code.

Accounts
Get accounts
Returns a list of accounts.

query Parameters
id	
Int32Parameter (object) Nullable
Filters by internal id.

address	
AddressParameter (object) Nullable
Filters by address.

type	
AccountTypeParameter (object) Nullable
Filters accounts by type (user, delegate, contract, rollup, smart_rollup, ghost).

kind	
ContractKindParameter (object) Nullable
Filters accounts by contract kind (delegator_contract or smart_contract)

delegate	
AccountParameter (object) Nullable
Filters accounts by delegate. Allowed fields for .eqx mode: none.

stakedPseudotokens	
BigIntegerNullableParameter (object) Nullable
Filters accounts by amount of staked pseudotokens.

balance	
Int64Parameter (object) Nullable
Filters accounts by balance

staked	
BoolParameter (object) Nullable
Filters accounts by participation in staking

lastActivity	
Int32Parameter (object) Nullable
Filters accounts by last activity level (where the account was updated)

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts delegators by specified field. Supported fields: id (default), balance, rollupBonds, firstActivity, lastActivity, numTransactions, numContracts.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

Responses
200

get
/v1/accounts
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"address": "string"
}
]
Get accounts activity
query Parameters
addresses	
string
Comma-separated list of account addresses to get activity of.

roles	
string Nullable
Comma-separated list of activity roles (sender, target, initiator, mention) to filter activity by.

types	
string Nullable
Comma-separated list of activity types (activation, autostaking, baking, ballot, dal_attestation_reward, dal_entrapment_evidence, dal_publish_commitment, delegation, double_baking, double_consensus, drain_delegate, attestation, attestation_reward, increase_paid_storage, migration, nonce_revelation, origination, preattestation, proposal, register_constant, reveal, revelation_penalty, set_delegate_parameters, set_deposits_limit, sr_add_messages, sr_cement, sr_execute, sr_originate, sr_publish, sr_recover_bond, sr_refute, staking, transaction, transfer_ticket, tx_rollup_commit, tx_rollup_dispatch_tickets, tx_rollup_finalize_commitment, tx_rollup_origination, tx_rollup_rejection, tx_rollup_remove_commitment, tx_rollup_return_bond, tx_rollup_submit_batch, vdf_revelation, update_secondary_key, ticket_transfer, token_transfer)

timestamp	
TimestampParameter (object) Nullable
Filter activity by timestamp.

sort	
SortMode (string)
Default: "Descending"
Sort mode: 0 - asc (oldest to newest), 1 - desc (newest to oldest).

lastId	
integer <int64> Nullable
Id of the last activity element received, which is used for cursor pagination.

limit	
integer <int32> [ 0 .. 1000 ]
Default: 100
Number of elements to return.

micheline	
MichelineFormat (string)
Default: "Json"
Format of the parameters, storage and diffs: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string.

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response.

Responses
200
Response Schema: application/json
Array ()
type	
string
Activity type

ticket_transfer
id	
integer <int64>
Internal TzKT id.
[sortable]

level	
integer <int32>
Level of the block, at which the transfer was made.
[sortable]

timestamp	
string <date-time>
Timestamp of the block, at which the transfer was made.

ticket	
TicketInfo (object)
Ticket info.
Click on the field to expand more details.

from	
Alias (object) Nullable
Sender account.
Click on the field to expand more details.

to	
Alias (object) Nullable
Recipient account.
Click on the field to expand more details.

amount	
string
Amount of tickets transferred.
[sortable]

transactionId	
integer <int64> Nullable
Internal TzKT id of the transaction operation, caused the ticket transfer.

transferTicketId	
integer <int64> Nullable
Internal TzKT id of the transfer_ticket operation, caused the ticket transfer.

smartRollupExecuteId	
integer <int64> Nullable
Internal TzKT id of the smart_rollup_execute operation, caused the ticket transfer.


get
/v1/accounts/activity
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0
}
]
Get accounts count
Returns a number of accounts.

query Parameters
type	
AccountTypeParameter (object) Nullable
Filters accounts by type (user, delegate, contract, rollup, smart_rollup, ghost).

kind	
ContractKindParameter (object) Nullable
Filters accounts by contract kind (delegator_contract or smart_contract)

balance	
Int64Parameter (object) Nullable
Filters accounts by balance

staked	
BoolParameter (object) Nullable
Filters accounts by participation in staking

firstActivity	
Int32Parameter (object) Nullable
Filters accounts by first activity level (where the account was created)

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/accounts/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get account by address
Returns an account with the specified address.

path Parameters
address
required
string
Account address

Responses
200
Response Schema: application/json
id	
integer <int32>
Internal TzKT id

type	
string
user
address	
string
Public key hash of the account

alias	
string Nullable
Name of the project behind the account or account description

publicKey	
string Nullable
Base58 representation of account's public key, revealed by the account

revealed	
boolean
Public key revelation status. Unrevealed account can't send manager operation (transaction, origination etc.)

balance	
integer <int64>
Account balance

rollupBonds	
integer <int64>
Amount of tx rollup commitment bonds (micro tez)

smartRollupBonds	
integer <int64>
Amount of smart rollup commitment bonds (micro tez)

stakedBalance	
integer <int64>
Amount staked with the selected baker (micro tez). Like delegated amount, except for it is frozen and can be slashed.

stakedPseudotokens	
string Nullable
Amount of "pseudo-tokens" received after staking. These pseudotokens are used for unstaking.

unstakedBalance	
integer <int64>
Amount that was unstaked, but not yet finalized (i.e. it is still frozen) (micro tez)

unstakedBaker	
Alias (object) Nullable
Information about the baker, for which there are pending unstake requests

counter	
integer <int32>
An account nonce which is used to prevent operation replay

delegate	
DelegateInfo (object) Nullable
Information about the current delegate of the account. null if it's not delegated

delegationLevel	
integer <int32> Nullable
Block height of latest delegation. null if it's not delegated

delegationTime	
string <date-time> Nullable
Block datetime of latest delegation (ISO 8601, e.g. 2020-02-20T02:40:57Z). null if it's not delegated

numContracts	
integer <int32>
Number of contracts, created (originated) and/or managed by the account

rollupsCount	
integer <int32>
Number of tx rollups, created (originated) by the account

smartRollupsCount	
integer <int32>
Number of smart rollups, created (originated) by the account

activeTokensCount	
integer <int32>
Number of account tokens with non-zero balances

tokenBalancesCount	
integer <int32>
Number of tokens the account ever had

tokenTransfersCount	
integer <int32>
Number of token transfers from/to the account

activeTicketsCount	
integer <int32>
Number of tickets the account owns.

ticketBalancesCount	
integer <int32>
Number of tickets the account ever owned.

ticketTransfersCount	
integer <int32>
Number of ticket transfers from/to the account.

numActivations	
integer <int32>
Number of account activation operations. Are used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundationâ€™s fundraiser

numDelegations	
integer <int32>
Number of delegation operations, related to the account

numOriginations	
integer <int32>
Number of all origination (deployment / contract creation) operations, related to the account

numTransactions	
integer <int32>
Number of all transaction (tez transfer) operations, related to the account

numReveals	
integer <int32>
Number of reveal (is used to reveal the public key associated with an account) operations of the contract

numRegisterConstants	
integer <int32>
Number of register global constant operations sent by the account

numSetDepositsLimits	
integer <int32>
Number of set deposits limit operations sent by the account

numMigrations	
integer <int32>
Number of migration (result of the context (database) migration during a protocol update) operations, related to the account (synthetic type)

txRollupOriginationCount	
integer <int32>
Number of tx rollup origination operations sent by the account

txRollupSubmitBatchCount	
integer <int32>
Number of tx rollup submit batch operations sent by the account

txRollupCommitCount	
integer <int32>
Number of tx rollup commit operations sent by the account

txRollupReturnBondCount	
integer <int32>
Number of tx rollup return bond operations sent by the account

txRollupFinalizeCommitmentCount	
integer <int32>
Number of tx rollup finalize commitment operations sent by the account

txRollupRemoveCommitmentCount	
integer <int32>
Number of tx rollup remove commitment operations sent by the account

txRollupRejectionCount	
integer <int32>
Number of tx rollup rejection operations sent by the account

txRollupDispatchTicketsCount	
integer <int32>
Number of tx rollup dispatch tickets operations sent by the account

transferTicketCount	
integer <int32>
Number of transfer ticket operations sent by the account

increasePaidStorageCount	
integer <int32>
Number of increase_paid_storage operations sent by the account

drainDelegateCount	
integer <int32>
Number of drain_delegate operations related to the account

smartRollupAddMessagesCount	
integer <int32>
Number of smart_rollup_add_messages operations related to the account

smartRollupCementCount	
integer <int32>
Number of smart_rollup_cement operations related to the account

smartRollupExecuteCount	
integer <int32>
Number of smart_rollup_execute_outbox_message operations related to the account

smartRollupOriginateCount	
integer <int32>
Number of smart_rollup_originate operations related to the account

smartRollupPublishCount	
integer <int32>
Number of smart_rollup_publish operations related to the account

smartRollupRecoverBondCount	
integer <int32>
Number of smart_rollup_recover_bond operations related to the account

smartRollupRefuteCount	
integer <int32>
Number of smart_rollup_refute operations related to the account

refutationGamesCount	
integer <int32>
Number of smart rollup refutation games related to the account

activeRefutationGamesCount	
integer <int32>
Number of active smart rollup refutation games related to the account

stakingOpsCount	
integer <int32>
Number of staking operations related to the account

stakingUpdatesCount	
integer <int32>
Number of staking updates related to the account

setDelegateParametersOpsCount	
integer <int32>
Number of set delegate parameters operations related to the account

dalPublishCommitmentOpsCount	
integer <int32>
Number of DAL publish commitment operations related to the account

firstActivity	
integer <int32> Nullable
Block height of the first operation, related to the account

firstActivityTime	
string <date-time> Nullable
Block datetime of the first operation, related to the account (ISO 8601, e.g. 2020-02-20T02:40:57Z)

lastActivity	
integer <int32> Nullable
Height of the block in which the account state was changed last time

lastActivityTime	
string <date-time> Nullable
Datetime of the block in which the account state was changed last time (ISO 8601, e.g. 2020-02-20T02:40:57Z)

extras	
any Nullable
Off-chain extras


get
/v1/accounts/{address}
Response samples
200
Content type
application/json
Example
user

Copy
Expand allCollapse all
{
"id": 0,
"type": "user",
"address": "string",
"alias": "string",
"publicKey": "string",
"revealed": true,
"balance": 0,
"rollupBonds": 0,
"smartRollupBonds": 0,
"stakedBalance": 0,
"stakedPseudotokens": "string",
"unstakedBalance": 0,
"unstakedBaker": {
"alias": "string",
"address": "string"
},
"counter": 0,
"delegate": {
"alias": "string",
"address": "string",
"active": true
},
"delegationLevel": 0,
"delegationTime": "2019-08-24T14:15:22Z",
"numContracts": 0,
"rollupsCount": 0,
"smartRollupsCount": 0,
"activeTokensCount": 0,
"tokenBalancesCount": 0,
"tokenTransfersCount": 0,
"activeTicketsCount": 0,
"ticketBalancesCount": 0,
"ticketTransfersCount": 0,
"numActivations": 0,
"numDelegations": 0,
"numOriginations": 0,
"numTransactions": 0,
"numReveals": 0,
"numRegisterConstants": 0,
"numSetDepositsLimits": 0,
"numMigrations": 0,
"txRollupOriginationCount": 0,
"txRollupSubmitBatchCount": 0,
"txRollupCommitCount": 0,
"txRollupReturnBondCount": 0,
"txRollupFinalizeCommitmentCount": 0,
"txRollupRemoveCommitmentCount": 0,
"txRollupRejectionCount": 0,
"txRollupDispatchTicketsCount": 0,
"transferTicketCount": 0,
"increasePaidStorageCount": 0,
"drainDelegateCount": 0,
"smartRollupAddMessagesCount": 0,
"smartRollupCementCount": 0,
"smartRollupExecuteCount": 0,
"smartRollupOriginateCount": 0,
"smartRollupPublishCount": 0,
"smartRollupRecoverBondCount": 0,
"smartRollupRefuteCount": 0,
"refutationGamesCount": 0,
"activeRefutationGamesCount": 0,
"stakingOpsCount": 0,
"stakingUpdatesCount": 0,
"setDelegateParametersOpsCount": 0,
"dalPublishCommitmentOpsCount": 0,
"firstActivity": 0,
"firstActivityTime": "2019-08-24T14:15:22Z",
"lastActivity": 0,
"lastActivityTime": "2019-08-24T14:15:22Z",
"extras": null
}
Get account contracts
Returns a list of contracts created by (or related to) the specified account.

path Parameters
address
required
string
Account address (starting with tz or KT)

query Parameters
sort	
SortParameter (object) Nullable
Sorts contracts by specified field. Supported fields: id (default, desc), balance, creationLevel.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

Responses
200
Response Schema: application/json
Array ()
kind	
string
Kind of the contract (delegator_contract or smart_contract), where delegator_contract - manager.tz smart contract for delegation purpose only

alias	
string Nullable
Name of the project behind the contract or contract description

address	
string
Public key hash of the contract

balance	
integer <int64>
Contract balance (micro tez)

delegate	
DelegateInfo (object) Nullable
Information about the current delegate of the contract. null if it's not delegated

creationLevel	
integer <int32>
Height of the block where the contract was created

creationTime	
string <date-time> Nullable
Datetime of the block where the contract was created (ISO 8601, e.g. 2020-02-20T02:40:57Z)


get
/v1/accounts/{address}/contracts
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"kind": "string",
"alias": "string",
"address": "string",
"balance": 0,
"delegate": {},
"creationLevel": 0,
"creationTime": "2019-08-24T14:15:22Z"
}
]
Get account delegators
Returns a list of accounts delegated to the specified account.

path Parameters
address
required
string
Account address (starting with tz)

query Parameters
type	
AccountTypeParameter (object) Nullable
Filters delegators by type (user, delegate, contract, rollup, smart_rollup, ghost).

balance	
Int64Parameter (object) Nullable
Filters delegators by balance.

delegationLevel	
Int32Parameter (object) Nullable
Number of items to skip

sort	
SortParameter (object) Nullable
Sorts delegators by specified field. Supported fields: delegationLevel (default, desc), balance.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

Responses
200
Response Schema: application/json
Array ()
type	
string
Delegator type ('contract' for KT.. address or 'user' for tz.. address)

alias	
string Nullable
Name of the project behind the account or account description

address	
string
Public key hash of the account

balance	
integer <int64>
Account balance (micro tez)

delegationLevel	
integer <int32>
Block height of last delegation operation

delegationTime	
string <date-time>
Block datetime of last delegation operation (ISO 8601, e.g. 2020-02-20T02:40:57Z)


get
/v1/accounts/{address}/delegators
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"alias": "string",
"address": "string",
"balance": 0,
"delegationLevel": 0,
"delegationTime": "2019-08-24T14:15:22Z"
}
]
Get counter
Returns account counter

path Parameters
address
required
string
Account address (starting with tz or KT)

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/accounts/{address}/counter
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get balance
Returns account balance

path Parameters
address
required
string
Account address (starting with tz or KT)

Responses
200
Response Schema: application/json
integer <int64>

get
/v1/accounts/{address}/balance
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get balance at level
Returns account balance* at the specified block.
* - for non-baker tz-accounts historical balances do not include staked tez, because stakers do not really have staked tez on their balance, they have staking pseudotokens instead. If you want to get a full historical balance, including staked tez, use the Tezos node RPC: /chains/main/blocks/{level}/context/contracts/{address}/full_balance.

path Parameters
address
required
string
Account address (starting with tz or KT)

level
required
integer <int32>
Block height at which you want to know account balance

Responses
200
Response Schema: application/json
integer <int64>

get
/v1/accounts/{address}/balance_history/{level}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get balance at date
Returns account balance* at the specified datetime.
* - for non-baker tz-accounts historical balances do not include staked tez, because stakers do not really have staked tez on their balance, they have staking pseudotokens instead. If you want to get a full historical balance, including staked tez, use the Tezos node RPC: /chains/main/blocks/{level}/context/contracts/{address}/full_balance.

path Parameters
address
required
string
Account address (starting with tz or KT)

datetime
required
string <date-time>
Datetime at which you want to know account balance (e.g. 2020-01-01, or 2019-12-30T23:42:59Z)

Responses
200
Response Schema: application/json
integer <int64>

get
/v1/accounts/{address}/balance_history/{datetime}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get balance history
Returns time series with historical balances* (only changes, without duplicates).
* - for non-baker tz-accounts historical balances do not include staked tez, because stakers do not really have staked tez on their balance, they have staking pseudotokens instead. If you want to get a full historical balance, including staked tez, use the Tezos node RPC: /chains/main/blocks/{level}/context/contracts/{address}/full_balance.

path Parameters
address
required
string
Account address (starting with tz or KT)

query Parameters
step	
integer <int32> Nullable
Step of the time series, for example if step = 1000 you will get balances at blocks 1000, 2000, 3000, ....

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts historical balances by specified field. Supported fields: level.

offset	
integer <int32>
Default: 0
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
level	
integer <int32>
Height of the block at which the account balance was calculated

timestamp	
string <date-time>
Timestamp of the block at which the account balance was calculated

balance	
integer <int64>
Historical balance

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of balance snapshot


get
/v1/accounts/{address}/balance_history
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"balance": 0,
"quote": {}
}
]
Get account report
Exports account balance report in .csv format

path Parameters
address
required
string
Account address (starting with tz or KT)

query Parameters
from	
string <date-time> Nullable
Start of the datetime range to filter by (ISO 8601, e.g. 2019-11-31)

to	
string <date-time> Nullable
End of the datetime range to filter by (ISO 8601, e.g. 2019-12-31)

currency	
string
Currency to convert amounts to (btc, eur, usd, cny, jpy, krw, eth, gbp)

historical	
boolean
Default: false
true if you want to use historical prices, false to use current price

delimiter	
string
Default: "comma"
Column delimiter (comma, semicolon)

separator	
string
Default: "point"
Decimal separator (comma, point)

Responses
200
Response Schema: application/octet-stream
string <binary>

get
/v1/accounts/{address}/report
BigMaps
Get bigmaps count
Returns the total number of bigmaps.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/bigmaps/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get bigmaps
Returns a list of bigmaps.

query Parameters
contract	
AccountParameter (object) Nullable
Filters bigmaps by smart contract address.

path	
StringParameter (object) Nullable
Filters bigmaps by path in the contract storage.

tags	
BigMapTagsParameter (object) Nullable
Filters bigmaps by tags: metadata, token_metadata, ledger.

active	
boolean Nullable
Filters bigmaps by status: true - active, false - removed.

lastLevel	
Int32Parameter (object) Nullable
Filters bigmaps by the last update level.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts bigmaps by specified field. Supported fields: id (default), ptr, firstLevel, lastLevel, totalKeys, activeKeys, updates.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

micheline	
MichelineFormat (string)
Default: "Json"
Format of the bigmap key and value type: 0 - JSON, 2 - Micheline

Responses
200
Response Schema: application/json
Array ()
ptr	
integer <int32>
Bigmap pointer

contract	
Alias (object)
Smart contract in which's storage the bigmap is allocated

path	
string
Path to the bigmap in the contract storage

tags	
Array of strings Nullable
List of tags ( metadata, token_metadata,ledger, or null if there are no tags)

active	
boolean
Bigmap status (true - active, false - removed)

firstLevel	
integer <int32>
Level of the block where the bigmap was seen first time

lastLevel	
integer <int32>
Level of the block where the bigmap was seen last time

totalKeys	
integer <int32>
Total number of keys ever added to the bigmap

activeKeys	
integer <int32>
Total number of currently active keys

updates	
integer <int32>
Total number of actions with the bigmap

keyType	
any
Bigmap key type as JSON schema or Micheline, depending on the micheline query parameter.

valueType	
any
Bigmap value type as JSON schema or Micheline, depending on the micheline query parameter.


get
/v1/bigmaps
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"ptr": 0,
"contract": {},
"path": "string",
"tags": [],
"active": true,
"firstLevel": 0,
"lastLevel": 0,
"totalKeys": 0,
"activeKeys": 0,
"updates": 0,
"keyType": null,
"valueType": null
}
]
Get bigmap keys
Returns a list of all bigmap keys.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

bigmap	
Int32Parameter (object) Nullable
Filter by bigmap ptr.
Click on the parameter to expand more details.

active	
boolean Nullable
Filters by status: true - active, false - removed.

hash	
ExpressionParameter (object) Nullable
Filter by key hash.
Click on the parameter to expand more details.

key	
JsonParameter (object) Nullable
Filter by key.
Note, this parameter supports the following format: key{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by (for example, ?key.foo.in=bar,baz).
Click on the parameter to expand more details.

value	
JsonParameter (object) Nullable
Filter by value.
Note, this parameter supports the following format: value{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by (for example, ?value.foo.in=bar,baz).
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the key was first seen.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the key was first seen.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the key was last seen.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the key was last seen.
Click on the parameter to expand more details.

updates	
Int32Parameter (object) Nullable
Filter by number of actions with the bigmap key.
Click on the parameter to expand more details.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

micheline	
MichelineFormat (string)
Default: "Json"
Format of the key and value fields: 0 - JSON, 2 - Micheline

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal TzKT id.
[sortable]

bigmap	
integer <int32>
Bigmap ptr.

active	
boolean
Key status (true - active, false - removed).

hash	
string
Key hash.

key	
any
Key in JSON or Micheline format, depending on the micheline query parameter.
[sortable]

value	
any
Value in JSON or Micheline format, depending on the micheline query parameter. Note, if the key is inactive (removed) this field will contain the last non-null value.
[sortable]

firstLevel	
integer <int32>
Level of the block where the key was first seen.
[sortable]

firstTime	
string <date-time>
Timestamp of the block where the key was first seen.

lastLevel	
integer <int32>
Level of the block where the key was last seen.
[sortable]

lastTime	
string <date-time>
Timestamp of the block where the key was last seen.

updates	
integer <int32>
Total number of actions with the key.
[sortable]


get
/v1/bigmaps/keys
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"bigmap": 0,
"active": true,
"hash": "string",
"key": null,
"value": null,
"firstLevel": 0,
"firstTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"lastTime": "2019-08-24T14:15:22Z",
"updates": 0
}
]
Get bigmap updates count
Returns a total number of bigmap updates.

query Parameters
bigmap	
Int32Parameter (object) Nullable
Filters by bigmap ptr

path	
StringParameter (object) Nullable
Filters by bigmap path

contract	
AccountParameter (object) Nullable
Filters by bigmap contract

tags	
BigMapTagsParameter (object) Nullable
Filters by bigmap tags: metadata, token_metadata, ledger

action	
BigMapActionParameter (object) Nullable
Filters by action

value	
JsonParameter (object) Nullable
Filters by JSON value. Note, this query parameter supports the following format: ?value{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?value.balance.gt=....

level	
Int32Parameter (object) Nullable
Filters by level

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal Id, can be used for pagination

level	
integer <int32>
Level of the block where the bigmap was updated

timestamp	
string <date-time>
Timestamp of the block where the bigmap was updated

bigmap	
integer <int32>
Bigmap ptr

contract	
Alias (object)
Smart contract in which's storage the bigmap is allocated

path	
string
Path to the bigmap in the contract storage

action	
string
Action with the bigmap (allocate, add_key, update_key, remove_key, remove)

content	
BigMapKeyShort (object) Nullable
Updated key. If the action is allocate or remove the content will be null.


get
/v1/bigmaps/updates/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"bigmap": 0,
"contract": {},
"path": "string",
"action": "string",
"content": {}
}
]
Get bigmap updates
Returns a list of all bigmap updates.

query Parameters
bigmap	
Int32Parameter (object) Nullable
Filters by bigmap ptr

path	
StringParameter (object) Nullable
Filters by bigmap path

contract	
AccountParameter (object) Nullable
Filters by bigmap contract

tags	
BigMapTagsParameter (object) Nullable
Filters by bigmap tags: metadata, token_metadata, ledger

action	
BigMapActionParameter (object) Nullable
Filters by action

value	
JsonParameter (object) Nullable
Filters by JSON value. Note, this query parameter supports the following format: ?value{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?value.balance.gt=....

level	
Int32Parameter (object) Nullable
Filters by level

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp

sort	
SortParameter (object) Nullable
Sorts bigmaps by specified field. Supported fields: id (default), ptr, firstLevel, lastLevel, totalKeys, activeKeys, updates.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

micheline	
MichelineFormat (string)
Default: "Json"
Format of the bigmap key and value type: 0 - JSON, 2 - Micheline

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal Id, can be used for pagination

level	
integer <int32>
Level of the block where the bigmap was updated

timestamp	
string <date-time>
Timestamp of the block where the bigmap was updated

bigmap	
integer <int32>
Bigmap ptr

contract	
Alias (object)
Smart contract in which's storage the bigmap is allocated

path	
string
Path to the bigmap in the contract storage

action	
string
Action with the bigmap (allocate, add_key, update_key, remove_key, remove)

content	
BigMapKeyShort (object) Nullable
Updated key. If the action is allocate or remove the content will be null.


get
/v1/bigmaps/updates
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"bigmap": 0,
"contract": {},
"path": "string",
"action": "string",
"content": {}
}
]
Get bigmap by Id
Returns a bigmap with the specified Id.

path Parameters
id
required
integer <int32>
Bigmap Id

query Parameters
micheline	
MichelineFormat (string)
Default: "Json"
Format of the bigmap key and value type: 0 - JSON, 2 - Micheline

Responses
200
Response Schema: application/json
ptr	
integer <int32>
Bigmap pointer

contract	
Alias (object)
Smart contract in which's storage the bigmap is allocated

path	
string
Path to the bigmap in the contract storage

tags	
Array of strings Nullable
List of tags ( metadata, token_metadata,ledger, or null if there are no tags)

active	
boolean
Bigmap status (true - active, false - removed)

firstLevel	
integer <int32>
Level of the block where the bigmap was seen first time

lastLevel	
integer <int32>
Level of the block where the bigmap was seen last time

totalKeys	
integer <int32>
Total number of keys ever added to the bigmap

activeKeys	
integer <int32>
Total number of currently active keys

updates	
integer <int32>
Total number of actions with the bigmap

keyType	
any
Bigmap key type as JSON schema or Micheline, depending on the micheline query parameter.

valueType	
any
Bigmap value type as JSON schema or Micheline, depending on the micheline query parameter.


get
/v1/bigmaps/{id}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"ptr": 0,
"contract": {
"alias": "string",
"address": "string"
},
"path": "string",
"tags": [
"string"
],
"active": true,
"firstLevel": 0,
"lastLevel": 0,
"totalKeys": 0,
"activeKeys": 0,
"updates": 0,
"keyType": null,
"valueType": null
}
Get bigmap type
Returns a type of the bigmap with the specified Id in Micheline format (with annotations).

path Parameters
id
required
integer <int32>
Bigmap Id

Responses
200
Response Schema: application/json
prim	
integer (PrimType)
Enum: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158
args	
Array of objects (IMicheline) Nullable
annots	
Array of objects (IAnnotation) Nullable

get
/v1/bigmaps/{id}/type
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"prim": 0,
"args": [
{}
],
"annots": [
{}
]
}
Get bigmap keys
Returns a list of bigmap keys.

path Parameters
id
required
integer <int32>
Bigmap Id

query Parameters
active	
boolean Nullable
Filters keys by status: true - active, false - removed.

key	
JsonParameter (object) Nullable
Filters keys by JSON key. Note, this query parameter supports the following format: ?key{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?key.token_id=....

value	
JsonParameter (object) Nullable
Filters keys by JSON value. Note, this query parameter supports the following format: ?value{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?value.balance.gt=....

lastLevel	
Int32Parameter (object) Nullable
Filters bigmap keys by the last update level.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts bigmap keys by specified field. Supported fields: id (default), firstLevel, lastLevel, updates.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

micheline	
MichelineFormat (string)
Default: "Json"
Format of the bigmap key and value: 0 - JSON, 1 - JSON string, 2 - Micheline, 3 - Micheline string

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal Id, can be used for pagination

active	
boolean
Bigmap key status (true - active, false - removed)

hash	
string
Key hash

key	
any
Key in JSON or Micheline format, depending on the micheline query parameter.

value	
any
Value in JSON or Micheline format, depending on the micheline query parameter. Note, if the key is inactive (removed) it will contain the last non-null value.

firstLevel	
integer <int32>
Level of the block where the bigmap key was seen first time

lastLevel	
integer <int32>
Level of the block where the bigmap key was seen last time

updates	
integer <int32>
Total number of actions with the bigmap key


get
/v1/bigmaps/{id}/keys
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"active": true,
"hash": "string",
"key": null,
"value": null,
"firstLevel": 0,
"lastLevel": 0,
"updates": 0
}
]
Get bigmap key
Returns the specified bigmap key.

path Parameters
id
required
integer <int32>
Bigmap Id

key
required
string
Either a key hash (expr123...) or a plain value (foo...). Even if the key is complex (an object or an array), you can specify it as is, for example, /keys/{"address":"tz123","nat":"123"}.

query Parameters
micheline	
MichelineFormat (string)
Default: "Json"
Format of the bigmap key and value: 0 - JSON, 1 - JSON string, 2 - Micheline, 3 - Micheline string

Responses
200
Response Schema: application/json
id	
integer <int32>
Internal Id, can be used for pagination

active	
boolean
Bigmap key status (true - active, false - removed)

hash	
string
Key hash

key	
any
Key in JSON or Micheline format, depending on the micheline query parameter.

value	
any
Value in JSON or Micheline format, depending on the micheline query parameter. Note, if the key is inactive (removed) it will contain the last non-null value.

firstLevel	
integer <int32>
Level of the block where the bigmap key was seen first time

lastLevel	
integer <int32>
Level of the block where the bigmap key was seen last time

updates	
integer <int32>
Total number of actions with the bigmap key


get
/v1/bigmaps/{id}/keys/{key}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"id": 0,
"active": true,
"hash": "string",
"key": null,
"value": null,
"firstLevel": 0,
"lastLevel": 0,
"updates": 0
}
Get bigmap key updates
Returns updates history for the specified bigmap key.

path Parameters
id
required
integer <int32>
Bigmap Id

key
required
string
Either a key hash (expr123...) or a plain value (foo...). Even if the key is complex (an object or an array), you can specify it as is, for example, /keys/{"address":"tz123","nat":"123"}.

query Parameters
sort	
SortParameter (object) Nullable
Sorts bigmap updates by specified field. Supported fields: id (default).

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

micheline	
MichelineFormat (string)
Default: "Json"
Format of the key value: 0 - JSON, 1 - JSON string, 2 - Micheline, 3 - Micheline string

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal Id, can be used for pagination

level	
integer <int32>
Level of the block where the bigmap key was updated

timestamp	
string <date-time>
Timestamp of the block where the bigmap key was updated

action	
string
Action with the key (add_key, update_key, remove_key)

value	
any
Value in JSON or Micheline format, depending on the micheline query parameter. Note, if the action is remove_key it will contain the last non-null value.


get
/v1/bigmaps/{id}/keys/{key}/updates
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"action": "string",
"value": null
}
]
Get historical keys
Returns a list of bigmap keys at the specific block.

path Parameters
id
required
integer <int32>
Bigmap Id

level
required
integer <int32>
Level of the block at which you want to get bigmap keys

query Parameters
active	
boolean Nullable
Filters keys by status: true - active, false - removed.

key	
JsonParameter (object) Nullable
Filters keys by JSON key. Note, this query parameter supports the following format: ?key{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?key.token_id=....

value	
JsonParameter (object) Nullable
Filters keys by JSON value. Note, this query parameter supports the following format: ?value{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?value.balance.gt=....

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts bigmap keys by specified field. Supported fields: id (default).

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

micheline	
MichelineFormat (string)
Default: "Json"
Format of the bigmap key and value: 0 - JSON, 1 - JSON string, 2 - Micheline, 3 - Micheline string

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal Id, can be used for pagination

active	
boolean
Bigmap key status (true - active, false - removed)

hash	
string
Key hash

key	
any
Key in JSON or Micheline format, depending on the micheline query parameter.

value	
any
Value in JSON or Micheline format, depending on the micheline query parameter. Note, if the key is inactive (removed) it will contain the last non-null value.


get
/v1/bigmaps/{id}/historical_keys/{level}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"active": true,
"hash": "string",
"key": null,
"value": null
}
]
Get historical key
Returns the specified bigmap key at the specific block.

path Parameters
id
required
integer <int32>
Bigmap Id

level
required
integer <int32>
Level of the block at which you want to get bigmap key

key
required
string
Either a key hash (expr123...) or a plain value (foo...). Even if the key is complex (an object or an array), you can specify it as is, for example, /keys/{"address":"tz123","nat":"123"}.

query Parameters
micheline	
MichelineFormat (string)
Default: "Json"
Format of the bigmap key and value: 0 - JSON, 1 - JSON string, 2 - Micheline, 3 - Micheline string

Responses
200
Response Schema: application/json
id	
integer <int32>
Internal Id, can be used for pagination

active	
boolean
Bigmap key status (true - active, false - removed)

hash	
string
Key hash

key	
any
Key in JSON or Micheline format, depending on the micheline query parameter.

value	
any
Value in JSON or Micheline format, depending on the micheline query parameter. Note, if the key is inactive (removed) it will contain the last non-null value.


get
/v1/bigmaps/{id}/historical_keys/{level}/{key}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"id": 0,
"active": true,
"hash": "string",
"key": null,
"value": null
}
Blocks
Get blocks count
Returns the total number of blocks.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/blocks/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get blocks
Returns a list of blocks.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filters by any of the specified fields. Example: anyof.proposer.producer=tz1....

proposer	
AccountParameter (object) Nullable
Filters blocks by block proposer. Allowed fields for .eqx mode: none.

producer	
AccountParameter (object) Nullable
Filters blocks by block producer. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters blocks by level.

timestamp	
DateTimeParameter (object) Nullable
Filters blocks by timestamp.

blockRound	
Int32Parameter (object) Nullable
Filters blocks by block round.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts blocks by specified field. Supported fields: id (default), level, payloadRound, blockRound, validations, reward, bonus, fees.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
cycle	
integer <int32>
Index of the cycle

level	
integer <int32>
Height of the block from the genesis

hash	
string
Block hash

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

proto	
integer <int32>
Protocol code, representing a number of protocol changes since genesis (mod 256, but -1 for the genesis block)

payloadRound	
integer <int32>
Round at which the block payload was proposed

blockRound	
integer <int32>
Round at which the block was produced

validations	
integer <int32>
Number of attestations (slots), included into the block

deposit	
integer <int64>
Security deposit frozen on the baker's account for producing the block (micro tez)

rewardDelegated	
integer <int64>
Portion of fixed reward, corresponding to delegated stake, paid to payload proposer's liquid balance (micro tez) (it is not frozen and can be spent immediately).

rewardStakedOwn	
integer <int64>
Portion of fixed reward, corresponding to baker's own stake, paid to payload proposer's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedEdge	
integer <int64>
Portion of fixed reward, corresponding to baker's edge from external stake, paid to payload proposer's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedShared	
integer <int64>
Portion of fixed reward, corresponding to baker's external stake, paid to payload proposer's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

bonusDelegated	
integer <int64>
Portion of bonus reward, corresponding to delegated stake, paid to block producer's liquid balance (micro tez) (it is not frozen and can be spent immediately).

bonusStakedOwn	
integer <int64>
Portion of bonus reward, corresponding to baker's own stake, paid to block producer's own staked balance (micro tez) (it is frozen and belongs to the baker).

bonusStakedEdge	
integer <int64>
Portion of bonus reward, corresponding to baker's edge from external stake, paid to block producer's own staked balance (micro tez) (it is frozen and belongs to the baker).

bonusStakedShared	
integer <int64>
Portion of fixed reward, corresponding to baker's external stake, paid to block producer's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

fees	
integer <int64>
Total fee gathered from operations, included into the block

nonceRevealed	
boolean
Status of the seed nonce revelation true - seed nonce revealed false - there's no seed_nonce_hash in the block or seed nonce revelation has missed

proposer	
Alias (object) Nullable
Baker who proposed the block payload

producer	
Alias (object) Nullable
Baker who produced the block

software	
SoftwareAlias (object) Nullable
Information about baker's software

lbToggle	
boolean Nullable
Liquidity baking toggle (true if enabled, false if disabled, or null if the baker says 'pass')

lbToggleEma	
integer <int32>
Liquidity baking escape EMA value with precision of 1000000 for integer computation

aiToggle	
boolean Nullable
Adaptive issuance toggle (true if enabled, false if disabled, or null if the baker says 'pass')

aiToggleEma	
integer <int32>
Adaptive issuance EMA value with precision of 1000000 for integer computation

attestations	
Array of objects (AttestationOperation) Nullable
List of attestation (is operation, which specifies the head of the chain as seen by the attester of a given slot) operations, included in the block

preattestations	
Array of objects (PreattestationOperation) Nullable
List of preattestation operations, included in the block

proposals	
Array of objects (ProposalOperation) Nullable
List of proposal (is used by bakers (delegates) to submit and/or upvote proposals to amend the protocol) operations, included in the block

ballots	
Array of objects (BallotOperation) Nullable
List of ballot (is used to vote for a proposal in a given voting cycle) operations, included in the block

activations	
Array of objects (ActivationOperation) Nullable
List of activation (is used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundationâ€™s fundraiser) operations, included in the block

dalEntrapmentEvidenceOps	
Array of objects (DalEntrapmentEvidenceOperation) Nullable
List of dal entrapment evidence operations, included in the block

doubleBaking	
Array of objects (DoubleBakingOperation) Nullable
List of double baking evidence (is used by bakers to provide evidence of double baking (baking two different blocks at the same height) by a baker) operations, included in the block

doubleConsensus	
Array of objects (DoubleConsensusOperation) Nullable
List of double consensus evidence (is used by bakers to provide evidence of double (pre)attestation ((pre)attestation of two different blocks at the same block height) by a baker) operations, included in the block

nonceRevelations	
Array of objects (NonceRevelationOperation) Nullable
List of nonce revelation (used by the blockchain to create randomness) operations, included in the block

vdfRevelations	
Array of objects (VdfRevelationOperation) Nullable
List of vdf revelation (used by the blockchain to create randomness) operations, included in the block

delegations	
Array of objects (DelegationOperation) Nullable
List of delegation (is used to delegate funds to a delegate (an implicit account registered as a baker)) operations, included in the block

originations	
Array of objects (OriginationOperation) Nullable
List of origination (deployment / contract creation ) operations, included in the block

transactions	
Array of objects (TransactionOperation) Nullable
List of transaction (is a standard operation used to transfer tezos tokens to an account) operations, included in the block

reveals	
Array of objects (RevealOperation) Nullable
List of reveal (is used to reveal the public key associated with an account) operations, included in the block

registerConstants	
Array of objects (RegisterConstantOperation) Nullable
List of register global constant operations, included in the block

setDepositsLimits	
Array of objects (SetDepositsLimitOperation) Nullable
List of set deposits limit operations, included in the block

transferTicketOps	
Array of objects (TransferTicketOperation) Nullable
List of transfer ticket operations, included in the block

txRollupCommitOps	
Array of objects (TxRollupCommitOperation) Nullable
List of tx rollup commit operations, included in the block

txRollupDispatchTicketsOps	
Array of objects (TxRollupDispatchTicketsOperation) Nullable
List of tx rollup dispatch tickets operations, included in the block

txRollupFinalizeCommitmentOps	
Array of objects (TxRollupFinalizeCommitmentOperation) Nullable
List of tx rollup finalize commitment operations, included in the block

txRollupOriginationOps	
Array of objects (TxRollupOriginationOperation) Nullable
List of tx rollup origination operations, included in the block

txRollupRejectionOps	
Array of objects (TxRollupRejectionOperation) Nullable
List of tx rollup rejection operations, included in the block

txRollupRemoveCommitmentOps	
Array of objects (TxRollupRemoveCommitmentOperation) Nullable
List of tx rollup remove commitment operations, included in the block

txRollupReturnBondOps	
Array of objects (TxRollupReturnBondOperation) Nullable
List of tx rollup return bond operations, included in the block

txRollupSubmitBatchOps	
Array of objects (TxRollupSubmitBatchOperation) Nullable
List of tx rollup submit batch operations, included in the block

increasePaidStorageOps	
Array of objects (IncreasePaidStorageOperation) Nullable
List of increase paid storage operations, included in the block

updateSecondaryKeyOps	
Array of objects (UpdateSecondaryKeyOperation) Nullable
List of update secondary key operations, included in the block

drainDelegateOps	
Array of objects (DrainDelegateOperation) Nullable
List of drain delegate operations, included in the block

srAddMessagesOps	
Array of objects (SmartRollupAddMessagesOperation) Nullable
List of smart rollup add messages operations, included in the block

srCementOps	
Array of objects (SmartRollupCementOperation) Nullable
List of smart rollup cement operations, included in the block

srExecuteOps	
Array of objects (SmartRollupExecuteOperation) Nullable
List of smart rollup execute operations, included in the block

srOriginateOps	
Array of objects (SmartRollupOriginateOperation) Nullable
List of smart rollup originate operations, included in the block

srPublishOps	
Array of objects (SmartRollupPublishOperation) Nullable
List of smart rollup publish operations, included in the block

srRecoverBondOps	
Array of objects (SmartRollupRecoverBondOperation) Nullable
List of smart rollup recover bond operations, included in the block

srRefuteOps	
Array of objects (SmartRollupRefuteOperation) Nullable
List of smart rollup refute operations, included in the block

stakingOps	
Array of objects (StakingOperation) Nullable
List of staking operations, included in the block

setDelegateParametersOps	
Array of objects (SetDelegateParametersOperation) Nullable
List of set delegate parameters operations, included in the block

dalPublishCommitmentOps	
Array of objects (DalPublishCommitmentOperation) Nullable
List of DAL publish commitment operations, included in the block

migrations	
Array of objects (MigrationOperation) Nullable
List of migration operations, implicitly applied at the end of the block

revelationPenalties	
Array of objects (RevelationPenaltyOperation) Nullable
List of revelation penalty operations, implicitly applied at the end of the block

attestationRewards	
Array of objects (AttestationRewardOperation) Nullable
List of attestation rewards, implicitly applied at the end of the block

dalAttestationRewards	
Array of objects (DalAttestationRewardOperation) Nullable
List of dal attestation rewards, implicitly applied at the end of the block

autostakingOps	
Array of objects (AutostakingOperation) Nullable
List of autostaking operations, implicitly applied at the end of the block

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of block

updateConsensusKeyOps	
Array of objects (UpdateSecondaryKeyOperation) Nullable
DEPRECATED

endorsements	
Array of objects (AttestationOperation) Nullable
DEPRECATED

preendorsements	
Array of objects (PreattestationOperation) Nullable
DEPRECATED

doubleEndorsing	
Array of objects (DoubleConsensusOperation) Nullable
DEPRECATED

doublePreendorsing	
Array of objects (DoubleConsensusOperation) Nullable
DEPRECATED

endorsingRewards	
Array of objects (AttestationRewardOperation) Nullable
DEPRECATED


get
/v1/blocks
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"cycle": 0,
"level": 0,
"hash": "string",
"timestamp": "2019-08-24T14:15:22Z",
"proto": 0,
"payloadRound": 0,
"blockRound": 0,
"validations": 0,
"deposit": 0,
"rewardDelegated": 0,
"rewardStakedOwn": 0,
"rewardStakedEdge": 0,
"rewardStakedShared": 0,
"bonusDelegated": 0,
"bonusStakedOwn": 0,
"bonusStakedEdge": 0,
"bonusStakedShared": 0,
"fees": 0,
"nonceRevealed": true,
"proposer": {},
"producer": {},
"software": {},
"lbToggle": true,
"lbToggleEma": 0,
"aiToggle": true,
"aiToggleEma": 0,
"attestations": [],
"preattestations": [],
"proposals": [],
"ballots": [],
"activations": [],
"dalEntrapmentEvidenceOps": [],
"doubleBaking": [],
"doubleConsensus": [],
"nonceRevelations": [],
"vdfRevelations": [],
"delegations": [],
"originations": [],
"transactions": [],
"reveals": [],
"registerConstants": [],
"setDepositsLimits": [],
"transferTicketOps": [],
"txRollupCommitOps": [],
"txRollupDispatchTicketsOps": [],
"txRollupFinalizeCommitmentOps": [],
"txRollupOriginationOps": [],
"txRollupRejectionOps": [],
"txRollupRemoveCommitmentOps": [],
"txRollupReturnBondOps": [],
"txRollupSubmitBatchOps": [],
"increasePaidStorageOps": [],
"updateSecondaryKeyOps": [],
"drainDelegateOps": [],
"srAddMessagesOps": [],
"srCementOps": [],
"srExecuteOps": [],
"srOriginateOps": [],
"srPublishOps": [],
"srRecoverBondOps": [],
"srRefuteOps": [],
"stakingOps": [],
"setDelegateParametersOps": [],
"dalPublishCommitmentOps": [],
"migrations": [],
"revelationPenalties": [],
"attestationRewards": [],
"dalAttestationRewards": [],
"autostakingOps": [],
"quote": {},
"updateConsensusKeyOps": [],
"endorsements": [],
"preendorsements": [],
"doubleEndorsing": [],
"doublePreendorsing": [],
"endorsingRewards": []
}
]
Get block by hash
Returns a block with the specified hash.

path Parameters
hash
required
string
Block hash

query Parameters
operations	
boolean
Default: false
Flag indicating whether to include block operations into returned object or not

micheline	
MichelineFormat (string)
Default: "Json"
Format of the parameters, storage and diffs: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
cycle	
integer <int32>
Index of the cycle

level	
integer <int32>
Height of the block from the genesis

hash	
string
Block hash

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

proto	
integer <int32>
Protocol code, representing a number of protocol changes since genesis (mod 256, but -1 for the genesis block)

payloadRound	
integer <int32>
Round at which the block payload was proposed

blockRound	
integer <int32>
Round at which the block was produced

validations	
integer <int32>
Number of attestations (slots), included into the block

deposit	
integer <int64>
Security deposit frozen on the baker's account for producing the block (micro tez)

rewardDelegated	
integer <int64>
Portion of fixed reward, corresponding to delegated stake, paid to payload proposer's liquid balance (micro tez) (it is not frozen and can be spent immediately).

rewardStakedOwn	
integer <int64>
Portion of fixed reward, corresponding to baker's own stake, paid to payload proposer's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedEdge	
integer <int64>
Portion of fixed reward, corresponding to baker's edge from external stake, paid to payload proposer's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedShared	
integer <int64>
Portion of fixed reward, corresponding to baker's external stake, paid to payload proposer's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

bonusDelegated	
integer <int64>
Portion of bonus reward, corresponding to delegated stake, paid to block producer's liquid balance (micro tez) (it is not frozen and can be spent immediately).

bonusStakedOwn	
integer <int64>
Portion of bonus reward, corresponding to baker's own stake, paid to block producer's own staked balance (micro tez) (it is frozen and belongs to the baker).

bonusStakedEdge	
integer <int64>
Portion of bonus reward, corresponding to baker's edge from external stake, paid to block producer's own staked balance (micro tez) (it is frozen and belongs to the baker).

bonusStakedShared	
integer <int64>
Portion of fixed reward, corresponding to baker's external stake, paid to block producer's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

fees	
integer <int64>
Total fee gathered from operations, included into the block

nonceRevealed	
boolean
Status of the seed nonce revelation true - seed nonce revealed false - there's no seed_nonce_hash in the block or seed nonce revelation has missed

proposer	
Alias (object) Nullable
Baker who proposed the block payload

producer	
Alias (object) Nullable
Baker who produced the block

software	
SoftwareAlias (object) Nullable
Information about baker's software

lbToggle	
boolean Nullable
Liquidity baking toggle (true if enabled, false if disabled, or null if the baker says 'pass')

lbToggleEma	
integer <int32>
Liquidity baking escape EMA value with precision of 1000000 for integer computation

aiToggle	
boolean Nullable
Adaptive issuance toggle (true if enabled, false if disabled, or null if the baker says 'pass')

aiToggleEma	
integer <int32>
Adaptive issuance EMA value with precision of 1000000 for integer computation

attestations	
Array of objects (AttestationOperation) Nullable
List of attestation (is operation, which specifies the head of the chain as seen by the attester of a given slot) operations, included in the block

preattestations	
Array of objects (PreattestationOperation) Nullable
List of preattestation operations, included in the block

proposals	
Array of objects (ProposalOperation) Nullable
List of proposal (is used by bakers (delegates) to submit and/or upvote proposals to amend the protocol) operations, included in the block

ballots	
Array of objects (BallotOperation) Nullable
List of ballot (is used to vote for a proposal in a given voting cycle) operations, included in the block

activations	
Array of objects (ActivationOperation) Nullable
List of activation (is used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundationâ€™s fundraiser) operations, included in the block

dalEntrapmentEvidenceOps	
Array of objects (DalEntrapmentEvidenceOperation) Nullable
List of dal entrapment evidence operations, included in the block

doubleBaking	
Array of objects (DoubleBakingOperation) Nullable
List of double baking evidence (is used by bakers to provide evidence of double baking (baking two different blocks at the same height) by a baker) operations, included in the block

doubleConsensus	
Array of objects (DoubleConsensusOperation) Nullable
List of double consensus evidence (is used by bakers to provide evidence of double (pre)attestation ((pre)attestation of two different blocks at the same block height) by a baker) operations, included in the block

nonceRevelations	
Array of objects (NonceRevelationOperation) Nullable
List of nonce revelation (used by the blockchain to create randomness) operations, included in the block

vdfRevelations	
Array of objects (VdfRevelationOperation) Nullable
List of vdf revelation (used by the blockchain to create randomness) operations, included in the block

delegations	
Array of objects (DelegationOperation) Nullable
List of delegation (is used to delegate funds to a delegate (an implicit account registered as a baker)) operations, included in the block

originations	
Array of objects (OriginationOperation) Nullable
List of origination (deployment / contract creation ) operations, included in the block

transactions	
Array of objects (TransactionOperation) Nullable
List of transaction (is a standard operation used to transfer tezos tokens to an account) operations, included in the block

reveals	
Array of objects (RevealOperation) Nullable
List of reveal (is used to reveal the public key associated with an account) operations, included in the block

registerConstants	
Array of objects (RegisterConstantOperation) Nullable
List of register global constant operations, included in the block

setDepositsLimits	
Array of objects (SetDepositsLimitOperation) Nullable
List of set deposits limit operations, included in the block

transferTicketOps	
Array of objects (TransferTicketOperation) Nullable
List of transfer ticket operations, included in the block

txRollupCommitOps	
Array of objects (TxRollupCommitOperation) Nullable
List of tx rollup commit operations, included in the block

txRollupDispatchTicketsOps	
Array of objects (TxRollupDispatchTicketsOperation) Nullable
List of tx rollup dispatch tickets operations, included in the block

txRollupFinalizeCommitmentOps	
Array of objects (TxRollupFinalizeCommitmentOperation) Nullable
List of tx rollup finalize commitment operations, included in the block

txRollupOriginationOps	
Array of objects (TxRollupOriginationOperation) Nullable
List of tx rollup origination operations, included in the block

txRollupRejectionOps	
Array of objects (TxRollupRejectionOperation) Nullable
List of tx rollup rejection operations, included in the block

txRollupRemoveCommitmentOps	
Array of objects (TxRollupRemoveCommitmentOperation) Nullable
List of tx rollup remove commitment operations, included in the block

txRollupReturnBondOps	
Array of objects (TxRollupReturnBondOperation) Nullable
List of tx rollup return bond operations, included in the block

txRollupSubmitBatchOps	
Array of objects (TxRollupSubmitBatchOperation) Nullable
List of tx rollup submit batch operations, included in the block

increasePaidStorageOps	
Array of objects (IncreasePaidStorageOperation) Nullable
List of increase paid storage operations, included in the block

updateSecondaryKeyOps	
Array of objects (UpdateSecondaryKeyOperation) Nullable
List of update secondary key operations, included in the block

drainDelegateOps	
Array of objects (DrainDelegateOperation) Nullable
List of drain delegate operations, included in the block

srAddMessagesOps	
Array of objects (SmartRollupAddMessagesOperation) Nullable
List of smart rollup add messages operations, included in the block

srCementOps	
Array of objects (SmartRollupCementOperation) Nullable
List of smart rollup cement operations, included in the block

srExecuteOps	
Array of objects (SmartRollupExecuteOperation) Nullable
List of smart rollup execute operations, included in the block

srOriginateOps	
Array of objects (SmartRollupOriginateOperation) Nullable
List of smart rollup originate operations, included in the block

srPublishOps	
Array of objects (SmartRollupPublishOperation) Nullable
List of smart rollup publish operations, included in the block

srRecoverBondOps	
Array of objects (SmartRollupRecoverBondOperation) Nullable
List of smart rollup recover bond operations, included in the block

srRefuteOps	
Array of objects (SmartRollupRefuteOperation) Nullable
List of smart rollup refute operations, included in the block

stakingOps	
Array of objects (StakingOperation) Nullable
List of staking operations, included in the block

setDelegateParametersOps	
Array of objects (SetDelegateParametersOperation) Nullable
List of set delegate parameters operations, included in the block

dalPublishCommitmentOps	
Array of objects (DalPublishCommitmentOperation) Nullable
List of DAL publish commitment operations, included in the block

migrations	
Array of objects (MigrationOperation) Nullable
List of migration operations, implicitly applied at the end of the block

revelationPenalties	
Array of objects (RevelationPenaltyOperation) Nullable
List of revelation penalty operations, implicitly applied at the end of the block

attestationRewards	
Array of objects (AttestationRewardOperation) Nullable
List of attestation rewards, implicitly applied at the end of the block

dalAttestationRewards	
Array of objects (DalAttestationRewardOperation) Nullable
List of dal attestation rewards, implicitly applied at the end of the block

autostakingOps	
Array of objects (AutostakingOperation) Nullable
List of autostaking operations, implicitly applied at the end of the block

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of block

updateConsensusKeyOps	
Array of objects (UpdateSecondaryKeyOperation) Nullable
DEPRECATED

endorsements	
Array of objects (AttestationOperation) Nullable
DEPRECATED

preendorsements	
Array of objects (PreattestationOperation) Nullable
DEPRECATED

doubleEndorsing	
Array of objects (DoubleConsensusOperation) Nullable
DEPRECATED

doublePreendorsing	
Array of objects (DoubleConsensusOperation) Nullable
DEPRECATED

endorsingRewards	
Array of objects (AttestationRewardOperation) Nullable
DEPRECATED


get
/v1/blocks/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"cycle": 0,
"level": 0,
"hash": "string",
"timestamp": "2019-08-24T14:15:22Z",
"proto": 0,
"payloadRound": 0,
"blockRound": 0,
"validations": 0,
"deposit": 0,
"rewardDelegated": 0,
"rewardStakedOwn": 0,
"rewardStakedEdge": 0,
"rewardStakedShared": 0,
"bonusDelegated": 0,
"bonusStakedOwn": 0,
"bonusStakedEdge": 0,
"bonusStakedShared": 0,
"fees": 0,
"nonceRevealed": true,
"proposer": {
"alias": "string",
"address": "string"
},
"producer": {
"alias": "string",
"address": "string"
},
"software": {
"version": "string",
"date": "2019-08-24T14:15:22Z"
},
"lbToggle": true,
"lbToggleEma": 0,
"aiToggle": true,
"aiToggleEma": 0,
"attestations": [
{}
],
"preattestations": [
{}
],
"proposals": [
{}
],
"ballots": [
{}
],
"activations": [
{}
],
"dalEntrapmentEvidenceOps": [
{}
],
"doubleBaking": [
{}
],
"doubleConsensus": [
{}
],
"nonceRevelations": [
{}
],
"vdfRevelations": [
{}
],
"delegations": [
{}
],
"originations": [
{}
],
"transactions": [
{}
],
"reveals": [
{}
],
"registerConstants": [
{}
],
"setDepositsLimits": [
{}
],
"transferTicketOps": [
{}
],
"txRollupCommitOps": [
{}
],
"txRollupDispatchTicketsOps": [
{}
],
"txRollupFinalizeCommitmentOps": [
{}
],
"txRollupOriginationOps": [
{}
],
"txRollupRejectionOps": [
{}
],
"txRollupRemoveCommitmentOps": [
{}
],
"txRollupReturnBondOps": [
{}
],
"txRollupSubmitBatchOps": [
{}
],
"increasePaidStorageOps": [
{}
],
"updateSecondaryKeyOps": [
{}
],
"drainDelegateOps": [
{}
],
"srAddMessagesOps": [
{}
],
"srCementOps": [
{}
],
"srExecuteOps": [
{}
],
"srOriginateOps": [
{}
],
"srPublishOps": [
{}
],
"srRecoverBondOps": [
{}
],
"srRefuteOps": [
{}
],
"stakingOps": [
{}
],
"setDelegateParametersOps": [
{}
],
"dalPublishCommitmentOps": [
{}
],
"migrations": [
{}
],
"revelationPenalties": [
{}
],
"attestationRewards": [
{}
],
"dalAttestationRewards": [
{}
],
"autostakingOps": [
{}
],
"quote": {
"btc": 0,
"eur": 0,
"usd": 0,
"cny": 0,
"jpy": 0,
"krw": 0,
"eth": 0,
"gbp": 0
},
"updateConsensusKeyOps": [
{}
],
"endorsements": [
{}
],
"preendorsements": [
{}
],
"doubleEndorsing": [
{}
],
"doublePreendorsing": [
{}
],
"endorsingRewards": [
{}
]
}
Get block by level
Returns a block at the specified level.

path Parameters
level
required
integer <int32>
Block level

query Parameters
operations	
boolean
Default: false
Flag indicating whether to include block operations into returned object or not

micheline	
MichelineFormat (string)
Default: "Json"
Format of the parameters, storage and diffs: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
cycle	
integer <int32>
Index of the cycle

level	
integer <int32>
Height of the block from the genesis

hash	
string
Block hash

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

proto	
integer <int32>
Protocol code, representing a number of protocol changes since genesis (mod 256, but -1 for the genesis block)

payloadRound	
integer <int32>
Round at which the block payload was proposed

blockRound	
integer <int32>
Round at which the block was produced

validations	
integer <int32>
Number of attestations (slots), included into the block

deposit	
integer <int64>
Security deposit frozen on the baker's account for producing the block (micro tez)

rewardDelegated	
integer <int64>
Portion of fixed reward, corresponding to delegated stake, paid to payload proposer's liquid balance (micro tez) (it is not frozen and can be spent immediately).

rewardStakedOwn	
integer <int64>
Portion of fixed reward, corresponding to baker's own stake, paid to payload proposer's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedEdge	
integer <int64>
Portion of fixed reward, corresponding to baker's edge from external stake, paid to payload proposer's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedShared	
integer <int64>
Portion of fixed reward, corresponding to baker's external stake, paid to payload proposer's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

bonusDelegated	
integer <int64>
Portion of bonus reward, corresponding to delegated stake, paid to block producer's liquid balance (micro tez) (it is not frozen and can be spent immediately).

bonusStakedOwn	
integer <int64>
Portion of bonus reward, corresponding to baker's own stake, paid to block producer's own staked balance (micro tez) (it is frozen and belongs to the baker).

bonusStakedEdge	
integer <int64>
Portion of bonus reward, corresponding to baker's edge from external stake, paid to block producer's own staked balance (micro tez) (it is frozen and belongs to the baker).

bonusStakedShared	
integer <int64>
Portion of fixed reward, corresponding to baker's external stake, paid to block producer's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

fees	
integer <int64>
Total fee gathered from operations, included into the block

nonceRevealed	
boolean
Status of the seed nonce revelation true - seed nonce revealed false - there's no seed_nonce_hash in the block or seed nonce revelation has missed

proposer	
Alias (object) Nullable
Baker who proposed the block payload

producer	
Alias (object) Nullable
Baker who produced the block

software	
SoftwareAlias (object) Nullable
Information about baker's software

lbToggle	
boolean Nullable
Liquidity baking toggle (true if enabled, false if disabled, or null if the baker says 'pass')

lbToggleEma	
integer <int32>
Liquidity baking escape EMA value with precision of 1000000 for integer computation

aiToggle	
boolean Nullable
Adaptive issuance toggle (true if enabled, false if disabled, or null if the baker says 'pass')

aiToggleEma	
integer <int32>
Adaptive issuance EMA value with precision of 1000000 for integer computation

attestations	
Array of objects (AttestationOperation) Nullable
List of attestation (is operation, which specifies the head of the chain as seen by the attester of a given slot) operations, included in the block

preattestations	
Array of objects (PreattestationOperation) Nullable
List of preattestation operations, included in the block

proposals	
Array of objects (ProposalOperation) Nullable
List of proposal (is used by bakers (delegates) to submit and/or upvote proposals to amend the protocol) operations, included in the block

ballots	
Array of objects (BallotOperation) Nullable
List of ballot (is used to vote for a proposal in a given voting cycle) operations, included in the block

activations	
Array of objects (ActivationOperation) Nullable
List of activation (is used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundationâ€™s fundraiser) operations, included in the block

dalEntrapmentEvidenceOps	
Array of objects (DalEntrapmentEvidenceOperation) Nullable
List of dal entrapment evidence operations, included in the block

doubleBaking	
Array of objects (DoubleBakingOperation) Nullable
List of double baking evidence (is used by bakers to provide evidence of double baking (baking two different blocks at the same height) by a baker) operations, included in the block

doubleConsensus	
Array of objects (DoubleConsensusOperation) Nullable
List of double consensus evidence (is used by bakers to provide evidence of double (pre)attestation ((pre)attestation of two different blocks at the same block height) by a baker) operations, included in the block

nonceRevelations	
Array of objects (NonceRevelationOperation) Nullable
List of nonce revelation (used by the blockchain to create randomness) operations, included in the block

vdfRevelations	
Array of objects (VdfRevelationOperation) Nullable
List of vdf revelation (used by the blockchain to create randomness) operations, included in the block

delegations	
Array of objects (DelegationOperation) Nullable
List of delegation (is used to delegate funds to a delegate (an implicit account registered as a baker)) operations, included in the block

originations	
Array of objects (OriginationOperation) Nullable
List of origination (deployment / contract creation ) operations, included in the block

transactions	
Array of objects (TransactionOperation) Nullable
List of transaction (is a standard operation used to transfer tezos tokens to an account) operations, included in the block

reveals	
Array of objects (RevealOperation) Nullable
List of reveal (is used to reveal the public key associated with an account) operations, included in the block

registerConstants	
Array of objects (RegisterConstantOperation) Nullable
List of register global constant operations, included in the block

setDepositsLimits	
Array of objects (SetDepositsLimitOperation) Nullable
List of set deposits limit operations, included in the block

transferTicketOps	
Array of objects (TransferTicketOperation) Nullable
List of transfer ticket operations, included in the block

txRollupCommitOps	
Array of objects (TxRollupCommitOperation) Nullable
List of tx rollup commit operations, included in the block

txRollupDispatchTicketsOps	
Array of objects (TxRollupDispatchTicketsOperation) Nullable
List of tx rollup dispatch tickets operations, included in the block

txRollupFinalizeCommitmentOps	
Array of objects (TxRollupFinalizeCommitmentOperation) Nullable
List of tx rollup finalize commitment operations, included in the block

txRollupOriginationOps	
Array of objects (TxRollupOriginationOperation) Nullable
List of tx rollup origination operations, included in the block

txRollupRejectionOps	
Array of objects (TxRollupRejectionOperation) Nullable
List of tx rollup rejection operations, included in the block

txRollupRemoveCommitmentOps	
Array of objects (TxRollupRemoveCommitmentOperation) Nullable
List of tx rollup remove commitment operations, included in the block

txRollupReturnBondOps	
Array of objects (TxRollupReturnBondOperation) Nullable
List of tx rollup return bond operations, included in the block

txRollupSubmitBatchOps	
Array of objects (TxRollupSubmitBatchOperation) Nullable
List of tx rollup submit batch operations, included in the block

increasePaidStorageOps	
Array of objects (IncreasePaidStorageOperation) Nullable
List of increase paid storage operations, included in the block

updateSecondaryKeyOps	
Array of objects (UpdateSecondaryKeyOperation) Nullable
List of update secondary key operations, included in the block

drainDelegateOps	
Array of objects (DrainDelegateOperation) Nullable
List of drain delegate operations, included in the block

srAddMessagesOps	
Array of objects (SmartRollupAddMessagesOperation) Nullable
List of smart rollup add messages operations, included in the block

srCementOps	
Array of objects (SmartRollupCementOperation) Nullable
List of smart rollup cement operations, included in the block

srExecuteOps	
Array of objects (SmartRollupExecuteOperation) Nullable
List of smart rollup execute operations, included in the block

srOriginateOps	
Array of objects (SmartRollupOriginateOperation) Nullable
List of smart rollup originate operations, included in the block

srPublishOps	
Array of objects (SmartRollupPublishOperation) Nullable
List of smart rollup publish operations, included in the block

srRecoverBondOps	
Array of objects (SmartRollupRecoverBondOperation) Nullable
List of smart rollup recover bond operations, included in the block

srRefuteOps	
Array of objects (SmartRollupRefuteOperation) Nullable
List of smart rollup refute operations, included in the block

stakingOps	
Array of objects (StakingOperation) Nullable
List of staking operations, included in the block

setDelegateParametersOps	
Array of objects (SetDelegateParametersOperation) Nullable
List of set delegate parameters operations, included in the block

dalPublishCommitmentOps	
Array of objects (DalPublishCommitmentOperation) Nullable
List of DAL publish commitment operations, included in the block

migrations	
Array of objects (MigrationOperation) Nullable
List of migration operations, implicitly applied at the end of the block

revelationPenalties	
Array of objects (RevelationPenaltyOperation) Nullable
List of revelation penalty operations, implicitly applied at the end of the block

attestationRewards	
Array of objects (AttestationRewardOperation) Nullable
List of attestation rewards, implicitly applied at the end of the block

dalAttestationRewards	
Array of objects (DalAttestationRewardOperation) Nullable
List of dal attestation rewards, implicitly applied at the end of the block

autostakingOps	
Array of objects (AutostakingOperation) Nullable
List of autostaking operations, implicitly applied at the end of the block

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of block

updateConsensusKeyOps	
Array of objects (UpdateSecondaryKeyOperation) Nullable
DEPRECATED

endorsements	
Array of objects (AttestationOperation) Nullable
DEPRECATED

preendorsements	
Array of objects (PreattestationOperation) Nullable
DEPRECATED

doubleEndorsing	
Array of objects (DoubleConsensusOperation) Nullable
DEPRECATED

doublePreendorsing	
Array of objects (DoubleConsensusOperation) Nullable
DEPRECATED

endorsingRewards	
Array of objects (AttestationRewardOperation) Nullable
DEPRECATED


get
/v1/blocks/{level}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"cycle": 0,
"level": 0,
"hash": "string",
"timestamp": "2019-08-24T14:15:22Z",
"proto": 0,
"payloadRound": 0,
"blockRound": 0,
"validations": 0,
"deposit": 0,
"rewardDelegated": 0,
"rewardStakedOwn": 0,
"rewardStakedEdge": 0,
"rewardStakedShared": 0,
"bonusDelegated": 0,
"bonusStakedOwn": 0,
"bonusStakedEdge": 0,
"bonusStakedShared": 0,
"fees": 0,
"nonceRevealed": true,
"proposer": {
"alias": "string",
"address": "string"
},
"producer": {
"alias": "string",
"address": "string"
},
"software": {
"version": "string",
"date": "2019-08-24T14:15:22Z"
},
"lbToggle": true,
"lbToggleEma": 0,
"aiToggle": true,
"aiToggleEma": 0,
"attestations": [
{}
],
"preattestations": [
{}
],
"proposals": [
{}
],
"ballots": [
{}
],
"activations": [
{}
],
"dalEntrapmentEvidenceOps": [
{}
],
"doubleBaking": [
{}
],
"doubleConsensus": [
{}
],
"nonceRevelations": [
{}
],
"vdfRevelations": [
{}
],
"delegations": [
{}
],
"originations": [
{}
],
"transactions": [
{}
],
"reveals": [
{}
],
"registerConstants": [
{}
],
"setDepositsLimits": [
{}
],
"transferTicketOps": [
{}
],
"txRollupCommitOps": [
{}
],
"txRollupDispatchTicketsOps": [
{}
],
"txRollupFinalizeCommitmentOps": [
{}
],
"txRollupOriginationOps": [
{}
],
"txRollupRejectionOps": [
{}
],
"txRollupRemoveCommitmentOps": [
{}
],
"txRollupReturnBondOps": [
{}
],
"txRollupSubmitBatchOps": [
{}
],
"increasePaidStorageOps": [
{}
],
"updateSecondaryKeyOps": [
{}
],
"drainDelegateOps": [
{}
],
"srAddMessagesOps": [
{}
],
"srCementOps": [
{}
],
"srExecuteOps": [
{}
],
"srOriginateOps": [
{}
],
"srPublishOps": [
{}
],
"srRecoverBondOps": [
{}
],
"srRefuteOps": [
{}
],
"stakingOps": [
{}
],
"setDelegateParametersOps": [
{}
],
"dalPublishCommitmentOps": [
{}
],
"migrations": [
{}
],
"revelationPenalties": [
{}
],
"attestationRewards": [
{}
],
"dalAttestationRewards": [
{}
],
"autostakingOps": [
{}
],
"quote": {
"btc": 0,
"eur": 0,
"usd": 0,
"cny": 0,
"jpy": 0,
"krw": 0,
"eth": 0,
"gbp": 0
},
"updateConsensusKeyOps": [
{}
],
"endorsements": [
{}
],
"preendorsements": [
{}
],
"doubleEndorsing": [
{}
],
"doublePreendorsing": [
{}
],
"endorsingRewards": [
{}
]
}
Get timestamp by level
Returns a timestamp of the block at the specified level.

path Parameters
level
required
integer <int32>
Block level

Responses
200
Response Schema: application/json
string <date-time>

get
/v1/blocks/{level}/timestamp
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
"2019-08-24T14:15:22Z"
Get block by timestamp
Returns a block closest to the specified timestamp.

path Parameters
timestamp
required
string <date-time>
Timestamp, e.g. 2020-01-01T00:00:00Z

query Parameters
operations	
boolean
Default: false
Flag indicating whether to include block operations into returned object or not

micheline	
MichelineFormat (string)
Default: "Json"
Format of the parameters, storage and diffs: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
cycle	
integer <int32>
Index of the cycle

level	
integer <int32>
Height of the block from the genesis

hash	
string
Block hash

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

proto	
integer <int32>
Protocol code, representing a number of protocol changes since genesis (mod 256, but -1 for the genesis block)

payloadRound	
integer <int32>
Round at which the block payload was proposed

blockRound	
integer <int32>
Round at which the block was produced

validations	
integer <int32>
Number of attestations (slots), included into the block

deposit	
integer <int64>
Security deposit frozen on the baker's account for producing the block (micro tez)

rewardDelegated	
integer <int64>
Portion of fixed reward, corresponding to delegated stake, paid to payload proposer's liquid balance (micro tez) (it is not frozen and can be spent immediately).

rewardStakedOwn	
integer <int64>
Portion of fixed reward, corresponding to baker's own stake, paid to payload proposer's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedEdge	
integer <int64>
Portion of fixed reward, corresponding to baker's edge from external stake, paid to payload proposer's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedShared	
integer <int64>
Portion of fixed reward, corresponding to baker's external stake, paid to payload proposer's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

bonusDelegated	
integer <int64>
Portion of bonus reward, corresponding to delegated stake, paid to block producer's liquid balance (micro tez) (it is not frozen and can be spent immediately).

bonusStakedOwn	
integer <int64>
Portion of bonus reward, corresponding to baker's own stake, paid to block producer's own staked balance (micro tez) (it is frozen and belongs to the baker).

bonusStakedEdge	
integer <int64>
Portion of bonus reward, corresponding to baker's edge from external stake, paid to block producer's own staked balance (micro tez) (it is frozen and belongs to the baker).

bonusStakedShared	
integer <int64>
Portion of fixed reward, corresponding to baker's external stake, paid to block producer's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

fees	
integer <int64>
Total fee gathered from operations, included into the block

nonceRevealed	
boolean
Status of the seed nonce revelation true - seed nonce revealed false - there's no seed_nonce_hash in the block or seed nonce revelation has missed

proposer	
Alias (object) Nullable
Baker who proposed the block payload

producer	
Alias (object) Nullable
Baker who produced the block

software	
SoftwareAlias (object) Nullable
Information about baker's software

lbToggle	
boolean Nullable
Liquidity baking toggle (true if enabled, false if disabled, or null if the baker says 'pass')

lbToggleEma	
integer <int32>
Liquidity baking escape EMA value with precision of 1000000 for integer computation

aiToggle	
boolean Nullable
Adaptive issuance toggle (true if enabled, false if disabled, or null if the baker says 'pass')

aiToggleEma	
integer <int32>
Adaptive issuance EMA value with precision of 1000000 for integer computation

attestations	
Array of objects (AttestationOperation) Nullable
List of attestation (is operation, which specifies the head of the chain as seen by the attester of a given slot) operations, included in the block

preattestations	
Array of objects (PreattestationOperation) Nullable
List of preattestation operations, included in the block

proposals	
Array of objects (ProposalOperation) Nullable
List of proposal (is used by bakers (delegates) to submit and/or upvote proposals to amend the protocol) operations, included in the block

ballots	
Array of objects (BallotOperation) Nullable
List of ballot (is used to vote for a proposal in a given voting cycle) operations, included in the block

activations	
Array of objects (ActivationOperation) Nullable
List of activation (is used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundationâ€™s fundraiser) operations, included in the block

dalEntrapmentEvidenceOps	
Array of objects (DalEntrapmentEvidenceOperation) Nullable
List of dal entrapment evidence operations, included in the block

doubleBaking	
Array of objects (DoubleBakingOperation) Nullable
List of double baking evidence (is used by bakers to provide evidence of double baking (baking two different blocks at the same height) by a baker) operations, included in the block

doubleConsensus	
Array of objects (DoubleConsensusOperation) Nullable
List of double consensus evidence (is used by bakers to provide evidence of double (pre)attestation ((pre)attestation of two different blocks at the same block height) by a baker) operations, included in the block

nonceRevelations	
Array of objects (NonceRevelationOperation) Nullable
List of nonce revelation (used by the blockchain to create randomness) operations, included in the block

vdfRevelations	
Array of objects (VdfRevelationOperation) Nullable
List of vdf revelation (used by the blockchain to create randomness) operations, included in the block

delegations	
Array of objects (DelegationOperation) Nullable
List of delegation (is used to delegate funds to a delegate (an implicit account registered as a baker)) operations, included in the block

originations	
Array of objects (OriginationOperation) Nullable
List of origination (deployment / contract creation ) operations, included in the block

transactions	
Array of objects (TransactionOperation) Nullable
List of transaction (is a standard operation used to transfer tezos tokens to an account) operations, included in the block

reveals	
Array of objects (RevealOperation) Nullable
List of reveal (is used to reveal the public key associated with an account) operations, included in the block

registerConstants	
Array of objects (RegisterConstantOperation) Nullable
List of register global constant operations, included in the block

setDepositsLimits	
Array of objects (SetDepositsLimitOperation) Nullable
List of set deposits limit operations, included in the block

transferTicketOps	
Array of objects (TransferTicketOperation) Nullable
List of transfer ticket operations, included in the block

txRollupCommitOps	
Array of objects (TxRollupCommitOperation) Nullable
List of tx rollup commit operations, included in the block

txRollupDispatchTicketsOps	
Array of objects (TxRollupDispatchTicketsOperation) Nullable
List of tx rollup dispatch tickets operations, included in the block

txRollupFinalizeCommitmentOps	
Array of objects (TxRollupFinalizeCommitmentOperation) Nullable
List of tx rollup finalize commitment operations, included in the block

txRollupOriginationOps	
Array of objects (TxRollupOriginationOperation) Nullable
List of tx rollup origination operations, included in the block

txRollupRejectionOps	
Array of objects (TxRollupRejectionOperation) Nullable
List of tx rollup rejection operations, included in the block

txRollupRemoveCommitmentOps	
Array of objects (TxRollupRemoveCommitmentOperation) Nullable
List of tx rollup remove commitment operations, included in the block

txRollupReturnBondOps	
Array of objects (TxRollupReturnBondOperation) Nullable
List of tx rollup return bond operations, included in the block

txRollupSubmitBatchOps	
Array of objects (TxRollupSubmitBatchOperation) Nullable
List of tx rollup submit batch operations, included in the block

increasePaidStorageOps	
Array of objects (IncreasePaidStorageOperation) Nullable
List of increase paid storage operations, included in the block

updateSecondaryKeyOps	
Array of objects (UpdateSecondaryKeyOperation) Nullable
List of update secondary key operations, included in the block

drainDelegateOps	
Array of objects (DrainDelegateOperation) Nullable
List of drain delegate operations, included in the block

srAddMessagesOps	
Array of objects (SmartRollupAddMessagesOperation) Nullable
List of smart rollup add messages operations, included in the block

srCementOps	
Array of objects (SmartRollupCementOperation) Nullable
List of smart rollup cement operations, included in the block

srExecuteOps	
Array of objects (SmartRollupExecuteOperation) Nullable
List of smart rollup execute operations, included in the block

srOriginateOps	
Array of objects (SmartRollupOriginateOperation) Nullable
List of smart rollup originate operations, included in the block

srPublishOps	
Array of objects (SmartRollupPublishOperation) Nullable
List of smart rollup publish operations, included in the block

srRecoverBondOps	
Array of objects (SmartRollupRecoverBondOperation) Nullable
List of smart rollup recover bond operations, included in the block

srRefuteOps	
Array of objects (SmartRollupRefuteOperation) Nullable
List of smart rollup refute operations, included in the block

stakingOps	
Array of objects (StakingOperation) Nullable
List of staking operations, included in the block

setDelegateParametersOps	
Array of objects (SetDelegateParametersOperation) Nullable
List of set delegate parameters operations, included in the block

dalPublishCommitmentOps	
Array of objects (DalPublishCommitmentOperation) Nullable
List of DAL publish commitment operations, included in the block

migrations	
Array of objects (MigrationOperation) Nullable
List of migration operations, implicitly applied at the end of the block

revelationPenalties	
Array of objects (RevelationPenaltyOperation) Nullable
List of revelation penalty operations, implicitly applied at the end of the block

attestationRewards	
Array of objects (AttestationRewardOperation) Nullable
List of attestation rewards, implicitly applied at the end of the block

dalAttestationRewards	
Array of objects (DalAttestationRewardOperation) Nullable
List of dal attestation rewards, implicitly applied at the end of the block

autostakingOps	
Array of objects (AutostakingOperation) Nullable
List of autostaking operations, implicitly applied at the end of the block

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of block

updateConsensusKeyOps	
Array of objects (UpdateSecondaryKeyOperation) Nullable
DEPRECATED

endorsements	
Array of objects (AttestationOperation) Nullable
DEPRECATED

preendorsements	
Array of objects (PreattestationOperation) Nullable
DEPRECATED

doubleEndorsing	
Array of objects (DoubleConsensusOperation) Nullable
DEPRECATED

doublePreendorsing	
Array of objects (DoubleConsensusOperation) Nullable
DEPRECATED

endorsingRewards	
Array of objects (AttestationRewardOperation) Nullable
DEPRECATED


get
/v1/blocks/{timestamp}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"cycle": 0,
"level": 0,
"hash": "string",
"timestamp": "2019-08-24T14:15:22Z",
"proto": 0,
"payloadRound": 0,
"blockRound": 0,
"validations": 0,
"deposit": 0,
"rewardDelegated": 0,
"rewardStakedOwn": 0,
"rewardStakedEdge": 0,
"rewardStakedShared": 0,
"bonusDelegated": 0,
"bonusStakedOwn": 0,
"bonusStakedEdge": 0,
"bonusStakedShared": 0,
"fees": 0,
"nonceRevealed": true,
"proposer": {
"alias": "string",
"address": "string"
},
"producer": {
"alias": "string",
"address": "string"
},
"software": {
"version": "string",
"date": "2019-08-24T14:15:22Z"
},
"lbToggle": true,
"lbToggleEma": 0,
"aiToggle": true,
"aiToggleEma": 0,
"attestations": [
{}
],
"preattestations": [
{}
],
"proposals": [
{}
],
"ballots": [
{}
],
"activations": [
{}
],
"dalEntrapmentEvidenceOps": [
{}
],
"doubleBaking": [
{}
],
"doubleConsensus": [
{}
],
"nonceRevelations": [
{}
],
"vdfRevelations": [
{}
],
"delegations": [
{}
],
"originations": [
{}
],
"transactions": [
{}
],
"reveals": [
{}
],
"registerConstants": [
{}
],
"setDepositsLimits": [
{}
],
"transferTicketOps": [
{}
],
"txRollupCommitOps": [
{}
],
"txRollupDispatchTicketsOps": [
{}
],
"txRollupFinalizeCommitmentOps": [
{}
],
"txRollupOriginationOps": [
{}
],
"txRollupRejectionOps": [
{}
],
"txRollupRemoveCommitmentOps": [
{}
],
"txRollupReturnBondOps": [
{}
],
"txRollupSubmitBatchOps": [
{}
],
"increasePaidStorageOps": [
{}
],
"updateSecondaryKeyOps": [
{}
],
"drainDelegateOps": [
{}
],
"srAddMessagesOps": [
{}
],
"srCementOps": [
{}
],
"srExecuteOps": [
{}
],
"srOriginateOps": [
{}
],
"srPublishOps": [
{}
],
"srRecoverBondOps": [
{}
],
"srRefuteOps": [
{}
],
"stakingOps": [
{}
],
"setDelegateParametersOps": [
{}
],
"dalPublishCommitmentOps": [
{}
],
"migrations": [
{}
],
"revelationPenalties": [
{}
],
"attestationRewards": [
{}
],
"dalAttestationRewards": [
{}
],
"autostakingOps": [
{}
],
"quote": {
"btc": 0,
"eur": 0,
"usd": 0,
"cny": 0,
"jpy": 0,
"krw": 0,
"eth": 0,
"gbp": 0
},
"updateConsensusKeyOps": [
{}
],
"endorsements": [
{}
],
"preendorsements": [
{}
],
"doubleEndorsing": [
{}
],
"doublePreendorsing": [
{}
],
"endorsingRewards": [
{}
]
}
Get level by timestamp
Returns a level of the block closest to the specified timestamp.

path Parameters
timestamp
required
string <date-time>
Timestamp, e.g. 2020-01-01T00:00:00Z

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/blocks/{timestamp}/level
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Commitments
Get commitment by blinded address
Returns a commitment with the specified blinded address.

path Parameters
address
required
string
Blinded address (starting with btz)

Responses
200
Response Schema: application/json
address	
string
Blinded address of the account

balance	
integer <int64>
Account balance to be activated

activated	
boolean
Flag showing whether the account has been activated or not.

activationLevel	
integer <int32> Nullable
Level of the block at which the account has been activated. null if the account is not activated yet.

activationTime	
string <date-time> Nullable
Datetime of the block at which the account has been activated (ISO 8601, e.g. 2020-02-20T02:40:57Z). null if the account is not activated yet.

activatedAccount	
Alias (object) Nullable
Info about activated account. null if the account is not activated yet.


get
/v1/commitments/{address}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"address": "string",
"balance": 0,
"activated": true,
"activationLevel": 0,
"activationTime": "2019-08-24T14:15:22Z",
"activatedAccount": {
"alias": "string",
"address": "string"
}
}
Get commitments
Returns a list of commitments.

query Parameters
activated	
boolean Nullable
Filters commitments by activation status

activationLevel	
Int32NullParameter (object) Nullable
Filters commitments by activation level

balance	
Int64Parameter (object) Nullable
Filters commitments by activated balance

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts delegators by specified field. Supported fields: id (default), balance, activationLevel.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

Responses
200
Response Schema: application/json
Array ()
address	
string
Blinded address of the account

balance	
integer <int64>
Account balance to be activated

activated	
boolean
Flag showing whether the account has been activated or not.

activationLevel	
integer <int32> Nullable
Level of the block at which the account has been activated. null if the account is not activated yet.

activationTime	
string <date-time> Nullable
Datetime of the block at which the account has been activated (ISO 8601, e.g. 2020-02-20T02:40:57Z). null if the account is not activated yet.

activatedAccount	
Alias (object) Nullable
Info about activated account. null if the account is not activated yet.


get
/v1/commitments
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"address": "string",
"balance": 0,
"activated": true,
"activationLevel": 0,
"activationTime": "2019-08-24T14:15:22Z",
"activatedAccount": {}
}
]
Get commitments count
Returns a number of commitments.

query Parameters
activated	
boolean Nullable
Filters commitments by activation status

balance	
Int64Parameter (object) Nullable
Filters commitments by activated balance

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/commitments/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Constants
Get global constants
Returns a list of global constants.

query Parameters
address	
ExpressionParameter (object) Nullable
Filters constants by global address (starts with expr..).

creationLevel	
Int32Parameter (object) Nullable
Filters constants by creation level.

creationTime	
TimestampParameter (object) Nullable
Filters constants by creation time.

creator	
AccountParameter (object) Nullable
Filters constants by creator.

refs	
Int32Parameter (object) Nullable
Filters constants by number of refs.

size	
Int32Parameter (object) Nullable
Filters constants by size in bytes.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts delegators by specified field. Supported fields: id (default), creationLevel, size, refs.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

format	
integer <int32> [ 0 .. 2 ]
Default: 0
Constant value format (0 - micheline, 1 - michelson, 2 - bytes (base64))

Responses
200
Response Schema: application/json
Array ()
address	
string
Global address (expression hash)

value	
any
Constant value (either micheline, michelson or bytes, depending on the format parameter)

size	
integer <int32>
Constant size in bytes

refs	
integer <int32>
Number of contracts referencing this constant

creator	
Alias (object)
Account registered this constant

creationLevel	
integer <int32>
Level of the first block baked with this software

creationTime	
string <date-time>
Datetime of the first block baked with this software

extras	
any Nullable
Off-chain extras


get
/v1/constants
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"address": "string",
"value": null,
"size": 0,
"refs": 0,
"creator": {},
"creationLevel": 0,
"creationTime": "2019-08-24T14:15:22Z",
"extras": null
}
]
Get global constant by address
Returns global constant with specified address (expression hash).

path Parameters
address
required
string
Global address (starts with expr..)

query Parameters
format	
integer <int32> [ 0 .. 2 ]
Default: 0
Constant value format (0 - micheline, 1 - michelson, 2 - bytes (base64))

Responses
200
Response Schema: application/json
address	
string
Global address (expression hash)

value	
any
Constant value (either micheline, michelson or bytes, depending on the format parameter)

size	
integer <int32>
Constant size in bytes

refs	
integer <int32>
Number of contracts referencing this constant

creator	
Alias (object)
Account registered this constant

creationLevel	
integer <int32>
Level of the first block baked with this software

creationTime	
string <date-time>
Datetime of the first block baked with this software

extras	
any Nullable
Off-chain extras


get
/v1/constants/{address}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"address": "string",
"value": null,
"size": 0,
"refs": 0,
"creator": {
"alias": "string",
"address": "string"
},
"creationLevel": 0,
"creationTime": "2019-08-24T14:15:22Z",
"extras": null
}
Get global constants count
Returns a number of global constants.

query Parameters
refs	
Int32Parameter (object) Nullable
Filters constants by number of refs.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/constants/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Contracts
Get contracts
Returns a list of contract accounts.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

address	
AddressParameter (object) Nullable
Filter by address.
Click on the parameter to expand more details.

kind	
ContractKindParameter (object) Nullable
Filter by kind (delegator_contract, smart_contract, or asset).
Click on the parameter to expand more details.

tzips	
ContractTagsParameter (object) Nullable
Filter by tzips (fa1, fa12, or fa2).
Click on the parameter to expand more details.

balance	
Int64Parameter (object) Nullable
Filter by balance.
Click on the parameter to expand more details.

creator	
AccountParameter (object) Nullable
Filter by creator.
Click on the parameter to expand more details.

delegate	
AccountParameter (object) Nullable
Filter by delegate.
Click on the parameter to expand more details.

firstActivity	
Int32Parameter (object) Nullable
Filter by level of the block where the contract was first seen.
Click on the parameter to expand more details.

firstActivityTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the contract was first seen.
Click on the parameter to expand more details.

lastActivity	
Int32Parameter (object) Nullable
Filter by level of the block where the contract was last seen.
Click on the parameter to expand more details.

lastActivityTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the contract was last seen.
Click on the parameter to expand more details.

typeHash	
Int32Parameter (object) Nullable
Filter by 32-bit hash of contract parameter and storage types (helpful for searching similar contracts).
Click on the parameter to expand more details.

codeHash	
Int32Parameter (object) Nullable
Filter by 32-bit hash of contract code (helpful for searching same contracts).
Click on the parameter to expand more details.

tokensCount	
Int32Parameter (object) Nullable
Filter by number of different tokens minted within the contract.
Click on the parameter to expand more details.

ticketsCount	
Int32Parameter (object) Nullable
Filter by number of different tickets minted within the contract.
Click on the parameter to expand more details.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

includeStorage	
boolean
Default: false
Specifies whether to include contract storage into response.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal TzKT id.
[sortable]

type	
string
Type of the account, contract - smart contract programmable account.

address	
string
Public key hash of the contract

kind	
string
Kind of the contract (delegator_contract or smart_contract), where delegator_contract - manager.tz smart contract for delegation purpose only.

tzips	
Array of strings Nullable
List of implemented standards (TZIPs).

alias	
string Nullable
Name of the project behind the contract or contract description.

balance	
integer <int64>
Contract balance (micro tez).
[sortable]

creator	
Alias (object)
Information about the account, which has deployed the contract to the blockchain.
Click on the field to expand more details.

delegate	
DelegateInfo (object) Nullable
Information about the current delegate of the contract. null if it's not delegated.
Click on the field to expand more details.

delegationLevel	
integer <int32> Nullable
Block height of latest delegation. null if it's not delegated.

delegationTime	
string <date-time> Nullable
Block datetime of latest delegation (ISO 8601, e.g. 2020-02-20T02:40:57Z). null if it's not delegated.

numContracts	
integer <int32>
Number of contracts, created (originated) and/or managed by the contract.

tokensCount	
integer <int32>
Number of tokens minted in the contract.

activeTokensCount	
integer <int32>
Number of account tokens with non-zero balances.

tokenBalancesCount	
integer <int32>
Number of tokens the account ever had.

tokenTransfersCount	
integer <int32>
Number of token transfers from/to the account.

ticketsCount	
integer <int32>
Number of tickets minted in the contract.

activeTicketsCount	
integer <int32>
Number of tickets the account owns.

ticketBalancesCount	
integer <int32>
Number of tickets the account ever owned.

ticketTransfersCount	
integer <int32>
Number of ticket transfers from/to the account.

numDelegations	
integer <int32>
Number of delegation operations of the contract.

numOriginations	
integer <int32>
Number of origination (deployment / contract creation) operations, related the contract.

numTransactions	
integer <int32>
Number of transaction (transfer) operations, related to the contract.
[sortable]

numReveals	
integer <int32>
Number of reveal (is used to reveal the public key associated with an account) operations of the contract.

numMigrations	
integer <int32>
Number of migration (result of the context (database) migration during a protocol update) operations. related to the contract (synthetic type).

transferTicketCount	
integer <int32>
Number of transfer ticket operations related to the contract.

increasePaidStorageCount	
integer <int32>
Number of increase_paid_storage operations related to the contract.

eventsCount	
integer <int32>
Number of events produced by the contract.

firstActivity	
integer <int32>
Block height of the contract creation.
[sortable]

firstActivityTime	
string <date-time>
Block datetime of the contract creation (ISO 8601, e.g. 2020-02-20T02:40:57Z).

lastActivity	
integer <int32>
Height of the block in which the account state was changed last time.
[sortable]

lastActivityTime	
string <date-time>
Datetime of the block in which the account state was changed last time (ISO 8601, e.g. 2020-02-20T02:40:57Z).

typeHash	
integer <int32>
32-bit hash of the contract parameter and storage types. This field can be used for searching similar contracts (which have the same interface).

codeHash	
integer <int32>
32-bit hash of the contract code. This field can be used for searching same contracts (which have the same script).

metadata	
any Nullable
TZIP-16 metadata.

extras	
any Nullable
Off-chain extras.

storage	
any Nullable
Contract storage value. Omitted by default. Use ?includeStorage=true to include it into response.


get
/v1/contracts
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"type": "string",
"address": "string",
"kind": "string",
"tzips": [],
"alias": "string",
"balance": 0,
"creator": {},
"delegate": {},
"delegationLevel": 0,
"delegationTime": "2019-08-24T14:15:22Z",
"numContracts": 0,
"tokensCount": 0,
"activeTokensCount": 0,
"tokenBalancesCount": 0,
"tokenTransfersCount": 0,
"ticketsCount": 0,
"activeTicketsCount": 0,
"ticketBalancesCount": 0,
"ticketTransfersCount": 0,
"numDelegations": 0,
"numOriginations": 0,
"numTransactions": 0,
"numReveals": 0,
"numMigrations": 0,
"transferTicketCount": 0,
"increasePaidStorageCount": 0,
"eventsCount": 0,
"firstActivity": 0,
"firstActivityTime": "2019-08-24T14:15:22Z",
"lastActivity": 0,
"lastActivityTime": "2019-08-24T14:15:22Z",
"typeHash": 0,
"codeHash": 0,
"metadata": null,
"extras": null,
"storage": null
}
]
Get contracts count
Returns a number of contract accounts.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

address	
AddressParameter (object) Nullable
Filter by address.
Click on the parameter to expand more details.

kind	
ContractKindParameter (object) Nullable
Filter by kind (delegator_contract, smart_contract, or asset).
Click on the parameter to expand more details.

tzips	
ContractTagsParameter (object) Nullable
Filter by tzips (fa1, fa12, or fa2).
Click on the parameter to expand more details.

balance	
Int64Parameter (object) Nullable
Filter by balance.
Click on the parameter to expand more details.

creator	
AccountParameter (object) Nullable
Filter by creator.
Click on the parameter to expand more details.

delegate	
AccountParameter (object) Nullable
Filter by delegate.
Click on the parameter to expand more details.

firstActivity	
Int32Parameter (object) Nullable
Filter by level of the block where the contract was first seen.
Click on the parameter to expand more details.

firstActivityTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the contract was first seen.
Click on the parameter to expand more details.

lastActivity	
Int32Parameter (object) Nullable
Filter by level of the block where the contract was last seen.
Click on the parameter to expand more details.

lastActivityTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the contract was last seen.
Click on the parameter to expand more details.

typeHash	
Int32Parameter (object) Nullable
Filter by 32-bit hash of contract parameter and storage types (helpful for searching similar contracts).
Click on the parameter to expand more details.

codeHash	
Int32Parameter (object) Nullable
Filter by 32-bit hash of contract code (helpful for searching same contracts).
Click on the parameter to expand more details.

tokensCount	
Int32Parameter (object) Nullable
Filter by number of different tokens minted within the contract.
Click on the parameter to expand more details.

ticketsCount	
Int32Parameter (object) Nullable
Filter by number of different tickets minted within the contract.
Click on the parameter to expand more details.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/contracts/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get contract by address
Returns a contract account with the specified address.

path Parameters
address
required
string
Contract address (starting with KT)

Responses
200
Response Schema: application/json
id	
integer <int32>
Internal TzKT id.
[sortable]

type	
string
Type of the account, contract - smart contract programmable account.

address	
string
Public key hash of the contract

kind	
string
Kind of the contract (delegator_contract or smart_contract), where delegator_contract - manager.tz smart contract for delegation purpose only.

tzips	
Array of strings Nullable
List of implemented standards (TZIPs).

alias	
string Nullable
Name of the project behind the contract or contract description.

balance	
integer <int64>
Contract balance (micro tez).
[sortable]

creator	
Alias (object)
Information about the account, which has deployed the contract to the blockchain.
Click on the field to expand more details.

delegate	
DelegateInfo (object) Nullable
Information about the current delegate of the contract. null if it's not delegated.
Click on the field to expand more details.

delegationLevel	
integer <int32> Nullable
Block height of latest delegation. null if it's not delegated.

delegationTime	
string <date-time> Nullable
Block datetime of latest delegation (ISO 8601, e.g. 2020-02-20T02:40:57Z). null if it's not delegated.

numContracts	
integer <int32>
Number of contracts, created (originated) and/or managed by the contract.

tokensCount	
integer <int32>
Number of tokens minted in the contract.

activeTokensCount	
integer <int32>
Number of account tokens with non-zero balances.

tokenBalancesCount	
integer <int32>
Number of tokens the account ever had.

tokenTransfersCount	
integer <int32>
Number of token transfers from/to the account.

ticketsCount	
integer <int32>
Number of tickets minted in the contract.

activeTicketsCount	
integer <int32>
Number of tickets the account owns.

ticketBalancesCount	
integer <int32>
Number of tickets the account ever owned.

ticketTransfersCount	
integer <int32>
Number of ticket transfers from/to the account.

numDelegations	
integer <int32>
Number of delegation operations of the contract.

numOriginations	
integer <int32>
Number of origination (deployment / contract creation) operations, related the contract.

numTransactions	
integer <int32>
Number of transaction (transfer) operations, related to the contract.
[sortable]

numReveals	
integer <int32>
Number of reveal (is used to reveal the public key associated with an account) operations of the contract.

numMigrations	
integer <int32>
Number of migration (result of the context (database) migration during a protocol update) operations. related to the contract (synthetic type).

transferTicketCount	
integer <int32>
Number of transfer ticket operations related to the contract.

increasePaidStorageCount	
integer <int32>
Number of increase_paid_storage operations related to the contract.

eventsCount	
integer <int32>
Number of events produced by the contract.

firstActivity	
integer <int32>
Block height of the contract creation.
[sortable]

firstActivityTime	
string <date-time>
Block datetime of the contract creation (ISO 8601, e.g. 2020-02-20T02:40:57Z).

lastActivity	
integer <int32>
Height of the block in which the account state was changed last time.
[sortable]

lastActivityTime	
string <date-time>
Datetime of the block in which the account state was changed last time (ISO 8601, e.g. 2020-02-20T02:40:57Z).

typeHash	
integer <int32>
32-bit hash of the contract parameter and storage types. This field can be used for searching similar contracts (which have the same interface).

codeHash	
integer <int32>
32-bit hash of the contract code. This field can be used for searching same contracts (which have the same script).

metadata	
any Nullable
TZIP-16 metadata.

extras	
any Nullable
Off-chain extras.

storage	
any Nullable
Contract storage value. Omitted by default. Use ?includeStorage=true to include it into response.


get
/v1/contracts/{address}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"id": 0,
"type": "string",
"address": "string",
"kind": "string",
"tzips": [
"string"
],
"alias": "string",
"balance": 0,
"creator": {
"alias": "string",
"address": "string"
},
"delegate": {
"alias": "string",
"address": "string",
"active": true
},
"delegationLevel": 0,
"delegationTime": "2019-08-24T14:15:22Z",
"numContracts": 0,
"tokensCount": 0,
"activeTokensCount": 0,
"tokenBalancesCount": 0,
"tokenTransfersCount": 0,
"ticketsCount": 0,
"activeTicketsCount": 0,
"ticketBalancesCount": 0,
"ticketTransfersCount": 0,
"numDelegations": 0,
"numOriginations": 0,
"numTransactions": 0,
"numReveals": 0,
"numMigrations": 0,
"transferTicketCount": 0,
"increasePaidStorageCount": 0,
"eventsCount": 0,
"firstActivity": 0,
"firstActivityTime": "2019-08-24T14:15:22Z",
"lastActivity": 0,
"lastActivityTime": "2019-08-24T14:15:22Z",
"typeHash": 0,
"codeHash": 0,
"metadata": null,
"extras": null,
"storage": null
}
Get same contracts
Returns contracts which have the same script as the specified one. Note, contract scripts are compared by 32-bit hash, so in very rare cases there may be collisions.

path Parameters
address
required
string
Contract address (starting with KT)

query Parameters
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

includeStorage	
boolean
Default: false
Specifies whether to include contract storage value in response.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal TzKT id.
[sortable]

type	
string
Type of the account, contract - smart contract programmable account.

address	
string
Public key hash of the contract

kind	
string
Kind of the contract (delegator_contract or smart_contract), where delegator_contract - manager.tz smart contract for delegation purpose only.

tzips	
Array of strings Nullable
List of implemented standards (TZIPs).

alias	
string Nullable
Name of the project behind the contract or contract description.

balance	
integer <int64>
Contract balance (micro tez).
[sortable]

creator	
Alias (object)
Information about the account, which has deployed the contract to the blockchain.
Click on the field to expand more details.

delegate	
DelegateInfo (object) Nullable
Information about the current delegate of the contract. null if it's not delegated.
Click on the field to expand more details.

delegationLevel	
integer <int32> Nullable
Block height of latest delegation. null if it's not delegated.

delegationTime	
string <date-time> Nullable
Block datetime of latest delegation (ISO 8601, e.g. 2020-02-20T02:40:57Z). null if it's not delegated.

numContracts	
integer <int32>
Number of contracts, created (originated) and/or managed by the contract.

tokensCount	
integer <int32>
Number of tokens minted in the contract.

activeTokensCount	
integer <int32>
Number of account tokens with non-zero balances.

tokenBalancesCount	
integer <int32>
Number of tokens the account ever had.

tokenTransfersCount	
integer <int32>
Number of token transfers from/to the account.

ticketsCount	
integer <int32>
Number of tickets minted in the contract.

activeTicketsCount	
integer <int32>
Number of tickets the account owns.

ticketBalancesCount	
integer <int32>
Number of tickets the account ever owned.

ticketTransfersCount	
integer <int32>
Number of ticket transfers from/to the account.

numDelegations	
integer <int32>
Number of delegation operations of the contract.

numOriginations	
integer <int32>
Number of origination (deployment / contract creation) operations, related the contract.

numTransactions	
integer <int32>
Number of transaction (transfer) operations, related to the contract.
[sortable]

numReveals	
integer <int32>
Number of reveal (is used to reveal the public key associated with an account) operations of the contract.

numMigrations	
integer <int32>
Number of migration (result of the context (database) migration during a protocol update) operations. related to the contract (synthetic type).

transferTicketCount	
integer <int32>
Number of transfer ticket operations related to the contract.

increasePaidStorageCount	
integer <int32>
Number of increase_paid_storage operations related to the contract.

eventsCount	
integer <int32>
Number of events produced by the contract.

firstActivity	
integer <int32>
Block height of the contract creation.
[sortable]

firstActivityTime	
string <date-time>
Block datetime of the contract creation (ISO 8601, e.g. 2020-02-20T02:40:57Z).

lastActivity	
integer <int32>
Height of the block in which the account state was changed last time.
[sortable]

lastActivityTime	
string <date-time>
Datetime of the block in which the account state was changed last time (ISO 8601, e.g. 2020-02-20T02:40:57Z).

typeHash	
integer <int32>
32-bit hash of the contract parameter and storage types. This field can be used for searching similar contracts (which have the same interface).

codeHash	
integer <int32>
32-bit hash of the contract code. This field can be used for searching same contracts (which have the same script).

metadata	
any Nullable
TZIP-16 metadata.

extras	
any Nullable
Off-chain extras.

storage	
any Nullable
Contract storage value. Omitted by default. Use ?includeStorage=true to include it into response.


get
/v1/contracts/{address}/same
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"type": "string",
"address": "string",
"kind": "string",
"tzips": [],
"alias": "string",
"balance": 0,
"creator": {},
"delegate": {},
"delegationLevel": 0,
"delegationTime": "2019-08-24T14:15:22Z",
"numContracts": 0,
"tokensCount": 0,
"activeTokensCount": 0,
"tokenBalancesCount": 0,
"tokenTransfersCount": 0,
"ticketsCount": 0,
"activeTicketsCount": 0,
"ticketBalancesCount": 0,
"ticketTransfersCount": 0,
"numDelegations": 0,
"numOriginations": 0,
"numTransactions": 0,
"numReveals": 0,
"numMigrations": 0,
"transferTicketCount": 0,
"increasePaidStorageCount": 0,
"eventsCount": 0,
"firstActivity": 0,
"firstActivityTime": "2019-08-24T14:15:22Z",
"lastActivity": 0,
"lastActivityTime": "2019-08-24T14:15:22Z",
"typeHash": 0,
"codeHash": 0,
"metadata": null,
"extras": null,
"storage": null
}
]
Get similar contracts
Returns contracts which have the same interface (parameter and storage types) as the specified one. Note, contract parameter and storage types are compared by 32-bit hash, so in very rare cases there may be collisions.

path Parameters
address
required
string
Contract address (starting with KT)

query Parameters
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

includeStorage	
boolean
Default: false
Specifies whether to include contract storage value in response.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal TzKT id.
[sortable]

type	
string
Type of the account, contract - smart contract programmable account.

address	
string
Public key hash of the contract

kind	
string
Kind of the contract (delegator_contract or smart_contract), where delegator_contract - manager.tz smart contract for delegation purpose only.

tzips	
Array of strings Nullable
List of implemented standards (TZIPs).

alias	
string Nullable
Name of the project behind the contract or contract description.

balance	
integer <int64>
Contract balance (micro tez).
[sortable]

creator	
Alias (object)
Information about the account, which has deployed the contract to the blockchain.
Click on the field to expand more details.

delegate	
DelegateInfo (object) Nullable
Information about the current delegate of the contract. null if it's not delegated.
Click on the field to expand more details.

delegationLevel	
integer <int32> Nullable
Block height of latest delegation. null if it's not delegated.

delegationTime	
string <date-time> Nullable
Block datetime of latest delegation (ISO 8601, e.g. 2020-02-20T02:40:57Z). null if it's not delegated.

numContracts	
integer <int32>
Number of contracts, created (originated) and/or managed by the contract.

tokensCount	
integer <int32>
Number of tokens minted in the contract.

activeTokensCount	
integer <int32>
Number of account tokens with non-zero balances.

tokenBalancesCount	
integer <int32>
Number of tokens the account ever had.

tokenTransfersCount	
integer <int32>
Number of token transfers from/to the account.

ticketsCount	
integer <int32>
Number of tickets minted in the contract.

activeTicketsCount	
integer <int32>
Number of tickets the account owns.

ticketBalancesCount	
integer <int32>
Number of tickets the account ever owned.

ticketTransfersCount	
integer <int32>
Number of ticket transfers from/to the account.

numDelegations	
integer <int32>
Number of delegation operations of the contract.

numOriginations	
integer <int32>
Number of origination (deployment / contract creation) operations, related the contract.

numTransactions	
integer <int32>
Number of transaction (transfer) operations, related to the contract.
[sortable]

numReveals	
integer <int32>
Number of reveal (is used to reveal the public key associated with an account) operations of the contract.

numMigrations	
integer <int32>
Number of migration (result of the context (database) migration during a protocol update) operations. related to the contract (synthetic type).

transferTicketCount	
integer <int32>
Number of transfer ticket operations related to the contract.

increasePaidStorageCount	
integer <int32>
Number of increase_paid_storage operations related to the contract.

eventsCount	
integer <int32>
Number of events produced by the contract.

firstActivity	
integer <int32>
Block height of the contract creation.
[sortable]

firstActivityTime	
string <date-time>
Block datetime of the contract creation (ISO 8601, e.g. 2020-02-20T02:40:57Z).

lastActivity	
integer <int32>
Height of the block in which the account state was changed last time.
[sortable]

lastActivityTime	
string <date-time>
Datetime of the block in which the account state was changed last time (ISO 8601, e.g. 2020-02-20T02:40:57Z).

typeHash	
integer <int32>
32-bit hash of the contract parameter and storage types. This field can be used for searching similar contracts (which have the same interface).

codeHash	
integer <int32>
32-bit hash of the contract code. This field can be used for searching same contracts (which have the same script).

metadata	
any Nullable
TZIP-16 metadata.

extras	
any Nullable
Off-chain extras.

storage	
any Nullable
Contract storage value. Omitted by default. Use ?includeStorage=true to include it into response.


get
/v1/contracts/{address}/similar
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"type": "string",
"address": "string",
"kind": "string",
"tzips": [],
"alias": "string",
"balance": 0,
"creator": {},
"delegate": {},
"delegationLevel": 0,
"delegationTime": "2019-08-24T14:15:22Z",
"numContracts": 0,
"tokensCount": 0,
"activeTokensCount": 0,
"tokenBalancesCount": 0,
"tokenTransfersCount": 0,
"ticketsCount": 0,
"activeTicketsCount": 0,
"ticketBalancesCount": 0,
"ticketTransfersCount": 0,
"numDelegations": 0,
"numOriginations": 0,
"numTransactions": 0,
"numReveals": 0,
"numMigrations": 0,
"transferTicketCount": 0,
"increasePaidStorageCount": 0,
"eventsCount": 0,
"firstActivity": 0,
"firstActivityTime": "2019-08-24T14:15:22Z",
"lastActivity": 0,
"lastActivityTime": "2019-08-24T14:15:22Z",
"typeHash": 0,
"codeHash": 0,
"metadata": null,
"extras": null,
"storage": null
}
]
Get contract code
Returns a code of the specified contract.

path Parameters
address
required
string
Contract address (starting with KT)

query Parameters
level	
integer <int32>
Default: 0
Level at which contract code should be taken. If 0 or not specified, the current value will be returned.

format	
integer <int32> [ 0 .. 2 ]
Default: 0
Code format (0 - micheline, 1 - michelson, 2 - bytes (base64))

Responses
200
Response Schema: application/octet-stream
string <binary>

get
/v1/contracts/{address}/code
Get JSON Schema [2020-12] interface for the contract
Returns standard JSON Schema for contract storage, entrypoints, and Big_map entries.

path Parameters
address
required
string
Contract address

Responses
200
Response Schema: application/json
storageSchema	
any Nullable
JSON Schema of the contract storage in humanified format (as returned by API)

entrypoints	
Array of objects (EntrypointInterface)
List of terminal entrypoints

bigMaps	
Array of objects (BigMapInterface)
List of currently available Big_maps

events	
Array of objects (EventInterface)
List of events extractable from the code ("static")


get
/v1/contracts/{address}/interface
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"storageSchema": null,
"entrypoints": [
{}
],
"bigMaps": [
{}
],
"events": [
{}
]
}
Get contract entrypoints
Returns entrypoints of the specified contract.

path Parameters
address
required
string
Contract address (starting with KT)

query Parameters
all	
boolean
Default: false
If true, returns all entrypoints, including unused ones. Unused means that the entrypoint can be normalized to a more specific one. For example here (or %entry1 (unit %entry2) (nat %entry3)) the %entry1 is unused entrypoint because it can be normalized to %entry2 or %entry3

json	
boolean
Default: true
Include parameters schema in human-readable JSON format

micheline	
boolean
Default: false
Include parameters schema in micheline format

michelson	
boolean
Default: false
Include parameters schema in michelson format

Responses
200
Response Schema: application/json
Array ()
name	
string
Entrypoint name

jsonParameters	
any Nullable
A kind of JSON schema, describing how parameters will look like in a human-readable JSON format

michelineParameters	
IMicheline (object) Nullable
Parameters schema in micheline format

michelsonParameters	
string Nullable
Parameters schema in michelson format

unused	
boolean
Unused means that the entrypoint can be normalized to a more specific one. For example here (or %entry1 (unit %entry2) (nat %entry3)) the %entry1 is unused entrypoint because it can be normalized to %entry2 or %entry3


get
/v1/contracts/{address}/entrypoints
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"name": "string",
"jsonParameters": null,
"michelineParameters": {},
"michelsonParameters": "string",
"unused": true
}
]
Get entrypoint by name
Returns contract's entrypoint with specified name.

path Parameters
address
required
string
Contract address (starting with KT)

name
required
string
Entrypoint name

query Parameters
json	
boolean
Default: true
Include parameters schema in human-readable JSON format

micheline	
boolean
Default: false
Include parameters schema in micheline format

michelson	
boolean
Default: false
Include parameters schema in michelson format

Responses
200
Response Schema: application/json
name	
string
Entrypoint name

jsonParameters	
any Nullable
A kind of JSON schema, describing how parameters will look like in a human-readable JSON format

michelineParameters	
IMicheline (object) Nullable
Parameters schema in micheline format

michelsonParameters	
string Nullable
Parameters schema in michelson format

unused	
boolean
Unused means that the entrypoint can be normalized to a more specific one. For example here (or %entry1 (unit %entry2) (nat %entry3)) the %entry1 is unused entrypoint because it can be normalized to %entry2 or %entry3


get
/v1/contracts/{address}/entrypoints/{name}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"name": "string",
"jsonParameters": null,
"michelineParameters": {
"type": 0
},
"michelsonParameters": "string",
"unused": true
}
Get contract views
Returns all views of the specified contract.

path Parameters
address
required
string
Contract address (starting with KT)

query Parameters
json	
boolean
Default: true
Include parameter and return types in human-readable JSON format

micheline	
boolean
Default: false
Include parameter and return types in micheline format

michelson	
boolean
Default: false
Include parameter and return types in michelson format

Responses
200
Response Schema: application/json
Array ()
name	
string
Contract view name

jsonParameterType	
any Nullable
Parameter type in human-readable JSON format

jsonReturnType	
any Nullable
Return type in human-readable JSON format

michelineParameterType	
IMicheline (object) Nullable
Parameter type in micheline format

michelineReturnType	
IMicheline (object) Nullable
Return type in micheline format

michelsonParameterType	
string Nullable
Parameter type in michelson format

michelsonReturnType	
string Nullable
Return type in michelson format


get
/v1/contracts/{address}/views
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"name": "string",
"jsonParameterType": null,
"jsonReturnType": null,
"michelineParameterType": {},
"michelineReturnType": {},
"michelsonParameterType": "string",
"michelsonReturnType": "string"
}
]
Get view by name
Returns contract view with specified name.

path Parameters
address
required
string
Contract address (starting with KT)

name
required
string
View name

query Parameters
json	
boolean
Default: true
Include parameter and return types in human-readable JSON format

micheline	
boolean
Default: false
Include parameter and return types in micheline format

michelson	
boolean
Default: false
Include parameter and return types in michelson format

Responses
200
Response Schema: application/json
name	
string
Contract view name

jsonParameterType	
any Nullable
Parameter type in human-readable JSON format

jsonReturnType	
any Nullable
Return type in human-readable JSON format

michelineParameterType	
IMicheline (object) Nullable
Parameter type in micheline format

michelineReturnType	
IMicheline (object) Nullable
Return type in micheline format

michelsonParameterType	
string Nullable
Parameter type in michelson format

michelsonReturnType	
string Nullable
Return type in michelson format


get
/v1/contracts/{address}/views/{name}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"name": "string",
"jsonParameterType": null,
"jsonReturnType": null,
"michelineParameterType": {
"type": 0
},
"michelineReturnType": {
"type": 0
},
"michelsonParameterType": "string",
"michelsonReturnType": "string"
}
Build entrypoint parameters
Returns micheline parameters converted from its JSON representation.

path Parameters
address
required
string
Contract address

name
required
string
Entrypoint name

query Parameters
value	
string
Json parameters

Responses
200
Response Schema: application/octet-stream
string <binary>

get
/v1/contracts/{address}/entrypoints/{name}/build
Build entrypoint parameters
Returns micheline parameters converted from its JSON representation.

path Parameters
address
required
string
Contract address

name
required
string
Entrypoint name

Request Body schema: application/json
Json parameters

any
Responses
200
Response Schema: application/octet-stream
string <binary>

post
/v1/contracts/{address}/entrypoints/{name}/build
Request samples
Payload
Content type
application/json

Copy
Expand allCollapse all
null
Get contract storage
Returns contract storage value in JSON format.

path Parameters
address
required
string
Contract address

query Parameters
level	
integer <int32>
Default: 0
Level at which storage value should be taken. If 0 or not specified, the current value will be returned.

path	
string Nullable
Path in the JSON value (point-separated list of field names, e.g. path=settings.refund_time to return

Responses
200
Response Schema: application/octet-stream
string <binary>

get
/v1/contracts/{address}/storage
Get contract storage schema
Returns JSON schema of the contract storage.

path Parameters
address
required
string
Contract address

query Parameters
level	
integer <int32>
Default: 0
Level at which storage schema should be taken. If 0 or not specified, the current schema will be returned.

Responses
200
Response Schema: application/octet-stream
string <binary>

get
/v1/contracts/{address}/storage/schema
Get contract storage history
Returns contract storage historical values.

path Parameters
address
required
string
Contract address

query Parameters
lastId	
integer <int32>
Default: 0
Id of the last item received (for pagination)

limit	
integer <int32> [ 0 .. 1000 ]
Default: 10
Maximum number of items to return

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Id of the record that can be used for pagination

level	
integer <int32>
Level at which the storage value was taken

timestamp	
string <date-time>
Timestamp at which the storage value was taken

operation	
SourceOperation (object)
Operation that caused the storage change

value	
any
New storage value


get
/v1/contracts/{address}/storage/history
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"operation": {},
"value": null
}
]
Get raw contract storage
Returns raw contract storage value in micheline format.

path Parameters
address
required
string
Contract address

query Parameters
level	
integer <int32>
Default: 0
Level at which storage value should be taken. If 0 or not specified, the current value will be returned.

Responses
200
Response Schema: application/json
type	
integer (MichelineType)
Enum: 0 32 64 96 128

get
/v1/contracts/{address}/storage/raw
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"type": 0
}
Get raw contract storage schema
Returns micheline schema (type) of the contract storage.

path Parameters
address
required
string
Contract address

query Parameters
level	
integer <int32>
Default: 0
Level at which storage schema should be taken. If 0 or not specified, the current schema will be returned.

Responses
200
Response Schema: application/json
type	
integer (MichelineType)
Enum: 0 32 64 96 128

get
/v1/contracts/{address}/storage/raw/schema
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"type": 0
}
Get raw contract storage history
Returns raw contract storage historical values.

path Parameters
address
required
string
Contract address

query Parameters
lastId	
integer <int32>
Default: 0
Id of the last item received (for pagination)

limit	
integer <int32> [ 0 .. 1000 ]
Default: 10
Maximum number of items to return

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Id of the record that can be used for pagination

level	
integer <int32>
Level at which the storage value was taken

timestamp	
string <date-time>
Timestamp at which the storage value was taken

operation	
SourceOperation (object)
Operation that caused the storage change

value	
any
New storage value


get
/v1/contracts/{address}/storage/raw/history
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"operation": {},
"value": null
}
]
Get contract bigmaps
Returns all active bigmaps allocated in the contract storage.

path Parameters
address
required
string
Contract address

query Parameters
tags	
BigMapTagsParameter (object) Nullable
Filters bigmaps tags (metadata, token_metadata, ledger).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts bigmaps by specified field. Supported fields: id (default), firstLevel, lastLevel, totalKeys, activeKeys, updates.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

micheline	
MichelineFormat (string)
Default: "Json"
Format of the bigmap key and value: 0 - JSON, 1 - JSON string, 2 - Micheline, 3 - Micheline string

Responses
200
Response Schema: application/json
Array ()
ptr	
integer <int32>
Bigmap pointer

contract	
Alias (object)
Smart contract in which's storage the bigmap is allocated

path	
string
Path to the bigmap in the contract storage

tags	
Array of strings Nullable
List of tags ( metadata, token_metadata,ledger, or null if there are no tags)

active	
boolean
Bigmap status (true - active, false - removed)

firstLevel	
integer <int32>
Level of the block where the bigmap was seen first time

lastLevel	
integer <int32>
Level of the block where the bigmap was seen last time

totalKeys	
integer <int32>
Total number of keys ever added to the bigmap

activeKeys	
integer <int32>
Total number of currently active keys

updates	
integer <int32>
Total number of actions with the bigmap

keyType	
any
Bigmap key type as JSON schema or Micheline, depending on the micheline query parameter.

valueType	
any
Bigmap value type as JSON schema or Micheline, depending on the micheline query parameter.


get
/v1/contracts/{address}/bigmaps
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"ptr": 0,
"contract": {},
"path": "string",
"tags": [],
"active": true,
"firstLevel": 0,
"lastLevel": 0,
"totalKeys": 0,
"activeKeys": 0,
"updates": 0,
"keyType": null,
"valueType": null
}
]
Get bigmap by name
Returns contract bigmap with the specified name or storage path.

path Parameters
address
required
string
Contract address

name
required
string
Bigmap name is the last piece of the bigmap storage path. For example, if the storage path is ledger or assets.ledger, then the name is ledger. If there are multiple bigmaps with the same name, for example assets.ledger and tokens.ledger, you can specify the full path.

query Parameters
micheline	
MichelineFormat (string)
Default: "Json"
Format of the bigmap key and value: 0 - JSON, 1 - JSON string, 2 - Micheline, 3 - Micheline string

Responses
200
Response Schema: application/json
ptr	
integer <int32>
Bigmap pointer

contract	
Alias (object)
Smart contract in which's storage the bigmap is allocated

path	
string
Path to the bigmap in the contract storage

tags	
Array of strings Nullable
List of tags ( metadata, token_metadata,ledger, or null if there are no tags)

active	
boolean
Bigmap status (true - active, false - removed)

firstLevel	
integer <int32>
Level of the block where the bigmap was seen first time

lastLevel	
integer <int32>
Level of the block where the bigmap was seen last time

totalKeys	
integer <int32>
Total number of keys ever added to the bigmap

activeKeys	
integer <int32>
Total number of currently active keys

updates	
integer <int32>
Total number of actions with the bigmap

keyType	
any
Bigmap key type as JSON schema or Micheline, depending on the micheline query parameter.

valueType	
any
Bigmap value type as JSON schema or Micheline, depending on the micheline query parameter.


get
/v1/contracts/{address}/bigmaps/{name}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"ptr": 0,
"contract": {
"alias": "string",
"address": "string"
},
"path": "string",
"tags": [
"string"
],
"active": true,
"firstLevel": 0,
"lastLevel": 0,
"totalKeys": 0,
"activeKeys": 0,
"updates": 0,
"keyType": null,
"valueType": null
}
Get bigmap keys
Returns keys of a contract bigmap with the specified name.

path Parameters
address
required
string
Contract address

name
required
string
Bigmap name is the last piece of the bigmap storage path. For example, if the storage path is ledger or assets.ledger, then the name is ledger. If there are multiple bigmaps with the same name, for example assets.ledger and tokens.ledger, you can specify the full path.

query Parameters
active	
boolean Nullable
Filters keys by status: true - active, false - removed.

key	
JsonParameter (object) Nullable
Filters keys by JSON key. Note, this query parameter supports the following format: ?key{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?key.token_id=....

value	
JsonParameter (object) Nullable
Filters keys by JSON value. Note, this query parameter supports the following format: ?value{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?value.balance.gt=....

lastLevel	
Int32Parameter (object) Nullable
Filters bigmap keys by the last update level.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts bigmap keys by specified field. Supported fields: id (default), firstLevel, lastLevel, updates.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

micheline	
MichelineFormat (string)
Default: "Json"
Format of the bigmap key and value: 0 - JSON, 1 - JSON string, 2 - Micheline, 3 - Micheline string

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal Id, can be used for pagination

active	
boolean
Bigmap key status (true - active, false - removed)

hash	
string
Key hash

key	
any
Key in JSON or Micheline format, depending on the micheline query parameter.

value	
any
Value in JSON or Micheline format, depending on the micheline query parameter. Note, if the key is inactive (removed) it will contain the last non-null value.

firstLevel	
integer <int32>
Level of the block where the bigmap key was seen first time

lastLevel	
integer <int32>
Level of the block where the bigmap key was seen last time

updates	
integer <int32>
Total number of actions with the bigmap key


get
/v1/contracts/{address}/bigmaps/{name}/keys
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"active": true,
"hash": "string",
"key": null,
"value": null,
"firstLevel": 0,
"lastLevel": 0,
"updates": 0
}
]
Get bigmap key
Returns the specified bigmap key.

path Parameters
address
required
string
Contract address

name
required
string
Bigmap name is the last piece of the bigmap storage path. For example, if the storage path is ledger or assets.ledger, then the name is ledger. If there are multiple bigmaps with the same name, for example assets.ledger and tokens.ledger, you can specify the full path.

key
required
string
Either a key hash (expr123...) or a plain value (foo...). Even if the key is complex (an object or an array), you can specify it as is, for example, /keys/{"address":"tz123","nat":"123"}.

query Parameters
micheline	
MichelineFormat (string)
Default: "Json"
Format of the bigmap key and value: 0 - JSON, 1 - JSON string, 2 - Micheline, 3 - Micheline string

Responses
200
Response Schema: application/json
id	
integer <int32>
Internal Id, can be used for pagination

active	
boolean
Bigmap key status (true - active, false - removed)

hash	
string
Key hash

key	
any
Key in JSON or Micheline format, depending on the micheline query parameter.

value	
any
Value in JSON or Micheline format, depending on the micheline query parameter. Note, if the key is inactive (removed) it will contain the last non-null value.

firstLevel	
integer <int32>
Level of the block where the bigmap key was seen first time

lastLevel	
integer <int32>
Level of the block where the bigmap key was seen last time

updates	
integer <int32>
Total number of actions with the bigmap key


get
/v1/contracts/{address}/bigmaps/{name}/keys/{key}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"id": 0,
"active": true,
"hash": "string",
"key": null,
"value": null,
"firstLevel": 0,
"lastLevel": 0,
"updates": 0
}
Get bigmap key updates
Returns updates history for the specified bigmap key.

path Parameters
address
required
string
Contract address

name
required
string
Bigmap name is the last piece of the bigmap storage path. For example, if the storage path is ledger or assets.ledger, then the name is ledger. If there are multiple bigmaps with the same name, for example assets.ledger and tokens.ledger, you can specify the full path.

key
required
string
Either a key hash (expr123...) or a plain value (foo...). Even if the key is complex (an object or an array), you can specify it as is, for example, /keys/{"address":"tz123","nat":"123"}.

query Parameters
sort	
SortParameter (object) Nullable
Sorts bigmap updates by specified field. Supported fields: id (default).

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

micheline	
MichelineFormat (string)
Default: "Json"
Format of the key value: 0 - JSON, 1 - JSON string, 2 - Micheline, 3 - Micheline string

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal Id, can be used for pagination

level	
integer <int32>
Level of the block where the bigmap key was updated

timestamp	
string <date-time>
Timestamp of the block where the bigmap key was updated

action	
string
Action with the key (add_key, update_key, remove_key)

value	
any
Value in JSON or Micheline format, depending on the micheline query parameter. Note, if the action is remove_key it will contain the last non-null value.


get
/v1/contracts/{address}/bigmaps/{name}/keys/{key}/updates
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"action": "string",
"value": null
}
]
Get historical keys
Returns a list of bigmap keys at the specific block.

path Parameters
address
required
string
Contract address

name
required
string
Bigmap name is the last piece of the bigmap storage path. For example, if the storage path is ledger or assets.ledger, then the name is ledger. If there are multiple bigmaps with the same name, for example assets.ledger and tokens.ledger, you can specify the full path.

level
required
integer <int32>
Level of the block at which you want to get bigmap keys

query Parameters
active	
boolean Nullable
Filters keys by status: true - active, false - removed.

key	
JsonParameter (object) Nullable
Filters keys by JSON key. Note, this query parameter supports the following format: ?key{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?key.token_id=....

value	
JsonParameter (object) Nullable
Filters keys by JSON value. Note, this query parameter supports the following format: ?value{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?value.balance.gt=....

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts bigmap keys by specified field. Supported fields: id (default).

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

micheline	
MichelineFormat (string)
Default: "Json"
Format of the bigmap key and value: 0 - JSON, 1 - JSON string, 2 - Micheline, 3 - Micheline string

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal Id, can be used for pagination

active	
boolean
Bigmap key status (true - active, false - removed)

hash	
string
Key hash

key	
any
Key in JSON or Micheline format, depending on the micheline query parameter.

value	
any
Value in JSON or Micheline format, depending on the micheline query parameter. Note, if the key is inactive (removed) it will contain the last non-null value.


get
/v1/contracts/{address}/bigmaps/{name}/historical_keys/{level}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"active": true,
"hash": "string",
"key": null,
"value": null
}
]
Get historical key
Returns the specified bigmap key at the specific block.

path Parameters
address
required
string
Contract address

name
required
string
Bigmap name is the last piece of the bigmap storage path. For example, if the storage path is ledger or assets.ledger, then the name is ledger. If there are multiple bigmaps with the same name, for example assets.ledger and tokens.ledger, you can specify the full path.

level
required
integer <int32>
Level of the block at which you want to get bigmap key

key
required
string
Either a key hash (expr123...) or a plain value (foo...). Even if the key is complex (an object or an array), you can specify it as is, for example, /keys/{"address":"tz123","nat":"123"}.

query Parameters
micheline	
MichelineFormat (string)
Default: "Json"
Format of the bigmap key and value: 0 - JSON, 1 - JSON string, 2 - Micheline, 3 - Micheline string

Responses
200
Response Schema: application/json
id	
integer <int32>
Internal Id, can be used for pagination

active	
boolean
Bigmap key status (true - active, false - removed)

hash	
string
Key hash

key	
any
Key in JSON or Micheline format, depending on the micheline query parameter.

value	
any
Value in JSON or Micheline format, depending on the micheline query parameter. Note, if the key is inactive (removed) it will contain the last non-null value.


get
/v1/contracts/{address}/bigmaps/{name}/historical_keys/{level}/{key}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"id": 0,
"active": true,
"hash": "string",
"key": null,
"value": null
}
Cycles
Get cycles count
Returns the total number of cycles, including future cycles.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/cycles/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get cycles
Returns a list of cycles, including future cycles.

query Parameters
select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts cycles by specified field. Supported fields: index (default, desc).

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
index	
integer <int32>
Cycle index starting from zero

firstLevel	
integer <int32>
Level of the first block in the cycle

startTime	
string <date-time>
Timestamp of the first block in the cycle

lastLevel	
integer <int32>
Level of the last block in the cycle

endTime	
string <date-time>
Timestamp of the last block in the cycle

snapshotLevel	
integer <int32>
Height of the block where the snapshot was taken

randomSeed	
string
Randomly generated seed used by the network for things like baking rights distribution etc.

totalBakers	
integer <int32>
Total number of all active in this cycle bakers

totalBakingPower	
integer <int64>
Total baking power of all active in this cycle bakers

blockReward	
integer <int64>
Fixed reward paid to the block payload proposer in this cycle (micro tez)

blockBonusPerSlot	
integer <int64>
Bonus reward paid to the block producer in this cycle (micro tez)

attestationRewardPerSlot	
integer <int64>
Reward for attestation in this cycle (micro tez)

nonceRevelationReward	
integer <int64>
Reward for seed nonce revelation in this cycle (micro tez)

vdfRevelationReward	
integer <int64>
Reward for vdf revelation in this cycle (micro tez)

dalAttestationRewardPerShard	
integer <int64>
Reward for dal attestation in this cycle (micro tez)

quote	
QuoteShort (object) Nullable
Injected historical quote at the end of the cycle

endorsementRewardPerSlot	
integer <int64>
DEPRECATED


get
/v1/cycles
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"index": 0,
"firstLevel": 0,
"startTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"endTime": "2019-08-24T14:15:22Z",
"snapshotLevel": 0,
"randomSeed": "string",
"totalBakers": 0,
"totalBakingPower": 0,
"blockReward": 0,
"blockBonusPerSlot": 0,
"attestationRewardPerSlot": 0,
"nonceRevelationReward": 0,
"vdfRevelationReward": 0,
"dalAttestationRewardPerShard": 0,
"quote": {},
"endorsementRewardPerSlot": 0
}
]
Get cycle by index
Returns a cycle at the specified index.

path Parameters
index
required
integer <int32>
Cycle index starting from zero

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
index	
integer <int32>
Cycle index starting from zero

firstLevel	
integer <int32>
Level of the first block in the cycle

startTime	
string <date-time>
Timestamp of the first block in the cycle

lastLevel	
integer <int32>
Level of the last block in the cycle

endTime	
string <date-time>
Timestamp of the last block in the cycle

snapshotLevel	
integer <int32>
Height of the block where the snapshot was taken

randomSeed	
string
Randomly generated seed used by the network for things like baking rights distribution etc.

totalBakers	
integer <int32>
Total number of all active in this cycle bakers

totalBakingPower	
integer <int64>
Total baking power of all active in this cycle bakers

blockReward	
integer <int64>
Fixed reward paid to the block payload proposer in this cycle (micro tez)

blockBonusPerSlot	
integer <int64>
Bonus reward paid to the block producer in this cycle (micro tez)

attestationRewardPerSlot	
integer <int64>
Reward for attestation in this cycle (micro tez)

nonceRevelationReward	
integer <int64>
Reward for seed nonce revelation in this cycle (micro tez)

vdfRevelationReward	
integer <int64>
Reward for vdf revelation in this cycle (micro tez)

dalAttestationRewardPerShard	
integer <int64>
Reward for dal attestation in this cycle (micro tez)

quote	
QuoteShort (object) Nullable
Injected historical quote at the end of the cycle

endorsementRewardPerSlot	
integer <int64>
DEPRECATED


get
/v1/cycles/{index}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"index": 0,
"firstLevel": 0,
"startTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"endTime": "2019-08-24T14:15:22Z",
"snapshotLevel": 0,
"randomSeed": "string",
"totalBakers": 0,
"totalBakingPower": 0,
"blockReward": 0,
"blockBonusPerSlot": 0,
"attestationRewardPerSlot": 0,
"nonceRevelationReward": 0,
"vdfRevelationReward": 0,
"dalAttestationRewardPerShard": 0,
"quote": {
"btc": 0,
"eur": 0,
"usd": 0,
"cny": 0,
"jpy": 0,
"krw": 0,
"eth": 0,
"gbp": 0
},
"endorsementRewardPerSlot": 0
}
Delegates
Get delegates
Returns a list of delegate accounts.

query Parameters
active	
BoolParameter (object) Nullable
Delegate status to filter by (true - only active, false - only deactivated, undefined - all delegates)

lastActivity	
Int32Parameter (object) Nullable
Filters delegates by last activity level (where the delegate was updated)

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts delegators by specified field. Supported fields: id (default), activationLevel, deactivationLevel, stakingBalance, balance, numDelegators.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal TzKT id

type	
string
Type of the account, delegate - account, registered as a delegate (baker)

address	
string
Public key hash of the delegate (baker)

active	
boolean
Delegation status (true - active, false - deactivated)

alias	
string Nullable
Name of the baking service

publicKey	
string
Public key of the delegate (baker)

revealed	
boolean
Public key revelation status. Unrevealed account can't send manager operation (transaction, origination etc.)

balance	
integer <int64>
Total balance of the delegate (baker), including spendable and frozen funds (micro tez)

rollupBonds	
integer <int64>
Amount of tx rollup commitment bonds (micro tez)

smartRollupBonds	
integer <int64>
Amount of smart rollup commitment bonds (micro tez)

stakedBalance	
integer <int64>
Amount staked from the own balance (micro tez). Like delegated amount, except for it is frozen and can be slashed.

unstakedBalance	
integer <int64>
Amount that was unstaked, but not yet finalized (i.e. it is still frozen) (micro tez).

unstakedBaker	
Alias (object) Nullable
Information about the baker, for which there are pending unstake requests.

externalStakedBalance	
integer <int64>
Amount staked from external stakers (micro tez). Like delegated amount, except for it is frozen and can be slashed.

externalUnstakedBalance	
integer <int64>
Amount that was unstaked by external stakers, but not yet finalized (i.e. it is still frozen) (micro tez).

roundingError	
integer <int64>
Amount that was lost due to inconsistend rounding introduced in Oxford (micro tez).

totalStakedBalance	
integer <int64>
Total staked balance, which is stakedBalance + externalStakedBalance.

issuedPseudotokens	
string Nullable
Total amount of issued "pseudo-tokens". These pseudotokens are used for unstaking.

stakersCount	
integer <int32>
Number of external stakers.

frozenDepositLimit	
integer <int64> Nullable
Configured max amount allowed to be locked as a security deposit (micro tez)

limitOfStakingOverBaking	
integer <int64> Nullable
This parameter determines the maximum portion (millionth) of external stake by stakers over the baker's own staked funds.

edgeOfBakingOverStaking	
integer <int64> Nullable
This parameter determines the fraction (billionth) of the rewards that accrue to the baker's liquid spendable balance â€” the remainder accrues to frozen stakes.

counter	
integer <int32>
An account nonce which is used to prevent operation replay

activationLevel	
integer <int32>
Block height when delegate (baker) was registered as a baker last time

activationTime	
string <date-time>
Block datetime when delegate (baker) was registered as a baker last time (ISO 8601, e.g. 2019-11-31)

deactivationLevel	
integer <int32> Nullable
Block height when delegate (baker) was deactivated as a baker because of lack of funds or inactivity

deactivationTime	
string <date-time> Nullable
Block datetime when delegate (baker) was deactivated as a baker because of lack of funds or inactivity (ISO 8601, e.g. 2019-11-31)

stakingBalance	
integer <int64>
Baker's own balance plus delegated balance (micro tez)

delegatedBalance	
integer <int64>
Total amount delegated to the baker (micro tez)

numContracts	
integer <int32>
Number of contracts, created (originated) and/or managed by the delegate (baker)

rollupsCount	
integer <int32>
Number of tx rollups, created (originated) by the account

smartRollupsCount	
integer <int32>
Number of smart rollups, created (originated) by the account

activeTokensCount	
integer <int32>
Number of account tokens with non-zero balances

tokenBalancesCount	
integer <int32>
Number of tokens the account ever had

tokenTransfersCount	
integer <int32>
Number of token transfers from/to the account

activeTicketsCount	
integer <int32>
Number of tickets the account owns.

ticketBalancesCount	
integer <int32>
Number of tickets the account ever owned.

ticketTransfersCount	
integer <int32>
Number of ticket transfers from/to the account.

numDelegators	
integer <int32>
Number of current delegators (accounts, delegated their funds) of the delegate (baker)

numBlocks	
integer <int32>
Number of baked (validated) blocks all the time by the delegate (baker)

numAttestations	
integer <int32>
Number of given attestations (approvals) by the delegate (baker)

numPreattestations	
integer <int32>
Number of given preattestations (approvals) by the delegate (baker)

numBallots	
integer <int32>
Number of submitted by the delegate ballots during a voting period

numProposals	
integer <int32>
Number of submitted (upvoted) by the delegate proposals during a proposal period

numActivations	
integer <int32>
Number of account activation operations. Are used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundationâ€™s fundraiser

numDoubleBaking	
integer <int32>
Number of double baking (baking two different blocks at the same height) evidence operations, included in blocks, baked (validated) by the delegate

numDoubleConsensus	
integer <int32>
Number of double consensus (attestation or preattestation of two different blocks at the same block height) evidence operations, included in blocks, baked (validated) by the delegate

numNonceRevelations	
integer <int32>
Number of seed nonce revelation (are used by the blockchain to create randomness) operations provided by the delegate

vdfRevelationsCount	
integer <int32>
Number of vdf_revelation operations included into blocks by the delegate

numRevelationPenalties	
integer <int32>
Number of operations for all time in which rewards were lost due to unrevealed seed nonces by the delegate (synthetic type)

numAttestationRewards	
integer <int32>
Number of attestation rewards received at the end of cycles (synthetic type)

numDelegations	
integer <int32>
Number of all delegation related operations (new delegator, left delegator, registration as a baker), related to the delegate (baker)

numOriginations	
integer <int32>
Number of all origination (deployment / contract creation) operations, related to the delegate (baker)

numTransactions	
integer <int32>
Number of all transaction (tez transfer) operations, related to the delegate (baker)

numReveals	
integer <int32>
Number of reveal (is used to reveal the public key associated with an account) operations of the delegate (baker)

numRegisterConstants	
integer <int32>
Number of register global constant operations sent by the baker

numSetDepositsLimits	
integer <int32>
Number of set deposits limit operations sent by the baker

numMigrations	
integer <int32>
Number of migration (result of the context (database) migration during a protocol update) operations, related to the delegate (synthetic type)

txRollupOriginationCount	
integer <int32>
Number of tx rollup origination operations sent by the account

txRollupSubmitBatchCount	
integer <int32>
Number of tx rollup submit batch operations sent by the account

txRollupCommitCount	
integer <int32>
Number of tx rollup commit operations sent by the account

txRollupReturnBondCount	
integer <int32>
Number of tx rollup return bond operations sent by the account

txRollupFinalizeCommitmentCount	
integer <int32>
Number of tx rollup finalize commitment operations sent by the account

txRollupRemoveCommitmentCount	
integer <int32>
Number of tx rollup remove commitment operations sent by the account

txRollupRejectionCount	
integer <int32>
Number of tx rollup rejection operations sent by the account

txRollupDispatchTicketsCount	
integer <int32>
Number of tx rollup dispatch tickets operations sent by the account

transferTicketCount	
integer <int32>
Number of transfer ticket operations sent by the account

increasePaidStorageCount	
integer <int32>
Number of increase_paid_storage operations sent by the account

updateSecondaryKeyCount	
integer <int32>
Number of update_secondary_key operations sent by the account

drainDelegateCount	
integer <int32>
Number of drain_delegate operations related to the account

smartRollupAddMessagesCount	
integer <int32>
Number of smart_rollup_add_messages operations related to the account

smartRollupCementCount	
integer <int32>
Number of smart_rollup_cement operations related to the account

smartRollupExecuteCount	
integer <int32>
Number of smart_rollup_execute_outbox_message operations related to the account

smartRollupOriginateCount	
integer <int32>
Number of smart_rollup_originate operations related to the account

smartRollupPublishCount	
integer <int32>
Number of smart_rollup_publish operations related to the account

smartRollupRecoverBondCount	
integer <int32>
Number of smart_rollup_recover_bond operations related to the account

smartRollupRefuteCount	
integer <int32>
Number of smart_rollup_refute operations related to the account

refutationGamesCount	
integer <int32>
Number of smart rollup refutation games related to the account

activeRefutationGamesCount	
integer <int32>
Number of active smart rollup refutation games related to the account

stakingOpsCount	
integer <int32>
Number of staking operations related to the account

autostakingOpsCount	
integer <int32>
Number of autostaking operations related to the account

stakingUpdatesCount	
integer <int32>
Number of staking updates related to the account

setDelegateParametersOpsCount	
integer <int32>
Number of set delegate parameters operations related to the account

dalPublishCommitmentOpsCount	
integer <int32>
Number of DAL publish commitment operations related to the account

dalEntrapmentEvidenceOpsCount	
integer <int32>
Number of DAL entrapment evidences related to the account

dalAttestationRewardsCount	
integer <int32>
Number of DAL attestation rewards related to the account

firstActivity	
integer <int32>
Block height of the first operation, related to the delegate (baker)

firstActivityTime	
string <date-time>
Block datetime of the first operation, related to the delegate (ISO 8601, e.g. 2020-02-20T02:40:57Z)

lastActivity	
integer <int32>
Height of the block in which the account state was changed last time

lastActivityTime	
string <date-time>
Datetime of the block in which the account state was changed last time (ISO 8601, e.g. 2020-02-20T02:40:57Z)

extras	
any Nullable
Off-chain extras

software	
SoftwareAlias (object) Nullable
Last seen baker's software

updateConsensusKeyCount	
integer <int32>
DEPRECATED

numEndorsements	
integer <int32>
DEPRECATED

numPreendorsements	
integer <int32>
DEPRECATED

numDoubleEndorsing	
integer <int32>
DEPRECATED

numDoublePreendorsing	
integer <int32>
DEPRECATED

numEndorsingRewards	
integer <int32>
DEPRECATED


get
/v1/delegates
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"type": "string",
"address": "string",
"active": true,
"alias": "string",
"publicKey": "string",
"revealed": true,
"balance": 0,
"rollupBonds": 0,
"smartRollupBonds": 0,
"stakedBalance": 0,
"unstakedBalance": 0,
"unstakedBaker": {},
"externalStakedBalance": 0,
"externalUnstakedBalance": 0,
"roundingError": 0,
"totalStakedBalance": 0,
"issuedPseudotokens": "string",
"stakersCount": 0,
"frozenDepositLimit": 0,
"limitOfStakingOverBaking": 0,
"edgeOfBakingOverStaking": 0,
"counter": 0,
"activationLevel": 0,
"activationTime": "2019-08-24T14:15:22Z",
"deactivationLevel": 0,
"deactivationTime": "2019-08-24T14:15:22Z",
"stakingBalance": 0,
"delegatedBalance": 0,
"numContracts": 0,
"rollupsCount": 0,
"smartRollupsCount": 0,
"activeTokensCount": 0,
"tokenBalancesCount": 0,
"tokenTransfersCount": 0,
"activeTicketsCount": 0,
"ticketBalancesCount": 0,
"ticketTransfersCount": 0,
"numDelegators": 0,
"numBlocks": 0,
"numAttestations": 0,
"numPreattestations": 0,
"numBallots": 0,
"numProposals": 0,
"numActivations": 0,
"numDoubleBaking": 0,
"numDoubleConsensus": 0,
"numNonceRevelations": 0,
"vdfRevelationsCount": 0,
"numRevelationPenalties": 0,
"numAttestationRewards": 0,
"numDelegations": 0,
"numOriginations": 0,
"numTransactions": 0,
"numReveals": 0,
"numRegisterConstants": 0,
"numSetDepositsLimits": 0,
"numMigrations": 0,
"txRollupOriginationCount": 0,
"txRollupSubmitBatchCount": 0,
"txRollupCommitCount": 0,
"txRollupReturnBondCount": 0,
"txRollupFinalizeCommitmentCount": 0,
"txRollupRemoveCommitmentCount": 0,
"txRollupRejectionCount": 0,
"txRollupDispatchTicketsCount": 0,
"transferTicketCount": 0,
"increasePaidStorageCount": 0,
"updateSecondaryKeyCount": 0,
"drainDelegateCount": 0,
"smartRollupAddMessagesCount": 0,
"smartRollupCementCount": 0,
"smartRollupExecuteCount": 0,
"smartRollupOriginateCount": 0,
"smartRollupPublishCount": 0,
"smartRollupRecoverBondCount": 0,
"smartRollupRefuteCount": 0,
"refutationGamesCount": 0,
"activeRefutationGamesCount": 0,
"stakingOpsCount": 0,
"autostakingOpsCount": 0,
"stakingUpdatesCount": 0,
"setDelegateParametersOpsCount": 0,
"dalPublishCommitmentOpsCount": 0,
"dalEntrapmentEvidenceOpsCount": 0,
"dalAttestationRewardsCount": 0,
"firstActivity": 0,
"firstActivityTime": "2019-08-24T14:15:22Z",
"lastActivity": 0,
"lastActivityTime": "2019-08-24T14:15:22Z",
"extras": null,
"software": {},
"updateConsensusKeyCount": 0,
"numEndorsements": 0,
"numPreendorsements": 0,
"numDoubleEndorsing": 0,
"numDoublePreendorsing": 0,
"numEndorsingRewards": 0
}
]
Get delegates count
Returns a number of delegate accounts.

query Parameters
active	
BoolParameter (object) Nullable
Delegate status to filter by (true - only active, false - only deactivated, undefined - all delegates)

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/delegates/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get delegate by address
Returns a delegate with the specified address.

path Parameters
address
required
string
Delegate address (starting with tz)

Responses
200
Response Schema: application/json
id	
integer <int32>
Internal TzKT id

type	
string
Type of the account, delegate - account, registered as a delegate (baker)

address	
string
Public key hash of the delegate (baker)

active	
boolean
Delegation status (true - active, false - deactivated)

alias	
string Nullable
Name of the baking service

publicKey	
string
Public key of the delegate (baker)

revealed	
boolean
Public key revelation status. Unrevealed account can't send manager operation (transaction, origination etc.)

balance	
integer <int64>
Total balance of the delegate (baker), including spendable and frozen funds (micro tez)

rollupBonds	
integer <int64>
Amount of tx rollup commitment bonds (micro tez)

smartRollupBonds	
integer <int64>
Amount of smart rollup commitment bonds (micro tez)

stakedBalance	
integer <int64>
Amount staked from the own balance (micro tez). Like delegated amount, except for it is frozen and can be slashed.

unstakedBalance	
integer <int64>
Amount that was unstaked, but not yet finalized (i.e. it is still frozen) (micro tez).

unstakedBaker	
Alias (object) Nullable
Information about the baker, for which there are pending unstake requests.

externalStakedBalance	
integer <int64>
Amount staked from external stakers (micro tez). Like delegated amount, except for it is frozen and can be slashed.

externalUnstakedBalance	
integer <int64>
Amount that was unstaked by external stakers, but not yet finalized (i.e. it is still frozen) (micro tez).

roundingError	
integer <int64>
Amount that was lost due to inconsistend rounding introduced in Oxford (micro tez).

totalStakedBalance	
integer <int64>
Total staked balance, which is stakedBalance + externalStakedBalance.

issuedPseudotokens	
string Nullable
Total amount of issued "pseudo-tokens". These pseudotokens are used for unstaking.

stakersCount	
integer <int32>
Number of external stakers.

frozenDepositLimit	
integer <int64> Nullable
Configured max amount allowed to be locked as a security deposit (micro tez)

limitOfStakingOverBaking	
integer <int64> Nullable
This parameter determines the maximum portion (millionth) of external stake by stakers over the baker's own staked funds.

edgeOfBakingOverStaking	
integer <int64> Nullable
This parameter determines the fraction (billionth) of the rewards that accrue to the baker's liquid spendable balance â€” the remainder accrues to frozen stakes.

counter	
integer <int32>
An account nonce which is used to prevent operation replay

activationLevel	
integer <int32>
Block height when delegate (baker) was registered as a baker last time

activationTime	
string <date-time>
Block datetime when delegate (baker) was registered as a baker last time (ISO 8601, e.g. 2019-11-31)

deactivationLevel	
integer <int32> Nullable
Block height when delegate (baker) was deactivated as a baker because of lack of funds or inactivity

deactivationTime	
string <date-time> Nullable
Block datetime when delegate (baker) was deactivated as a baker because of lack of funds or inactivity (ISO 8601, e.g. 2019-11-31)

stakingBalance	
integer <int64>
Baker's own balance plus delegated balance (micro tez)

delegatedBalance	
integer <int64>
Total amount delegated to the baker (micro tez)

numContracts	
integer <int32>
Number of contracts, created (originated) and/or managed by the delegate (baker)

rollupsCount	
integer <int32>
Number of tx rollups, created (originated) by the account

smartRollupsCount	
integer <int32>
Number of smart rollups, created (originated) by the account

activeTokensCount	
integer <int32>
Number of account tokens with non-zero balances

tokenBalancesCount	
integer <int32>
Number of tokens the account ever had

tokenTransfersCount	
integer <int32>
Number of token transfers from/to the account

activeTicketsCount	
integer <int32>
Number of tickets the account owns.

ticketBalancesCount	
integer <int32>
Number of tickets the account ever owned.

ticketTransfersCount	
integer <int32>
Number of ticket transfers from/to the account.

numDelegators	
integer <int32>
Number of current delegators (accounts, delegated their funds) of the delegate (baker)

numBlocks	
integer <int32>
Number of baked (validated) blocks all the time by the delegate (baker)

numAttestations	
integer <int32>
Number of given attestations (approvals) by the delegate (baker)

numPreattestations	
integer <int32>
Number of given preattestations (approvals) by the delegate (baker)

numBallots	
integer <int32>
Number of submitted by the delegate ballots during a voting period

numProposals	
integer <int32>
Number of submitted (upvoted) by the delegate proposals during a proposal period

numActivations	
integer <int32>
Number of account activation operations. Are used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundationâ€™s fundraiser

numDoubleBaking	
integer <int32>
Number of double baking (baking two different blocks at the same height) evidence operations, included in blocks, baked (validated) by the delegate

numDoubleConsensus	
integer <int32>
Number of double consensus (attestation or preattestation of two different blocks at the same block height) evidence operations, included in blocks, baked (validated) by the delegate

numNonceRevelations	
integer <int32>
Number of seed nonce revelation (are used by the blockchain to create randomness) operations provided by the delegate

vdfRevelationsCount	
integer <int32>
Number of vdf_revelation operations included into blocks by the delegate

numRevelationPenalties	
integer <int32>
Number of operations for all time in which rewards were lost due to unrevealed seed nonces by the delegate (synthetic type)

numAttestationRewards	
integer <int32>
Number of attestation rewards received at the end of cycles (synthetic type)

numDelegations	
integer <int32>
Number of all delegation related operations (new delegator, left delegator, registration as a baker), related to the delegate (baker)

numOriginations	
integer <int32>
Number of all origination (deployment / contract creation) operations, related to the delegate (baker)

numTransactions	
integer <int32>
Number of all transaction (tez transfer) operations, related to the delegate (baker)

numReveals	
integer <int32>
Number of reveal (is used to reveal the public key associated with an account) operations of the delegate (baker)

numRegisterConstants	
integer <int32>
Number of register global constant operations sent by the baker

numSetDepositsLimits	
integer <int32>
Number of set deposits limit operations sent by the baker

numMigrations	
integer <int32>
Number of migration (result of the context (database) migration during a protocol update) operations, related to the delegate (synthetic type)

txRollupOriginationCount	
integer <int32>
Number of tx rollup origination operations sent by the account

txRollupSubmitBatchCount	
integer <int32>
Number of tx rollup submit batch operations sent by the account

txRollupCommitCount	
integer <int32>
Number of tx rollup commit operations sent by the account

txRollupReturnBondCount	
integer <int32>
Number of tx rollup return bond operations sent by the account

txRollupFinalizeCommitmentCount	
integer <int32>
Number of tx rollup finalize commitment operations sent by the account

txRollupRemoveCommitmentCount	
integer <int32>
Number of tx rollup remove commitment operations sent by the account

txRollupRejectionCount	
integer <int32>
Number of tx rollup rejection operations sent by the account

txRollupDispatchTicketsCount	
integer <int32>
Number of tx rollup dispatch tickets operations sent by the account

transferTicketCount	
integer <int32>
Number of transfer ticket operations sent by the account

increasePaidStorageCount	
integer <int32>
Number of increase_paid_storage operations sent by the account

updateSecondaryKeyCount	
integer <int32>
Number of update_secondary_key operations sent by the account

drainDelegateCount	
integer <int32>
Number of drain_delegate operations related to the account

smartRollupAddMessagesCount	
integer <int32>
Number of smart_rollup_add_messages operations related to the account

smartRollupCementCount	
integer <int32>
Number of smart_rollup_cement operations related to the account

smartRollupExecuteCount	
integer <int32>
Number of smart_rollup_execute_outbox_message operations related to the account

smartRollupOriginateCount	
integer <int32>
Number of smart_rollup_originate operations related to the account

smartRollupPublishCount	
integer <int32>
Number of smart_rollup_publish operations related to the account

smartRollupRecoverBondCount	
integer <int32>
Number of smart_rollup_recover_bond operations related to the account

smartRollupRefuteCount	
integer <int32>
Number of smart_rollup_refute operations related to the account

refutationGamesCount	
integer <int32>
Number of smart rollup refutation games related to the account

activeRefutationGamesCount	
integer <int32>
Number of active smart rollup refutation games related to the account

stakingOpsCount	
integer <int32>
Number of staking operations related to the account

autostakingOpsCount	
integer <int32>
Number of autostaking operations related to the account

stakingUpdatesCount	
integer <int32>
Number of staking updates related to the account

setDelegateParametersOpsCount	
integer <int32>
Number of set delegate parameters operations related to the account

dalPublishCommitmentOpsCount	
integer <int32>
Number of DAL publish commitment operations related to the account

dalEntrapmentEvidenceOpsCount	
integer <int32>
Number of DAL entrapment evidences related to the account

dalAttestationRewardsCount	
integer <int32>
Number of DAL attestation rewards related to the account

firstActivity	
integer <int32>
Block height of the first operation, related to the delegate (baker)

firstActivityTime	
string <date-time>
Block datetime of the first operation, related to the delegate (ISO 8601, e.g. 2020-02-20T02:40:57Z)

lastActivity	
integer <int32>
Height of the block in which the account state was changed last time

lastActivityTime	
string <date-time>
Datetime of the block in which the account state was changed last time (ISO 8601, e.g. 2020-02-20T02:40:57Z)

extras	
any Nullable
Off-chain extras

software	
SoftwareAlias (object) Nullable
Last seen baker's software

updateConsensusKeyCount	
integer <int32>
DEPRECATED

numEndorsements	
integer <int32>
DEPRECATED

numPreendorsements	
integer <int32>
DEPRECATED

numDoubleEndorsing	
integer <int32>
DEPRECATED

numDoublePreendorsing	
integer <int32>
DEPRECATED

numEndorsingRewards	
integer <int32>
DEPRECATED


get
/v1/delegates/{address}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"id": 0,
"type": "string",
"address": "string",
"active": true,
"alias": "string",
"publicKey": "string",
"revealed": true,
"balance": 0,
"rollupBonds": 0,
"smartRollupBonds": 0,
"stakedBalance": 0,
"unstakedBalance": 0,
"unstakedBaker": {
"alias": "string",
"address": "string"
},
"externalStakedBalance": 0,
"externalUnstakedBalance": 0,
"roundingError": 0,
"totalStakedBalance": 0,
"issuedPseudotokens": "string",
"stakersCount": 0,
"frozenDepositLimit": 0,
"limitOfStakingOverBaking": 0,
"edgeOfBakingOverStaking": 0,
"counter": 0,
"activationLevel": 0,
"activationTime": "2019-08-24T14:15:22Z",
"deactivationLevel": 0,
"deactivationTime": "2019-08-24T14:15:22Z",
"stakingBalance": 0,
"delegatedBalance": 0,
"numContracts": 0,
"rollupsCount": 0,
"smartRollupsCount": 0,
"activeTokensCount": 0,
"tokenBalancesCount": 0,
"tokenTransfersCount": 0,
"activeTicketsCount": 0,
"ticketBalancesCount": 0,
"ticketTransfersCount": 0,
"numDelegators": 0,
"numBlocks": 0,
"numAttestations": 0,
"numPreattestations": 0,
"numBallots": 0,
"numProposals": 0,
"numActivations": 0,
"numDoubleBaking": 0,
"numDoubleConsensus": 0,
"numNonceRevelations": 0,
"vdfRevelationsCount": 0,
"numRevelationPenalties": 0,
"numAttestationRewards": 0,
"numDelegations": 0,
"numOriginations": 0,
"numTransactions": 0,
"numReveals": 0,
"numRegisterConstants": 0,
"numSetDepositsLimits": 0,
"numMigrations": 0,
"txRollupOriginationCount": 0,
"txRollupSubmitBatchCount": 0,
"txRollupCommitCount": 0,
"txRollupReturnBondCount": 0,
"txRollupFinalizeCommitmentCount": 0,
"txRollupRemoveCommitmentCount": 0,
"txRollupRejectionCount": 0,
"txRollupDispatchTicketsCount": 0,
"transferTicketCount": 0,
"increasePaidStorageCount": 0,
"updateSecondaryKeyCount": 0,
"drainDelegateCount": 0,
"smartRollupAddMessagesCount": 0,
"smartRollupCementCount": 0,
"smartRollupExecuteCount": 0,
"smartRollupOriginateCount": 0,
"smartRollupPublishCount": 0,
"smartRollupRecoverBondCount": 0,
"smartRollupRefuteCount": 0,
"refutationGamesCount": 0,
"activeRefutationGamesCount": 0,
"stakingOpsCount": 0,
"autostakingOpsCount": 0,
"stakingUpdatesCount": 0,
"setDelegateParametersOpsCount": 0,
"dalPublishCommitmentOpsCount": 0,
"dalEntrapmentEvidenceOpsCount": 0,
"dalAttestationRewardsCount": 0,
"firstActivity": 0,
"firstActivityTime": "2019-08-24T14:15:22Z",
"lastActivity": 0,
"lastActivityTime": "2019-08-24T14:15:22Z",
"extras": null,
"software": {
"version": "string",
"date": "2019-08-24T14:15:22Z"
},
"updateConsensusKeyCount": 0,
"numEndorsements": 0,
"numPreendorsements": 0,
"numDoubleEndorsing": 0,
"numDoublePreendorsing": 0,
"numEndorsingRewards": 0
}
Domains
Get domains count
Returns the total number of domains.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

name	
StringParameter (object) Nullable
Filter by the domain name.
Click on the parameter to expand more details.

owner	
AddressNullParameter (object) Nullable
Filter by the domain owner.
Click on the parameter to expand more details.

address	
AddressNullParameter (object) Nullable
Filter by the address the domain points to.
Click on the parameter to expand more details.

reverse	
BoolParameter (object) Nullable
Filter by the 'reverse' flag.
Click on the parameter to expand more details.

expiration	
DateTimeParameter (object) Nullable
Filter by the domain expiration.
Click on the parameter to expand more details.

data	
JsonParameter (object) Nullable
Filter by the domain data.
Note, this parameter supports the following format: data{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by (for example, ?data.foo=bar).
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the domain was first seen.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the domain was first seen.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the domain was last seen.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the domain was last seen.
Click on the parameter to expand more details.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/domains/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get domains
Returns a list of domains.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

name	
StringParameter (object) Nullable
Filter by the domain name.
Click on the parameter to expand more details.

owner	
AddressNullParameter (object) Nullable
Filter by the domain owner.
Click on the parameter to expand more details.

address	
AddressNullParameter (object) Nullable
Filter by the address the domain points to.
Click on the parameter to expand more details.

reverse	
BoolParameter (object) Nullable
Filter by the 'reverse' flag.
Click on the parameter to expand more details.

expiration	
DateTimeParameter (object) Nullable
Filter by the domain expiration.
Click on the parameter to expand more details.

data	
JsonParameter (object) Nullable
Filter by the domain data.
Note, this parameter supports the following format: data{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by (for example, ?data.foo=bar).
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the domain was first seen.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the domain was first seen.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the domain was last seen.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the domain was last seen.
Click on the parameter to expand more details.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal TzKT id.
[sortable]

level	
integer <int32>
Domain level (i.e. tez has level=1, domain.tez has level=2, subdomain.domain.tez has level=3, etc.).

name	
string
Domain record name.
[sortable]

owner	
Alias (object)
Owner of the domain.

address	
Alias (object) Nullable
Address the domain points to.

reverse	
boolean
Whether or not the domain is on the reverse records list

expiration	
string <date-time>
Expiration datetime

data	
any Nullable
Arbitrary data bound to the domain.

firstLevel	
integer <int32>
Level of the block where the domain was first seen.
[sortable]

firstTime	
string <date-time>
Timestamp of the block where the domain was first seen.

lastLevel	
integer <int32>
Level of the block where the domain was last seen.
[sortable]

lastTime	
string <date-time>
Timestamp of the block where the domain was last seen.


get
/v1/domains
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"level": 0,
"name": "string",
"owner": {},
"address": {},
"reverse": true,
"expiration": "2019-08-24T14:15:22Z",
"data": null,
"firstLevel": 0,
"firstTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"lastTime": "2019-08-24T14:15:22Z"
}
]
Get domain by name
Returns the domain with the specified name.

path Parameters
name
required
string
Domain name

Responses
200
Response Schema: application/json
id	
integer <int32>
Internal TzKT id.
[sortable]

level	
integer <int32>
Domain level (i.e. tez has level=1, domain.tez has level=2, subdomain.domain.tez has level=3, etc.).

name	
string
Domain record name.
[sortable]

owner	
Alias (object)
Owner of the domain.

address	
Alias (object) Nullable
Address the domain points to.

reverse	
boolean
Whether or not the domain is on the reverse records list

expiration	
string <date-time>
Expiration datetime

data	
any Nullable
Arbitrary data bound to the domain.

firstLevel	
integer <int32>
Level of the block where the domain was first seen.
[sortable]

firstTime	
string <date-time>
Timestamp of the block where the domain was first seen.

lastLevel	
integer <int32>
Level of the block where the domain was last seen.
[sortable]

lastTime	
string <date-time>
Timestamp of the block where the domain was last seen.


get
/v1/domains/{name}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"id": 0,
"level": 0,
"name": "string",
"owner": {
"alias": "string",
"address": "string"
},
"address": {
"alias": "string",
"address": "string"
},
"reverse": true,
"expiration": "2019-08-24T14:15:22Z",
"data": null,
"firstLevel": 0,
"firstTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"lastTime": "2019-08-24T14:15:22Z"
}
Events
Get contract events count
Returns a total number of contract events.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by level of the block where the event was emitted.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the event was emitted.
Click on the parameter to expand more details.

contract	
AccountParameter (object) Nullable
Filter by contract address.
Click on the parameter to expand more details.

codeHash	
Int32Parameter (object) Nullable
Filter by hash of the code of the contract emitted the event.
Click on the parameter to expand more details.

tag	
StringParameter (object) Nullable
Filter by event tag.
Click on the parameter to expand more details.

payload	
JsonParameter (object) Nullable
Filter by payload.
Note, this parameter supports the following format: payload{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by (for example, ?payload.foo.bar.in=1,2,3).
Click on the parameter to expand more details.

transactionId	
Int64Parameter (object) Nullable
Filter by id of the transaction, in which the event was emitted.
Click on the parameter to expand more details.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/contracts/events/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get contract events
Returns a list of contract events.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by level of the block where the event was emitted.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the event was emitted.
Click on the parameter to expand more details.

contract	
AccountParameter (object) Nullable
Filter by contract address.
Click on the parameter to expand more details.

codeHash	
Int32Parameter (object) Nullable
Filter by hash of the code of the contract emitted the event.
Click on the parameter to expand more details.

tag	
StringParameter (object) Nullable
Filter by event tag.
Click on the parameter to expand more details.

payload	
JsonParameter (object) Nullable
Filter by payload.
Note, this parameter supports the following format: payload{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by (for example, ?payload.foo.bar.in=1,2,3).
Click on the parameter to expand more details.

transactionId	
Int64Parameter (object) Nullable
Filter by id of the transaction, in which the event was emitted.
Click on the parameter to expand more details.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal TzKT id.
[sortable]

level	
integer <int32>
Level of the block, at which the event was emitted.
[sortable]

timestamp	
string <date-time>
Timestamp of the block, at which the event was emitted.

contract	
Alias (object)
Contract emitted the event.
Click on the field to expand more details.

codeHash	
integer <int32>
Hash of the contract code.

tag	
string Nullable
Event tag.

payload	
any Nullable
Event payload in human-readable JSON format.
[sortable]

transactionId	
integer <int64>
Internal TzKT id of the transaction operation, caused the event.

type	
any Nullable
Michelson type of the payload.
Must be explicitly selected

rawPayload	
any Nullable
Payload in raw Micheline format.
Must be explicitly selected


get
/v1/contracts/events
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"contract": {},
"codeHash": 0,
"tag": "string",
"payload": null,
"transactionId": 0,
"type": null,
"rawPayload": null
}
]
Head
Get indexer head
Returns indexer head and synchronization status.

Responses
200
Response Schema: application/json
chain	
string
Alias name of the chain (or "private" if it's not on the list of known chains)

chainId	
string
Unique identifier of the chain

cycle	
integer <int32>
Current cycle

level	
integer <int32>
The height of the last block from the genesis block

hash	
string
Block hash

protocol	
string
Current protocol hash

nextProtocol	
string
Next block protocol hash

timestamp	
string <date-time>
The datetime at which the last block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

votingEpoch	
integer <int32>
Current voting epoch index, starting from zero

votingPeriod	
integer <int32>
Current voting period index, starting from zero

knownLevel	
integer <int32>
The height of the last known block from the genesis block

lastSync	
string <date-time>
The datetime of last TzKT indexer synchronization (ISO 8601, e.g. 2020-02-20T02:40:57Z)

synced	
boolean
State of TzKT indexer synchronization

quoteLevel	
integer <int32>
The height of the block where quotes were updated last time

quoteBtc	
number <double>
Last known XTZ/BTC price

quoteEur	
number <double>
Last known XTZ/EUR price

quoteUsd	
number <double>
Last known XTZ/USD price

quoteCny	
number <double>
Last known XTZ/CNY price

quoteJpy	
number <double>
Last known XTZ/JPY price

quoteKrw	
number <double>
Last known XTZ/KRW price

quoteEth	
number <double>
Last known XTZ/ETH price

quoteGbp	
number <double>
Last known XTZ/GBP price


get
/v1/head
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"chain": "string",
"chainId": "string",
"cycle": 0,
"level": 0,
"hash": "string",
"protocol": "string",
"nextProtocol": "string",
"timestamp": "2019-08-24T14:15:22Z",
"votingEpoch": 0,
"votingPeriod": 0,
"knownLevel": 0,
"lastSync": "2019-08-24T14:15:22Z",
"synced": true,
"quoteLevel": 0,
"quoteBtc": 0,
"quoteEur": 0,
"quoteUsd": 0,
"quoteCny": 0,
"quoteJpy": 0,
"quoteKrw": 0,
"quoteEth": 0,
"quoteGbp": 0
}
Helpers
Inject operation
Injects signed operation to the blockchain and returns the operation hash.

query Parameters
async	
boolean
Default: true
If true, the function returns immediately. Otherwise, the operation will be validated before the result is returned.

Request Body schema: application/json
Forged operation bytes + signature in hex format.

string
Responses
200
Response Schema: application/json
string

post
/v1/helpers/inject
Request samples
Payload
Content type
application/json

Copy
Expand allCollapse all
"string"
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
"string"
Run script view
Simulate a call to a michelson view

path Parameters
contract
required
string
Contract address

name
required
string
View name

Request Body schema: application/json
Input to be passed to the contract view (in human-readable format, see "Json schema" on tzkt.io)

any
Responses
200
Response Schema: application/octet-stream
string <binary>

post
/v1/helpers/view/{contract}/{name}
Request samples
Payload
Content type
application/json

Copy
Expand allCollapse all
null
Operations
Get operations by hash
Returns a list of operations with the specified hash.
NOTE: if you know in advance what operation type you want to get (e.g. transactions), prefer using /v1/operations/{type}/{hash} (e.g. /v1/operations/transactions/{hash}) instead, because it's much more efficient.

path Parameters
hash
required
string
Operation hash

query Parameters
micheline	
MichelineFormat (string)
Default: "Json"
Format of the parameters, storage and diffs: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, autostaking

autostaking
id	
integer <int64>
Internal TzKT ID.
[sortable]

level	
integer <int32>
Height of the block from the genesis

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

baker	
Alias (object)
Baker for which autostaking event happened

action	
string
Autostaking action (stake, unstake, finalize)

amount	
integer <int64>
Amount (micro tez)

stakingUpdatesCount	
integer <int64>
Number of staking updates happened internally

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0
}
]
Get operations by hash and counter
Returns a list of operations with the specified hash and counter.
NOTE: if you know in advance what operation type you want to get (e.g. transactions), prefer using /v1/operations/{type}/{hash}/{counter} (e.g. /v1/operations/transactions/{hash}/{counter}) instead, because it's much more efficient.

path Parameters
hash
required
string
Operation hash

counter
required
integer <int32>
Operation counter

query Parameters
micheline	
MichelineFormat (string)
Default: "Json"
Format of the parameters, storage and diffs: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, autostaking

autostaking
id	
integer <int64>
Internal TzKT ID.
[sortable]

level	
integer <int32>
Height of the block from the genesis

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

baker	
Alias (object)
Baker for which autostaking event happened

action	
string
Autostaking action (stake, unstake, finalize)

amount	
integer <int64>
Amount (micro tez)

stakingUpdatesCount	
integer <int64>
Number of staking updates happened internally

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/{hash}/{counter}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0
}
]
Get operations by hash, counter and nonce
Returns an internal operations with the specified hash, counter and nonce.
NOTE: if you know in advance what operation type you want to get (e.g. transactions), prefer using /v1/operations/{type}/{hash}/{counter}/{nonce} (e.g. /v1/operations/transactions/{hash}/{counter}/{nonce}) instead, because it's much more efficient.

path Parameters
hash
required
string
Operation hash

counter
required
integer <int32>
Operation counter

nonce
required
integer <int32>
Operation nonce (internal)

query Parameters
micheline	
MichelineFormat (string)
Default: "Json"
Format of the parameters, storage and diffs: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, autostaking

autostaking
id	
integer <int64>
Internal TzKT ID.
[sortable]

level	
integer <int32>
Height of the block from the genesis

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

baker	
Alias (object)
Baker for which autostaking event happened

action	
string
Autostaking action (stake, unstake, finalize)

amount	
integer <int64>
Amount (micro tez)

stakingUpdatesCount	
integer <int64>
Number of staking updates happened internally

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/{hash}/{counter}/{nonce}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0
}
]
Get operation status
Returns operation status: true if applied, false if failed, null (or HTTP 204) if doesn't exist.
NOTE: if you know in advance what operation type you want to check (e.g. transactions), prefer using /v1/operations/{type}/{hash}/status (e.g. /v1/operations/transactions/{hash}/status) instead, because it's much more efficient.

path Parameters
hash
required
string
Operation hash

Responses
200
Response Schema: application/json
boolean Nullable

get
/v1/operations/{hash}/status
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
true
Get attestations
Returns a list of attestation operations.

query Parameters
delegate	
AccountParameter (object) Nullable
Filters attestations by delegate. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters attestations by level.

timestamp	
TimestampParameter (object) Nullable
Filters attestations by timestamp.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts attestations by specified field. Supported fields: id (default), level.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, attestation - is operation, which specifies the head of the chain as seen by the attester of a given slot. The attester is randomly selected to be included in the block that extends the head of the chain as specified in this operation. A block with more attestations improves the weight of the chain and increases the likelihood of that chain being the canonical one.

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

delegate	
Alias (object)
Information about the baker who sent the operation

slots	
integer <int32>
Number of assigned attestation slots to the baker who sent the operation

deposit	
integer <int64>
Security deposit frozen on the baker's account

rewards	
integer <int64>
Reward of the baker for the operation

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/attestations
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"delegate": {},
"slots": 0,
"deposit": 0,
"rewards": 0,
"quote": {}
}
]
Get attestation by hash
Returns an attestation operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, attestation - is operation, which specifies the head of the chain as seen by the attester of a given slot. The attester is randomly selected to be included in the block that extends the head of the chain as specified in this operation. A block with more attestations improves the weight of the chain and increases the likelihood of that chain being the canonical one.

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

delegate	
Alias (object)
Information about the baker who sent the operation

slots	
integer <int32>
Number of assigned attestation slots to the baker who sent the operation

deposit	
integer <int64>
Security deposit frozen on the baker's account

rewards	
integer <int64>
Reward of the baker for the operation

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/attestations/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"delegate": {},
"slots": 0,
"deposit": 0,
"rewards": 0,
"quote": {}
}
]
Get attestations count
Returns the total number of attestation operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters attestations by level.

timestamp	
TimestampParameter (object) Nullable
Filters attestations by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/attestations/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get preattestations
Returns a list of preattestation operations.

query Parameters
delegate	
AccountParameter (object) Nullable
Filters by delegate. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts by specified field. Supported fields: id (default), level.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, preattestation

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

delegate	
Alias (object)
Information about the baker who sent the operation

slots	
integer <int32>
Number of assigned attestation slots to the baker who sent the operation

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/preattestations
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"delegate": {},
"slots": 0,
"quote": {}
}
]
Get preattestation by hash
Returns an preattestation operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, preattestation

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

delegate	
Alias (object)
Information about the baker who sent the operation

slots	
integer <int32>
Number of assigned attestation slots to the baker who sent the operation

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/preattestations/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"delegate": {},
"slots": 0,
"quote": {}
}
]
Get preattestations count
Returns the total number of preattestation operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/preattestations/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get ballots
Returns a list of ballot operations.

query Parameters
delegate	
AccountParameter (object) Nullable
Filters ballots by delegate. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters ballots by level.

timestamp	
TimestampParameter (object) Nullable
Filters ballots by timestamp.

epoch	
Int32Parameter (object) Nullable
Filters ballots by voting epoch.

period	
Int32Parameter (object) Nullable
Filters ballots by voting period.

proposal	
ProtocolParameter (object) Nullable
Filters ballots by proposal hash.

vote	
VoteParameter (object) Nullable
Filters ballots by vote (yay, nay, pass).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts ballots by specified field. Supported fields: id (default), level.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, ballot - is used to vote for a proposal in a given voting cycle

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

period	
PeriodInfo (object)
Information about the voting period for which the ballot was submitted

proposal	
ProposalAlias (object)
Information about the proposal for which ballot was submitted

delegate	
Alias (object)
Information about the delegate (baker), submitted the ballot

votingPower	
integer <int64>
Baker's voting power

vote	
string
Vote, given in the ballot (yay, nay, or pass)

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/ballots
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"period": {},
"proposal": {},
"delegate": {},
"votingPower": 0,
"vote": "string",
"quote": {}
}
]
Get ballot by hash
Returns a ballot operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, ballot - is used to vote for a proposal in a given voting cycle

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

period	
PeriodInfo (object)
Information about the voting period for which the ballot was submitted

proposal	
ProposalAlias (object)
Information about the proposal for which ballot was submitted

delegate	
Alias (object)
Information about the delegate (baker), submitted the ballot

votingPower	
integer <int64>
Baker's voting power

vote	
string
Vote, given in the ballot (yay, nay, or pass)

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/ballots/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"period": {},
"proposal": {},
"delegate": {},
"votingPower": 0,
"vote": "string",
"quote": {}
}
]
Get ballots count
Returns the total number of ballot operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters ballot operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters ballot operations by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/ballots/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get proposals
Returns a list of proposal operations.

query Parameters
delegate	
AccountParameter (object) Nullable
Filters proposal operations by delegate. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters proposal operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters proposal operations by timestamp.

epoch	
Int32Parameter (object) Nullable
Filters proposal operations by voting epoch.

period	
Int32Parameter (object) Nullable
Filters proposal operations by voting period.

proposal	
ProtocolParameter (object) Nullable
Filters proposal operations by proposal hash.

duplicated	
BoolParameter (object) Nullable
Specify whether to include or exclude duplicates, which didn't actually upvote a proposal.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts proposal operations by specified field. Supported fields: id (default), level.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, proposal - is used by bakers (delegates) to submit and/or upvote proposals to amend the protocol

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

period	
PeriodInfo (object)
Information about the proposal period for which the proposal was submitted (upvoted)

proposal	
ProposalAlias (object)
Information about the submitted (upvoted) proposal

delegate	
Alias (object)
Information about the baker (delegate), submitted (upvoted) the proposal operation

votingPower	
integer <int64>
Baker's voting power

duplicated	
boolean
Indicates whether proposal upvote has already been pushed. Duplicated proposal operations are not counted when selecting proposal-winner.

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/proposals
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"period": {},
"proposal": {},
"delegate": {},
"votingPower": 0,
"duplicated": true,
"quote": {}
}
]
Get proposal by hash
Returns a proposal operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, proposal - is used by bakers (delegates) to submit and/or upvote proposals to amend the protocol

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

period	
PeriodInfo (object)
Information about the proposal period for which the proposal was submitted (upvoted)

proposal	
ProposalAlias (object)
Information about the submitted (upvoted) proposal

delegate	
Alias (object)
Information about the baker (delegate), submitted (upvoted) the proposal operation

votingPower	
integer <int64>
Baker's voting power

duplicated	
boolean
Indicates whether proposal upvote has already been pushed. Duplicated proposal operations are not counted when selecting proposal-winner.

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/proposals/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"period": {},
"proposal": {},
"delegate": {},
"votingPower": 0,
"duplicated": true,
"quote": {}
}
]
Get proposals count
Returns the total number of proposal operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters proposal operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters proposal operations by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/proposals/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get activations
Returns a list of activation operations.

query Parameters
account	
AccountParameter (object) Nullable
Filters activations by account. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters activations by level.

timestamp	
TimestampParameter (object) Nullable
Filters activations by timestamp.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts activations by specified field. Supported fields: id (default), level, balance.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, activation - is used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundationâ€™s fundraiser.

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block, from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

account	
Alias (object)
Information about activated account

balance	
integer <int64>
Account activation balance of tezos tokens that were recommended allocations for donations to the Tezos Foundationâ€™s fundraiser

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/activations
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"account": {},
"balance": 0,
"quote": {}
}
]
Get activation by hash
Returns an activation operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, activation - is used to activate accounts that were recommended allocations of tezos tokens for donations to the Tezos Foundationâ€™s fundraiser.

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block, from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

account	
Alias (object)
Information about activated account

balance	
integer <int64>
Account activation balance of tezos tokens that were recommended allocations for donations to the Tezos Foundationâ€™s fundraiser

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/activations/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"account": {},
"balance": 0,
"quote": {}
}
]
Get activations count
Returns the total number of activation operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters activations by level.

timestamp	
TimestampParameter (object) Nullable
Filters activations by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/activations/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get dal entrapment evidences
Returns a list of dal entrapment evidence operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filters by any of the specified fields. Example: anyof.accuser.offender=tz1... will return operations where accuser OR offender is equal to the specified value. This parameter is useful when you need to retrieve all operations associated with a specified account.

accuser	
AccountParameter (object) Nullable
Filters by accuser. Allowed fields for .eqx mode: offender.

offender	
AccountParameter (object) Nullable
Filters by offender. Allowed fields for .eqx mode: accuser.

id	
Int64Parameter (object) Nullable
Filters operations by internal TzKT id.

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts by specified field. Supported fields: id (default), level, trapLevel.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, dal_entrapment_evidence

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

accuser	
Alias (object)
Information about the baker, produced the block, in which the evidence was included

offender	
Alias (object)
Information about the baker, accused for attesting trapped shard

trapLevel	
integer <int32>
Height of the block from the genesis, where the trap was attested

trapSlotIndex	
integer <int32>
Trap slot index

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/dal_entrapment_evidence
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"accuser": {},
"offender": {},
"trapLevel": 0,
"trapSlotIndex": 0,
"quote": {}
}
]
Get dal entrapment evidence by hash
Returns dal entrapment evidence operations with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, dal_entrapment_evidence

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

accuser	
Alias (object)
Information about the baker, produced the block, in which the evidence was included

offender	
Alias (object)
Information about the baker, accused for attesting trapped shard

trapLevel	
integer <int32>
Height of the block from the genesis, where the trap was attested

trapSlotIndex	
integer <int32>
Trap slot index

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/dal_entrapment_evidence/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"accuser": {},
"offender": {},
"trapLevel": 0,
"trapSlotIndex": 0,
"quote": {}
}
]
Get dal entrapment evidences count
Returns the total number of dal entrapment evidence operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/dal_entrapment_evidence/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get double baking
Returns a list of double baking operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filters double baking operations by any of the specified fields. Example: anyof.accuser.offender=tz1... will return operations where accuser OR offender is equal to the specified value. This parameter is useful when you need to retrieve all operations associated with a specified account.

accuser	
AccountParameter (object) Nullable
Filters double baking operations by accuser. Allowed fields for .eqx mode: offender.

offender	
AccountParameter (object) Nullable
Filters double baking operations by offender. Allowed fields for .eqx mode: accuser.

id	
Int64Parameter (object) Nullable
Filters operations by internal TzKT id.

level	
Int32Parameter (object) Nullable
Filters double baking operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters double baking operations by timestamp.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts double baking operations by specified field. Supported fields: id (default), level, accusedLevel, accuserRewards, offenderLostDeposits, offenderLostRewards, offenderLostFees.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, double_baking - is used by bakers to provide evidence of double baking (baking two different blocks at the same height) by a baker

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
Height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

accusedLevel	
integer <int32>
Height of the block from the genesis, which was double baked

slashedLevel	
integer <int32>
Height of the block from the genesis, at which the offender was slashed

accuser	
Alias (object)
Information about the baker, produced the block, in which the accusation was included

reward	
integer <int64>
Reward of the baker, produced the block, in which the accusation was included

offender	
Alias (object)
Information about the baker, accused for producing two different blocks at the same level

lostStaked	
integer <int64>
Amount slashed from baker's own staked balance

lostUnstaked	
integer <int64>
Amount slashed from baker's own unstaked balance

lostExternalStaked	
integer <int64>
Amount slashed from baker's external staked balance

lostExternalUnstaked	
integer <int64>
Amount slashed from baker's external unstaked balance

stakingUpdatesCount	
integer <int32> Nullable
Number of staking updates happened internally

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/double_baking
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"accusedLevel": 0,
"slashedLevel": 0,
"accuser": {},
"reward": 0,
"offender": {},
"lostStaked": 0,
"lostUnstaked": 0,
"lostExternalStaked": 0,
"lostExternalUnstaked": 0,
"stakingUpdatesCount": 0,
"quote": {}
}
]
Get double baking by hash
Returns a double baking operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, double_baking - is used by bakers to provide evidence of double baking (baking two different blocks at the same height) by a baker

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
Height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

accusedLevel	
integer <int32>
Height of the block from the genesis, which was double baked

slashedLevel	
integer <int32>
Height of the block from the genesis, at which the offender was slashed

accuser	
Alias (object)
Information about the baker, produced the block, in which the accusation was included

reward	
integer <int64>
Reward of the baker, produced the block, in which the accusation was included

offender	
Alias (object)
Information about the baker, accused for producing two different blocks at the same level

lostStaked	
integer <int64>
Amount slashed from baker's own staked balance

lostUnstaked	
integer <int64>
Amount slashed from baker's own unstaked balance

lostExternalStaked	
integer <int64>
Amount slashed from baker's external staked balance

lostExternalUnstaked	
integer <int64>
Amount slashed from baker's external unstaked balance

stakingUpdatesCount	
integer <int32> Nullable
Number of staking updates happened internally

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/double_baking/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"accusedLevel": 0,
"slashedLevel": 0,
"accuser": {},
"reward": 0,
"offender": {},
"lostStaked": 0,
"lostUnstaked": 0,
"lostExternalStaked": 0,
"lostExternalUnstaked": 0,
"stakingUpdatesCount": 0,
"quote": {}
}
]
Get double baking count
Returns the total number of double baking operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters double baking operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters double baking operations by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/double_baking/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get double consensus
Returns a list of double consensus operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filter by any of the specified fields. Example: anyof.accuser.offender=tz1... will return operations where accuser OR offender is equal to the specified value. This parameter is useful when you need to retrieve all operations associated with a specified account.

accuser	
AccountParameter (object) Nullable
Filter by accuser. Allowed fields for .eqx mode: offender.

offender	
AccountParameter (object) Nullable
Filter by offender. Allowed fields for .eqx mode: accuser.

id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.

kind	
DoubleConsensusKindParameter (object) Nullable
Filter by misbehaviour kind (double_attestation or double_preattestation).

level	
Int32Parameter (object) Nullable
Filter by level.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sort by specified field. Supported fields: id (default), level, accusedLevel, accuserRewards, offenderLostDeposits, offenderLostRewards, offenderLostFees.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, double_consensus - is used by bakers to provide evidence of double (pre)attestation ((pre)attestation of two different blocks at the same block height) by a baker

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
Height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

accusedLevel	
integer <int32>
Height of the block from the genesis, at which double (pre)attestation occurred

slashedLevel	
integer <int32>
Height of the block from the genesis, at which the offender was slashed

kind	
string
Kind of misbehaviour (double_attestation or double_preattestation)

accuser	
Alias (object)
Information about the baker, produced the block, in which the accusation was included

reward	
integer <int64>
Reward of the baker, produced the block, in which the accusation was included

offender	
Alias (object)
Information about the baker, accused for producing two different attestations at the same level

lostStaked	
integer <int64>
Amount slashed from baker's own staked balance

lostUnstaked	
integer <int64>
Amount slashed from baker's own unstaked balance

lostExternalStaked	
integer <int64>
Amount slashed from baker's external staked balance

lostExternalUnstaked	
integer <int64>
Amount slashed from baker's external unstaked balance

stakingUpdatesCount	
integer <int32> Nullable
Number of staking updates happened internally

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/double_consensus
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"accusedLevel": 0,
"slashedLevel": 0,
"kind": "string",
"accuser": {},
"reward": 0,
"offender": {},
"lostStaked": 0,
"lostUnstaked": 0,
"lostExternalStaked": 0,
"lostExternalUnstaked": 0,
"stakingUpdatesCount": 0,
"quote": {}
}
]
Get double consensus by hash
Returns a double consensus operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, double_consensus - is used by bakers to provide evidence of double (pre)attestation ((pre)attestation of two different blocks at the same block height) by a baker

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
Height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

accusedLevel	
integer <int32>
Height of the block from the genesis, at which double (pre)attestation occurred

slashedLevel	
integer <int32>
Height of the block from the genesis, at which the offender was slashed

kind	
string
Kind of misbehaviour (double_attestation or double_preattestation)

accuser	
Alias (object)
Information about the baker, produced the block, in which the accusation was included

reward	
integer <int64>
Reward of the baker, produced the block, in which the accusation was included

offender	
Alias (object)
Information about the baker, accused for producing two different attestations at the same level

lostStaked	
integer <int64>
Amount slashed from baker's own staked balance

lostUnstaked	
integer <int64>
Amount slashed from baker's own unstaked balance

lostExternalStaked	
integer <int64>
Amount slashed from baker's external staked balance

lostExternalUnstaked	
integer <int64>
Amount slashed from baker's external unstaked balance

stakingUpdatesCount	
integer <int32> Nullable
Number of staking updates happened internally

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/double_consensus/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"accusedLevel": 0,
"slashedLevel": 0,
"kind": "string",
"accuser": {},
"reward": 0,
"offender": {},
"lostStaked": 0,
"lostUnstaked": 0,
"lostExternalStaked": 0,
"lostExternalUnstaked": 0,
"stakingUpdatesCount": 0,
"quote": {}
}
]
Get double consensus count
Returns the total number of double consensus operations.

query Parameters
kind	
DoubleConsensusKindParameter (object) Nullable
Filter by misbehaviour kind (double_attestation or double_preattestation).

level	
Int32Parameter (object) Nullable
Filter by level.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/double_consensus/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get nonce revelations
Returns a list of seed nonce revelation operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filters nonce revelation operations by any of the specified fields. Example: anyof.baker.sender=tz1... will return operations where baker OR sender is equal to the specified value. This parameter is useful when you need to retrieve all operations associated with a specified account.

baker	
AccountParameter (object) Nullable
Filters nonce revelation operations by baker. Allowed fields for .eqx mode: sender.

sender	
AccountParameter (object) Nullable
Filters nonce revelation operations by sender. Allowed fields for .eqx mode: baker.

level	
Int32Parameter (object) Nullable
Filters nonce revelation operations by level.

revealedCycle	
Int32Parameter (object) Nullable
Filters by cycle for which the nonce was revealed.

timestamp	
TimestampParameter (object) Nullable
Filters nonce revelation operations by timestamp.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts nonce revelation operations by specified field. Supported fields: id (default), level, revealedLevel.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, nonce_revelation - are used by the blockchain to create randomness

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

baker	
Alias (object)
Information about the delegate (baker), who produced the block with the operation

sender	
Alias (object)
Information about the delegate (baker), who revealed the nonce (sent the operation)

revealedLevel	
integer <int32>
Block height of the block, where seed nonce hash is stored

revealedCycle	
integer <int32>
Cycle for which seed nonce was revealed

nonce	
string
Seed nonce hex

rewardDelegated	
integer <int64>
Reward, corresponding to delegated stake, paid to baker's liquid balance (micro tez) (it is not frozen and can be spent immediately).

rewardStakedOwn	
integer <int64>
Reward, corresponding to baker's own stake, paid to baker's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedEdge	
integer <int64>
Reward, corresponding to baker's edge from external stake, paid to baker's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedShared	
integer <int64>
Reward, corresponding to baker's external stake, paid to baker's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/nonce_revelations
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"baker": {},
"sender": {},
"revealedLevel": 0,
"revealedCycle": 0,
"nonce": "string",
"rewardDelegated": 0,
"rewardStakedOwn": 0,
"rewardStakedEdge": 0,
"rewardStakedShared": 0,
"quote": {}
}
]
Get nonce revelation by hash
Returns a seed nonce revelation operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, nonce_revelation - are used by the blockchain to create randomness

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

baker	
Alias (object)
Information about the delegate (baker), who produced the block with the operation

sender	
Alias (object)
Information about the delegate (baker), who revealed the nonce (sent the operation)

revealedLevel	
integer <int32>
Block height of the block, where seed nonce hash is stored

revealedCycle	
integer <int32>
Cycle for which seed nonce was revealed

nonce	
string
Seed nonce hex

rewardDelegated	
integer <int64>
Reward, corresponding to delegated stake, paid to baker's liquid balance (micro tez) (it is not frozen and can be spent immediately).

rewardStakedOwn	
integer <int64>
Reward, corresponding to baker's own stake, paid to baker's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedEdge	
integer <int64>
Reward, corresponding to baker's edge from external stake, paid to baker's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedShared	
integer <int64>
Reward, corresponding to baker's external stake, paid to baker's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/nonce_revelations/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"baker": {},
"sender": {},
"revealedLevel": 0,
"revealedCycle": 0,
"nonce": "string",
"rewardDelegated": 0,
"rewardStakedOwn": 0,
"rewardStakedEdge": 0,
"rewardStakedShared": 0,
"quote": {}
}
]
Get nonce revelations count
Returns the total number of seed nonce revelation operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters seed nonce revelation operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters seed nonce revelation operations by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/nonce_revelations/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get vdf revelations
Returns a list of vdf revelation operations.

query Parameters
baker	
AccountParameter (object) Nullable
Filters by baker. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters by level.

cycle	
Int32Parameter (object) Nullable
Filters by cycle in which the operation was included.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts by specified field. Supported fields: id (default), level.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, vdf_revelation - used by the blockchain to create randomness

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

baker	
Alias (object)
Information about the delegate (baker), who produced the block with the operation

cycle	
integer <int32>
Cycle in which the operation was included

solution	
string
Vdf solution

proof	
string
Vdf proof

rewardDelegated	
integer <int64>
Reward, corresponding to delegated stake, paid to baker's liquid balance (micro tez) (it is not frozen and can be spent immediately).

rewardStakedOwn	
integer <int64>
Reward, corresponding to baker's own stake, paid to baker's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedEdge	
integer <int64>
Reward, corresponding to baker's edge from external stake, paid to baker's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedShared	
integer <int64>
Reward, corresponding to baker's external stake, paid to baker's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/vdf_revelations
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"baker": {},
"cycle": 0,
"solution": "string",
"proof": "string",
"rewardDelegated": 0,
"rewardStakedOwn": 0,
"rewardStakedEdge": 0,
"rewardStakedShared": 0,
"quote": {}
}
]
Get vdf revelation by hash
Returns a vdf revelation operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, vdf_revelation - used by the blockchain to create randomness

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

baker	
Alias (object)
Information about the delegate (baker), who produced the block with the operation

cycle	
integer <int32>
Cycle in which the operation was included

solution	
string
Vdf solution

proof	
string
Vdf proof

rewardDelegated	
integer <int64>
Reward, corresponding to delegated stake, paid to baker's liquid balance (micro tez) (it is not frozen and can be spent immediately).

rewardStakedOwn	
integer <int64>
Reward, corresponding to baker's own stake, paid to baker's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedEdge	
integer <int64>
Reward, corresponding to baker's edge from external stake, paid to baker's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedShared	
integer <int64>
Reward, corresponding to baker's external stake, paid to baker's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/vdf_revelations/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"baker": {},
"cycle": 0,
"solution": "string",
"proof": "string",
"rewardDelegated": 0,
"rewardStakedOwn": 0,
"rewardStakedEdge": 0,
"rewardStakedShared": 0,
"quote": {}
}
]
Get vdf revelations count
Returns the total number of vdf revelation operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/vdf_revelations/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get drain delegate
Returns a list of drain delegate operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filters by any of the specified fields. Example: anyof.delegate.target=tz1... will return operations where delegate OR target is equal to the specified value. This parameter is useful when you need to retrieve all operations associated with a specified account.

delegate	
AccountParameter (object) Nullable
Filters by drained baker. Allowed fields for .eqx mode: none.

target	
AccountParameter (object) Nullable
Filters by target. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts by specified field. Supported fields: id (default), level.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, drain_delegate

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

delegate	
Alias (object)
Information about the drained delegate

target	
Alias (object)
Information about the recipient account

amount	
integer <int64>
Amount sent from the drained baker to the target

fee	
integer <int64>
Amount sent from the drained baker to the block baker

allocationFee	
integer <int64>
The amount of funds burned from the drained baker for account creation (micro tez)

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/drain_delegate
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"delegate": {},
"target": {},
"amount": 0,
"fee": 0,
"allocationFee": 0,
"quote": {}
}
]
Get drain delegate by hash
Returns a drain delegate operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, drain_delegate

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

delegate	
Alias (object)
Information about the drained delegate

target	
Alias (object)
Information about the recipient account

amount	
integer <int64>
Amount sent from the drained baker to the target

fee	
integer <int64>
Amount sent from the drained baker to the block baker

allocationFee	
integer <int64>
The amount of funds burned from the drained baker for account creation (micro tez)

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/drain_delegate/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"delegate": {},
"target": {},
"amount": 0,
"fee": 0,
"allocationFee": 0,
"quote": {}
}
]
Get drain delegate count
Returns the total number of drain delegate operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/drain_delegate/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get delegations
Returns a list of delegation operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filters delegations by any of the specified fields. Example: anyof.prevDelegate.newDelegate=tz1... will return operations where prevDelegate OR newDelegate is equal to the specified value. This parameter is useful when you need to retrieve all delegations associated with a specified account.

initiator	
AccountParameter (object) Nullable
Filters delegations by initiator. Allowed fields for .eqx mode: prevDelegate, newDelegate.

sender	
AccountParameter (object) Nullable
Filters delegations by sender. Allowed fields for .eqx mode: prevDelegate, newDelegate.

prevDelegate	
AccountParameter (object) Nullable
Filters delegations by prev delegate. Allowed fields for .eqx mode: initiator, sender, newDelegate.

newDelegate	
AccountParameter (object) Nullable
Filters delegations by new delegate. Allowed fields for .eqx mode: initiator, sender, prevDelegate.

id	
Int64Parameter (object) Nullable
Filters operations by internal TzKT id.

level	
Int32Parameter (object) Nullable
Filters delegations by level.

timestamp	
TimestampParameter (object) Nullable
Filters delegations by timestamp.

senderCodeHash	
Int32Parameter (object) Nullable
Filters by senderCodeHash.

status	
OperationStatusParameter (object) Nullable
Filters delegations by operation status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts delegations by specified field. Supported fields: id (default), level, gasUsed, bakerFee.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, delegation - is used to delegate funds to a delegate (an implicit account registered as a baker)

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

initiator	
Alias (object) Nullable
Information about the initiator of the delegation contract call

sender	
Alias (object)
Information about the delegated account

senderCodeHash	
integer <int32> Nullable
Hash of the sender contract code, or null is the sender is not a contract

nonce	
integer <int32> Nullable
An account nonce which is used to prevent internal operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to a baker, produced block, in which the operation was included

amount	
integer <int64>
Sender's balance at the time of delegation operation (aka delegation amount).

stakingUpdatesCount	
integer <int32> Nullable
Number of staking updates happened internally

prevDelegate	
Alias (object) Nullable
Information about the previous delegate of the account. null if there is no previous delegate

newDelegate	
Alias (object) Nullable
Information about the delegate to which the operation was sent. null if there is no new delegate (an un-delegation operation)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/delegations
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"counter": 0,
"initiator": {},
"sender": {},
"senderCodeHash": 0,
"nonce": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"amount": 0,
"stakingUpdatesCount": 0,
"prevDelegate": {},
"newDelegate": {},
"status": "string",
"errors": [],
"quote": {}
}
]
Get delegation by hash
Returns a delegation operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, delegation - is used to delegate funds to a delegate (an implicit account registered as a baker)

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

initiator	
Alias (object) Nullable
Information about the initiator of the delegation contract call

sender	
Alias (object)
Information about the delegated account

senderCodeHash	
integer <int32> Nullable
Hash of the sender contract code, or null is the sender is not a contract

nonce	
integer <int32> Nullable
An account nonce which is used to prevent internal operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to a baker, produced block, in which the operation was included

amount	
integer <int64>
Sender's balance at the time of delegation operation (aka delegation amount).

stakingUpdatesCount	
integer <int32> Nullable
Number of staking updates happened internally

prevDelegate	
Alias (object) Nullable
Information about the previous delegate of the account. null if there is no previous delegate

newDelegate	
Alias (object) Nullable
Information about the delegate to which the operation was sent. null if there is no new delegate (an un-delegation operation)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/delegations/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"counter": 0,
"initiator": {},
"sender": {},
"senderCodeHash": 0,
"nonce": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"amount": 0,
"stakingUpdatesCount": 0,
"prevDelegate": {},
"newDelegate": {},
"status": "string",
"errors": [],
"quote": {}
}
]
Get delegation status
Returns operation status: true if applied, false if failed, null (or HTTP 204) if doesn't exist.

path Parameters
hash
required
string
Operation hash

Responses
200
Response Schema: application/json
boolean Nullable

get
/v1/operations/delegations/{hash}/status
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
true
Get delegations count
Returns the total number of delegation operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters delegations by level.

timestamp	
TimestampParameter (object) Nullable
Filters delegations by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/delegations/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get originations
Returns a list of origination operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filters originations by any of the specified fields. Example: anyof.sender.initiator=tz1... will return operations where sender OR initiator is equal to the specified value. This parameter is useful when you need to retrieve all originations associated with a specified account.

initiator	
AccountParameter (object) Nullable
Filters origination operations by initiator. Allowed fields for .eqx mode: contractDelegate.

sender	
AccountParameter (object) Nullable
Filters origination operations by sender. Allowed fields for .eqx mode: contractDelegate.

contractDelegate	
AccountParameter (object) Nullable
Filters origination operations by delegate. Allowed fields for .eqx mode: initiator, sender.

originatedContract	
AccountParameter (object) Nullable
Filters origination operations by originated contract. Allowed fields for .eqx mode: none.

id	
Int64Parameter (object) Nullable
Filters origination operations by internal TzKT id

typeHash	
Int32Parameter (object) Nullable
Filters origination operations by 32-bit hash of originated contract parameter and storage types (helpful for searching originations of similar contracts)

codeHash	
Int32Parameter (object) Nullable
Filters origination operations by 32-bit hash of originated contract code (helpful for searching originations of same contracts)

level	
Int32Parameter (object) Nullable
Filters origination operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters origination operations by timestamp.

senderCodeHash	
Int32Parameter (object) Nullable
Filters by senderCodeHash.

anyCodeHash	
Int32Parameter (object) Nullable
Filters by either senderCodeHash or codeHash.

status	
OperationStatusParameter (object) Nullable
Filters origination operations by operation status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts originations by specified field. Supported fields: id (default), level, gasUsed, storageUsed, bakerFee, storageFee, allocationFee, contractBalance.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

micheline	
MichelineFormat (string)
Default: "Json"
Format of the parameters, storage and diffs: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, origination - deployment / contract creation operation.

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

initiator	
Alias (object) Nullable
Information about the initiator of the contract call

sender	
Alias (object)
Information about the account, created a contract

senderCodeHash	
integer <int32> Nullable
Hash of the sender contract code, or null is the sender is not a contract

nonce	
integer <int32> Nullable
An account nonce which is used to prevent internal operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for contract storage in the blockchain (micro tez)

allocationFee	
integer <int64>
The amount of funds burned from the sender account for contract account creation (micro tez)

contractBalance	
integer <int64>
The contract origination balance (micro tez)

contractDelegate	
Alias (object) Nullable
Information about the baker (delegate), which was marked as a delegate in the operation

code	
any Nullable
Contract code. Note: you can configure code format by setting micheline query parameter (0 | 2 - raw micheline, 1 | 3 - raw micheline string).

storage	
any Nullable
Initial contract storage value converted to human-readable JSON. Note: you can configure storage format by setting micheline query parameter.

diffs	
Array of objects (BigMapDiff) Nullable
List of bigmap updates (aka big_map_diffs) caused by the origination.

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was a successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

originatedContract	
OriginatedContract (object) Nullable
Information about the originated ( deployed / created ) contract

tokenTransfersCount	
integer <int32> Nullable
Number of token transfers produced by the operation, or null if there are no transfers

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/originations
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"counter": 0,
"initiator": {},
"sender": {},
"senderCodeHash": 0,
"nonce": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"allocationFee": 0,
"contractBalance": 0,
"contractDelegate": {},
"code": null,
"storage": null,
"diffs": [],
"status": "string",
"errors": [],
"originatedContract": {},
"tokenTransfersCount": 0,
"quote": {}
}
]
Get origination by hash
Returns origination operations with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
micheline	
string (MichelineFormat)
Enum: "Json" "JsonString" "Raw" "RawString"
Format of the parameters, storage and diffs: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, origination - deployment / contract creation operation.

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

initiator	
Alias (object) Nullable
Information about the initiator of the contract call

sender	
Alias (object)
Information about the account, created a contract

senderCodeHash	
integer <int32> Nullable
Hash of the sender contract code, or null is the sender is not a contract

nonce	
integer <int32> Nullable
An account nonce which is used to prevent internal operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for contract storage in the blockchain (micro tez)

allocationFee	
integer <int64>
The amount of funds burned from the sender account for contract account creation (micro tez)

contractBalance	
integer <int64>
The contract origination balance (micro tez)

contractDelegate	
Alias (object) Nullable
Information about the baker (delegate), which was marked as a delegate in the operation

code	
any Nullable
Contract code. Note: you can configure code format by setting micheline query parameter (0 | 2 - raw micheline, 1 | 3 - raw micheline string).

storage	
any Nullable
Initial contract storage value converted to human-readable JSON. Note: you can configure storage format by setting micheline query parameter.

diffs	
Array of objects (BigMapDiff) Nullable
List of bigmap updates (aka big_map_diffs) caused by the origination.

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was a successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

originatedContract	
OriginatedContract (object) Nullable
Information about the originated ( deployed / created ) contract

tokenTransfersCount	
integer <int32> Nullable
Number of token transfers produced by the operation, or null if there are no transfers

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/originations/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"counter": 0,
"initiator": {},
"sender": {},
"senderCodeHash": 0,
"nonce": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"allocationFee": 0,
"contractBalance": 0,
"contractDelegate": {},
"code": null,
"storage": null,
"diffs": [],
"status": "string",
"errors": [],
"originatedContract": {},
"tokenTransfersCount": 0,
"quote": {}
}
]
Get origination status
Returns operation status: true if applied, false if failed, null (or HTTP 204) if doesn't exist.

path Parameters
hash
required
string
Operation hash

Responses
200
Response Schema: application/json
boolean Nullable

get
/v1/operations/originations/{hash}/status
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
true
Get originations count
Returns the total number of origination operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters originations by level.

timestamp	
TimestampParameter (object) Nullable
Filters originations by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/originations/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get transactions
Returns a list of transaction operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filters transactions by any of the specified fields. Example: anyof.sender.target=tz1... will return operations where sender OR target is equal to the specified value. This parameter is useful when you need to retrieve all transactions associated with a specified account.

initiator	
AccountParameter (object) Nullable
Filters transactions by initiator. Allowed fields for .eqx mode: target.

sender	
AccountParameter (object) Nullable
Filters transactions by sender. Allowed fields for .eqx mode: target.

target	
AccountParameter (object) Nullable
Filters transactions by target. Allowed fields for .eqx mode: sender, initiator.

amount	
Int64Parameter (object) Nullable
Filters transactions by amount (micro tez).

id	
Int64Parameter (object) Nullable
Filters transactions by id.

level	
Int32Parameter (object) Nullable
Filters transactions by level.

timestamp	
TimestampParameter (object) Nullable
Filters transactions by timestamp.

senderCodeHash	
Int32Parameter (object) Nullable
Filters by senderCodeHash.

targetCodeHash	
Int32Parameter (object) Nullable
Filters by targetCodeHash.

codeHash	
Int32Parameter (object) Nullable
Filters by either senderCodeHash or targetCodeHash.

entrypoint	
StringParameter (object) Nullable
Filters transactions by entrypoint called on the target contract.

parameter	
JsonParameter (object) Nullable
Filters transactions by parameter value. Note, this query parameter supports the following format: ?parameter{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?parameter.token_id=... or ?parameter.sigs.0.ne=.... Also, note that .value part must be omitted in the path, so, for example, filtering by parameter.value.foo must be specified as ?parameter.foo=....

hasInternals	
BoolParameter (object) Nullable
Filters transactions by presence of internal operations.

status	
OperationStatusParameter (object) Nullable
Filters transactions by operation status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts transactions by specified field. Supported fields: id (default), level, gasUsed, storageUsed, bakerFee, storageFee, allocationFee, amount.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

micheline	
MichelineFormat (string)
Default: "Json"
Format of the parameters, storage and diffs: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, transaction - is a standard operation used to transfer tezos tokens to an account

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

initiator	
Alias (object) Nullable
Information about the initiator of the transaction call

sender	
Alias (object)
Information about the account sent the transaction

senderCodeHash	
integer <int32> Nullable
Hash of the sender contract code, or null is the sender is not a contract

nonce	
integer <int32> Nullable
An account nonce which is used to prevent internal operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for used the blockchain storage (micro tez)

allocationFee	
integer <int64>
The amount of funds burned from the sender account for account creation (micro tez)

target	
Alias (object) Nullable
Information about the target of the transaction

targetCodeHash	
integer <int32> Nullable
Hash of the target contract code, or null is the target is not a contract

amount	
integer <int64>
The transaction amount (micro tez)

parameter	
TxParameter (object) Nullable
Transaction parameter, including called entrypoint and value passed to the entrypoint.

storage	
any Nullable
Contract storage after executing the transaction converted to human-readable JSON. Note: you can configure storage format by setting micheline query parameter.

diffs	
Array of objects (BigMapDiff) Nullable
List of bigmap updates (aka big_map_diffs) caused by the transaction.

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

hasInternals	
boolean
An indication of whether the transaction has an internal operations true - there are internal operations false - no internal operations

tokenTransfersCount	
integer <int32> Nullable
Number of token transfers produced by the operation, or null if there are no transfers

ticketTransfersCount	
integer <int32> Nullable
Number of ticket transfers produced by the operation, or null if there are no transfers

eventsCount	
integer <int32> Nullable
Number of events produced by the operation, or null if there are no events

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/transactions
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"counter": 0,
"initiator": {},
"sender": {},
"senderCodeHash": 0,
"nonce": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"allocationFee": 0,
"target": {},
"targetCodeHash": 0,
"amount": 0,
"parameter": {},
"storage": null,
"diffs": [],
"status": "string",
"errors": [],
"hasInternals": true,
"tokenTransfersCount": 0,
"ticketTransfersCount": 0,
"eventsCount": 0,
"quote": {}
}
]
Get transaction by hash
Returns transaction operations with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
micheline	
MichelineFormat (string)
Default: "Json"
Format of the parameters, storage and diffs: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, transaction - is a standard operation used to transfer tezos tokens to an account

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

initiator	
Alias (object) Nullable
Information about the initiator of the transaction call

sender	
Alias (object)
Information about the account sent the transaction

senderCodeHash	
integer <int32> Nullable
Hash of the sender contract code, or null is the sender is not a contract

nonce	
integer <int32> Nullable
An account nonce which is used to prevent internal operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for used the blockchain storage (micro tez)

allocationFee	
integer <int64>
The amount of funds burned from the sender account for account creation (micro tez)

target	
Alias (object) Nullable
Information about the target of the transaction

targetCodeHash	
integer <int32> Nullable
Hash of the target contract code, or null is the target is not a contract

amount	
integer <int64>
The transaction amount (micro tez)

parameter	
TxParameter (object) Nullable
Transaction parameter, including called entrypoint and value passed to the entrypoint.

storage	
any Nullable
Contract storage after executing the transaction converted to human-readable JSON. Note: you can configure storage format by setting micheline query parameter.

diffs	
Array of objects (BigMapDiff) Nullable
List of bigmap updates (aka big_map_diffs) caused by the transaction.

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

hasInternals	
boolean
An indication of whether the transaction has an internal operations true - there are internal operations false - no internal operations

tokenTransfersCount	
integer <int32> Nullable
Number of token transfers produced by the operation, or null if there are no transfers

ticketTransfersCount	
integer <int32> Nullable
Number of ticket transfers produced by the operation, or null if there are no transfers

eventsCount	
integer <int32> Nullable
Number of events produced by the operation, or null if there are no events

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/transactions/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"counter": 0,
"initiator": {},
"sender": {},
"senderCodeHash": 0,
"nonce": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"allocationFee": 0,
"target": {},
"targetCodeHash": 0,
"amount": 0,
"parameter": {},
"storage": null,
"diffs": [],
"status": "string",
"errors": [],
"hasInternals": true,
"tokenTransfersCount": 0,
"ticketTransfersCount": 0,
"eventsCount": 0,
"quote": {}
}
]
Get transaction by hash and counter
Returns transaction operations with specified hash and counter.

path Parameters
hash
required
string
Operation hash

counter
required
integer <int32>
Operation counter

query Parameters
micheline	
MichelineFormat (string)
Default: "Json"
Format of the parameters, storage and diffs: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, transaction - is a standard operation used to transfer tezos tokens to an account

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

initiator	
Alias (object) Nullable
Information about the initiator of the transaction call

sender	
Alias (object)
Information about the account sent the transaction

senderCodeHash	
integer <int32> Nullable
Hash of the sender contract code, or null is the sender is not a contract

nonce	
integer <int32> Nullable
An account nonce which is used to prevent internal operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for used the blockchain storage (micro tez)

allocationFee	
integer <int64>
The amount of funds burned from the sender account for account creation (micro tez)

target	
Alias (object) Nullable
Information about the target of the transaction

targetCodeHash	
integer <int32> Nullable
Hash of the target contract code, or null is the target is not a contract

amount	
integer <int64>
The transaction amount (micro tez)

parameter	
TxParameter (object) Nullable
Transaction parameter, including called entrypoint and value passed to the entrypoint.

storage	
any Nullable
Contract storage after executing the transaction converted to human-readable JSON. Note: you can configure storage format by setting micheline query parameter.

diffs	
Array of objects (BigMapDiff) Nullable
List of bigmap updates (aka big_map_diffs) caused by the transaction.

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

hasInternals	
boolean
An indication of whether the transaction has an internal operations true - there are internal operations false - no internal operations

tokenTransfersCount	
integer <int32> Nullable
Number of token transfers produced by the operation, or null if there are no transfers

ticketTransfersCount	
integer <int32> Nullable
Number of ticket transfers produced by the operation, or null if there are no transfers

eventsCount	
integer <int32> Nullable
Number of events produced by the operation, or null if there are no events

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/transactions/{hash}/{counter}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"counter": 0,
"initiator": {},
"sender": {},
"senderCodeHash": 0,
"nonce": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"allocationFee": 0,
"target": {},
"targetCodeHash": 0,
"amount": 0,
"parameter": {},
"storage": null,
"diffs": [],
"status": "string",
"errors": [],
"hasInternals": true,
"tokenTransfersCount": 0,
"ticketTransfersCount": 0,
"eventsCount": 0,
"quote": {}
}
]
Get transaction by hash, counter and nonce
Returns an internal transaction operation with specified hash, counter and nonce.

path Parameters
hash
required
string
Operation hash

counter
required
integer <int32>
Operation counter

nonce
required
integer <int32>
Operation nonce (internal)

query Parameters
micheline	
MichelineFormat (string)
Default: "Json"
Format of the parameters, storage and diffs: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, transaction - is a standard operation used to transfer tezos tokens to an account

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

initiator	
Alias (object) Nullable
Information about the initiator of the transaction call

sender	
Alias (object)
Information about the account sent the transaction

senderCodeHash	
integer <int32> Nullable
Hash of the sender contract code, or null is the sender is not a contract

nonce	
integer <int32> Nullable
An account nonce which is used to prevent internal operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for used the blockchain storage (micro tez)

allocationFee	
integer <int64>
The amount of funds burned from the sender account for account creation (micro tez)

target	
Alias (object) Nullable
Information about the target of the transaction

targetCodeHash	
integer <int32> Nullable
Hash of the target contract code, or null is the target is not a contract

amount	
integer <int64>
The transaction amount (micro tez)

parameter	
TxParameter (object) Nullable
Transaction parameter, including called entrypoint and value passed to the entrypoint.

storage	
any Nullable
Contract storage after executing the transaction converted to human-readable JSON. Note: you can configure storage format by setting micheline query parameter.

diffs	
Array of objects (BigMapDiff) Nullable
List of bigmap updates (aka big_map_diffs) caused by the transaction.

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

hasInternals	
boolean
An indication of whether the transaction has an internal operations true - there are internal operations false - no internal operations

tokenTransfersCount	
integer <int32> Nullable
Number of token transfers produced by the operation, or null if there are no transfers

ticketTransfersCount	
integer <int32> Nullable
Number of ticket transfers produced by the operation, or null if there are no transfers

eventsCount	
integer <int32> Nullable
Number of events produced by the operation, or null if there are no events

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/transactions/{hash}/{counter}/{nonce}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"counter": 0,
"initiator": {},
"sender": {},
"senderCodeHash": 0,
"nonce": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"allocationFee": 0,
"target": {},
"targetCodeHash": 0,
"amount": 0,
"parameter": {},
"storage": null,
"diffs": [],
"status": "string",
"errors": [],
"hasInternals": true,
"tokenTransfersCount": 0,
"ticketTransfersCount": 0,
"eventsCount": 0,
"quote": {}
}
]
Get transaction status
Returns operation status: true if applied, false if failed, null (or HTTP 204) if doesn't exist.

path Parameters
hash
required
string
Operation hash

Responses
200
Response Schema: application/json
boolean Nullable

get
/v1/operations/transactions/{hash}/status
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
true
Get transactions count
Returns the total number of transaction operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filters transactions by any of the specified fields. Example: anyof.sender.target=tz1... will return operations where sender OR target is equal to the specified value. This parameter is useful when you need to retrieve all transactions associated with a specified account.

initiator	
AccountParameter (object) Nullable
Filters transactions by initiator. Allowed fields for .eqx mode: target.

sender	
AccountParameter (object) Nullable
Filters transactions by sender. Allowed fields for .eqx mode: target.

target	
AccountParameter (object) Nullable
Filters transactions by target. Allowed fields for .eqx mode: sender, initiator.

amount	
Int64Parameter (object) Nullable
Filters transactions by amount (micro tez).

level	
Int32Parameter (object) Nullable
Filters transactions by level.

timestamp	
TimestampParameter (object) Nullable
Filters transactions by timestamp.

entrypoint	
StringParameter (object) Nullable
Filters transactions by entrypoint called on the target contract.

parameter	
JsonParameter (object) Nullable
Filters transactions by parameter value. Note, this query parameter supports the following format: ?parameter{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?parameter.token_id=... or ?parameter.sigs.0.ne=.... Also, note that .value part must be omitted in the path, so, for example, filtering by parameter.value.foo must be specified as ?parameter.foo=....

status	
OperationStatusParameter (object) Nullable
Filters transactions by operation status (applied, failed, backtracked, skipped).

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/transactions/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get reveals
Returns a list of reveal operations.

query Parameters
sender	
AccountParameter (object) Nullable
Filters reveal operations by sender. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters reveal operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters reveal operations by timestamp.

status	
OperationStatusParameter (object) Nullable
Filters reveal operations by operation status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts reveals by specified field. Supported fields: id (default), level, gasUsed, bakerFee.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, reveal - is used to reveal the public key associated with an account

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

publicKey	
string Nullable
Revealed public key

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/reveals
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"status": "string",
"publicKey": "string",
"errors": [],
"quote": {}
}
]
Get reveal by hash
Returns reveal operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, reveal - is used to reveal the public key associated with an account

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

publicKey	
string Nullable
Revealed public key

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/reveals/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"status": "string",
"publicKey": "string",
"errors": [],
"quote": {}
}
]
Get reveal status
Returns operation status: true if applied, false if failed, null (or HTTP 204) if doesn't exist.

path Parameters
hash
required
string
Operation hash

Responses
200
Response Schema: application/json
boolean Nullable

get
/v1/operations/reveals/{hash}/status
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
true
Get reveals count
Returns the total number of reveal operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters reveals by level.

timestamp	
TimestampParameter (object) Nullable
Filters reveals by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/reveals/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get register constants
Returns a list of register global constant operations.

query Parameters
sender	
AccountParameter (object) Nullable
Filters operations by sender. Allowed fields for .eqx mode: none.

address	
ExpressionParameter (object) Nullable
Filters operations by global address of the created constant (starts with expr..).

level	
Int32Parameter (object) Nullable
Filters operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters operations by timestamp.

status	
OperationStatusParameter (object) Nullable
Filters operations by status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts operations by specified field. Supported fields: id (default), level, gasUsed, storageUsed, bakerFee, storageFee.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

micheline	
MichelineFormat (string)
Default: "Json"
Format of the constant value: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, register_constant - is used to register a global constant - Micheline expression that can be reused by multiple smart contracts

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for used the blockchain storage (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

address	
string Nullable
Global address of the registered constant (null if the operation failed)

value	
any Nullable
Constant value. Note: you can configure code format by setting micheline query parameter (0 | 2 - raw micheline, 1 | 3 - raw micheline string).

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/register_constants
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"status": "string",
"address": "string",
"value": null,
"errors": [],
"quote": {}
}
]
Get register constant by hash
Returns register global constant operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
micheline	
MichelineFormat (string)
Default: "Json"
Format of the constant value: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, register_constant - is used to register a global constant - Micheline expression that can be reused by multiple smart contracts

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for used the blockchain storage (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

address	
string Nullable
Global address of the registered constant (null if the operation failed)

value	
any Nullable
Constant value. Note: you can configure code format by setting micheline query parameter (0 | 2 - raw micheline, 1 | 3 - raw micheline string).

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/register_constants/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"status": "string",
"address": "string",
"value": null,
"errors": [],
"quote": {}
}
]
Get register constant status
Returns operation status: true if applied, false if failed, null (or HTTP 204) if doesn't exist.

path Parameters
hash
required
string
Operation hash

Responses
200
Response Schema: application/json
boolean Nullable

get
/v1/operations/register_constants/{hash}/status
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
true
Get register constants count
Returns the total number of register global constant operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters operations by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/register_constants/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get set deposits limits
Returns a list of set deposits limit operations.

query Parameters
sender	
AccountParameter (object) Nullable
Filters by sender. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

status	
OperationStatusParameter (object) Nullable
Filters by status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts by specified field. Supported fields: id (default), level, gasUsed, bakerFee.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, set_deposits_limit

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

limit	
string Nullable
Frozen deposits limit (mutez), or null if no limit.

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/set_deposits_limits
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"status": "string",
"limit": "string",
"errors": [],
"quote": {}
}
]
Get set deposits limit by hash
Returns set deposits limit operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, set_deposits_limit

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

limit	
string Nullable
Frozen deposits limit (mutez), or null if no limit.

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/set_deposits_limits/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"status": "string",
"limit": "string",
"errors": [],
"quote": {}
}
]
Get set deposits limit status
Returns operation status: true if applied, false if failed, null (or HTTP 204) if doesn't exist.

path Parameters
hash
required
string
Operation hash

Responses
200
Response Schema: application/json
boolean Nullable

get
/v1/operations/set_deposits_limits/{hash}/status
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
true
Get set deposits limits count
Returns the total number of set deposits limit operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/set_deposits_limits/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get transfer ticket
Returns a list of transfer ticket operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filters by any of the specified fields. Example: anyof.sender.target=tz1... will return operations where sender OR target is equal to the specified value. This parameter is useful when you need to retrieve all operations associated with a specified account.

sender	
AccountParameter (object) Nullable
Filters by sender. Allowed fields for .eqx mode: none.

target	
AccountParameter (object) Nullable
Filters by target. Allowed fields for .eqx mode: none.

id	
Int64Parameter (object) Nullable
Filters by id.

ticketer	
AccountParameter (object) Nullable
Filters by ticketer. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

status	
OperationStatusParameter (object) Nullable
Filters by status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts by specified field. Supported fields: id (default), level, gasUsed, bakerFee.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

micheline	
MichelineFormat (string)
Default: "Json"
Format of the content value: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, transfer_ticket

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for used the blockchain storage (micro tez)

target	
Alias (object) Nullable
Information about the target to which the operation was sent

ticketer	
Alias (object) Nullable
Information about the ticketer

amount	
string
Amount sent

entrypoint	
string
Entrypoint

ticketTransfersCount	
integer <int32> Nullable
Number of ticket transfers produced by the operation, or null if there are no transfers

contentType	
any Nullable
Micheline type of the content

content	
any Nullable
Ticket content

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/transfer_ticket
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"target": {},
"ticketer": {},
"amount": "string",
"entrypoint": "string",
"ticketTransfersCount": 0,
"contentType": null,
"content": null,
"status": "string",
"errors": [],
"quote": {}
}
]
Get transfer ticket by hash
Returns transfer ticket operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
micheline	
MichelineFormat (string)
Default: "Json"
Format of the content value: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, transfer_ticket

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for used the blockchain storage (micro tez)

target	
Alias (object) Nullable
Information about the target to which the operation was sent

ticketer	
Alias (object) Nullable
Information about the ticketer

amount	
string
Amount sent

entrypoint	
string
Entrypoint

ticketTransfersCount	
integer <int32> Nullable
Number of ticket transfers produced by the operation, or null if there are no transfers

contentType	
any Nullable
Micheline type of the content

content	
any Nullable
Ticket content

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/transfer_ticket/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"target": {},
"ticketer": {},
"amount": "string",
"entrypoint": "string",
"ticketTransfersCount": 0,
"contentType": null,
"content": null,
"status": "string",
"errors": [],
"quote": {}
}
]
Get transfer ticket status
Returns operation status: true if applied, false if failed, null (or HTTP 204) if doesn't exist.

path Parameters
hash
required
string
Operation hash

Responses
200
Response Schema: application/json
boolean Nullable

get
/v1/operations/transfer_ticket/{hash}/status
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
true
Get transfer ticket count
Returns the total number of transfer ticket operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/transfer_ticket/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get tx rollup commit
Returns a list of tx rollup commit operations.

query Parameters
sender	
AccountParameter (object) Nullable
Filters by sender. Allowed fields for .eqx mode: none.

rollup	
AccountParameter (object) Nullable
Filters by rollup. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

status	
OperationStatusParameter (object) Nullable
Filters by status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts by specified field. Supported fields: id (default), level, gasUsed, bakerFee.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, tx_rollup_commit

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

rollup	
Alias (object) Nullable
Information about the rollup to which the operation was sent

bond	
integer <int64>
Amount of bonds (micro tez) locked

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/tx_rollup_commit
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"rollup": {},
"bond": 0,
"status": "string",
"errors": [],
"quote": {}
}
]
Get tx rollup commit by hash
Returns tx rollup commit operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, tx_rollup_commit

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

rollup	
Alias (object) Nullable
Information about the rollup to which the operation was sent

bond	
integer <int64>
Amount of bonds (micro tez) locked

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/tx_rollup_commit/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"rollup": {},
"bond": 0,
"status": "string",
"errors": [],
"quote": {}
}
]
Get tx rollup commit status
Returns operation status: true if applied, false if failed, null (or HTTP 204) if doesn't exist.

path Parameters
hash
required
string
Operation hash

Responses
200
Response Schema: application/json
boolean Nullable

get
/v1/operations/tx_rollup_commit/{hash}/status
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
true
Get tx rollup commit count
Returns the total number of tx rollup commit operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/tx_rollup_commit/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get tx rollup dispatch tickets
Returns a list of tx rollup dispatch tickets operations.

query Parameters
sender	
AccountParameter (object) Nullable
Filters by sender. Allowed fields for .eqx mode: none.

rollup	
AccountParameter (object) Nullable
Filters by rollup. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

status	
OperationStatusParameter (object) Nullable
Filters by status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts by specified field. Supported fields: id (default), level, gasUsed, bakerFee.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, tx_rollup_dispatch_tickets

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for used the blockchain storage (micro tez)

rollup	
Alias (object) Nullable
Information about the rollup to which the operation was sent

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/tx_rollup_dispatch_tickets
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"rollup": {},
"status": "string",
"errors": [],
"quote": {}
}
]
Get tx rollup dispatch tickets by hash
Returns tx rollup dispatch tickets operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, tx_rollup_dispatch_tickets

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for used the blockchain storage (micro tez)

rollup	
Alias (object) Nullable
Information about the rollup to which the operation was sent

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/tx_rollup_dispatch_tickets/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"rollup": {},
"status": "string",
"errors": [],
"quote": {}
}
]
Get tx rollup dispatch tickets status
Returns operation status: true if applied, false if failed, null (or HTTP 204) if doesn't exist.

path Parameters
hash
required
string
Operation hash

Responses
200
Response Schema: application/json
boolean Nullable

get
/v1/operations/tx_rollup_dispatch_tickets/{hash}/status
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
true
Get tx rollup dispatch tickets count
Returns the total number of tx rollup dispatch tickets operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/tx_rollup_dispatch_tickets/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get tx rollup finalize commitment
Returns a list of tx rollup finalize commitment operations.

query Parameters
sender	
AccountParameter (object) Nullable
Filters by sender. Allowed fields for .eqx mode: none.

rollup	
AccountParameter (object) Nullable
Filters by rollup. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

status	
OperationStatusParameter (object) Nullable
Filters by status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts by specified field. Supported fields: id (default), level, gasUsed, bakerFee.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, tx_rollup_finalize_commitment

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

rollup	
Alias (object) Nullable
Information about the rollup to which the operation was sent

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/tx_rollup_finalize_commitment
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"rollup": {},
"status": "string",
"errors": [],
"quote": {}
}
]
Get tx rollup finalize commitment by hash
Returns tx rollup finalize commitment operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, tx_rollup_finalize_commitment

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

rollup	
Alias (object) Nullable
Information about the rollup to which the operation was sent

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/tx_rollup_finalize_commitment/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"rollup": {},
"status": "string",
"errors": [],
"quote": {}
}
]
Get tx rollup finalize commitment status
Returns operation status: true if applied, false if failed, null (or HTTP 204) if doesn't exist.

path Parameters
hash
required
string
Operation hash

Responses
200
Response Schema: application/json
boolean Nullable

get
/v1/operations/tx_rollup_finalize_commitment/{hash}/status
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
true
Get tx rollup finalize commitment count
Returns the total number of tx rollup finalize commitment operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/tx_rollup_finalize_commitment/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get tx rollup origination
Returns a list of tx rollup origination operations.

query Parameters
sender	
AccountParameter (object) Nullable
Filters by sender. Allowed fields for .eqx mode: none.

rollup	
AccountParameter (object) Nullable
Filters by rollup. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

status	
OperationStatusParameter (object) Nullable
Filters by status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts by specified field. Supported fields: id (default), level, gasUsed, bakerFee.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, tx_rollup_origination

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

allocationFee	
integer <int64>
The amount of funds burned from the sender account for account creation (micro tez)

rollup	
Alias (object) Nullable
Information about the rollup to which the operation was sent

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/tx_rollup_origination
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"allocationFee": 0,
"rollup": {},
"status": "string",
"errors": [],
"quote": {}
}
]
Get tx rollup origination by hash
Returns tx rollup origination operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, tx_rollup_origination

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

allocationFee	
integer <int64>
The amount of funds burned from the sender account for account creation (micro tez)

rollup	
Alias (object) Nullable
Information about the rollup to which the operation was sent

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/tx_rollup_origination/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"allocationFee": 0,
"rollup": {},
"status": "string",
"errors": [],
"quote": {}
}
]
Get tx rollup origination status
Returns operation status: true if applied, false if failed, null (or HTTP 204) if doesn't exist.

path Parameters
hash
required
string
Operation hash

Responses
200
Response Schema: application/json
boolean Nullable

get
/v1/operations/tx_rollup_origination/{hash}/status
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
true
Get tx rollup origination count
Returns the total number of tx rollup origination operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/tx_rollup_origination/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get tx rollup rejection
Returns a list of tx rollup rejection operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filters by any of the specified fields. Example: anyof.sender.committer=tz1... will return operations where sender OR committer is equal to the specified value. This parameter is useful when you need to retrieve all operations associated with a specified account.

sender	
AccountParameter (object) Nullable
Filters by sender. Allowed fields for .eqx mode: none.

committer	
AccountParameter (object) Nullable
Filters by committer. Allowed fields for .eqx mode: none.

rollup	
AccountParameter (object) Nullable
Filters by rollup. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

status	
OperationStatusParameter (object) Nullable
Filters by status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts by specified field. Supported fields: id (default), level, gasUsed, bakerFee.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, tx_rollup_rejection

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

rollup	
Alias (object) Nullable
Information about the rollup to which the operation was sent

committer	
Alias (object)
Information about the committer

reward	
integer <int64>
Reward (micro tez) sent to the rejection sender

loss	
integer <int64>
Loss (micro tez) burned from the committer

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/tx_rollup_rejection
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"rollup": {},
"committer": {},
"reward": 0,
"loss": 0,
"status": "string",
"errors": [],
"quote": {}
}
]
Get tx rollup rejection by hash
Returns tx rollup rejection operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, tx_rollup_rejection

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

rollup	
Alias (object) Nullable
Information about the rollup to which the operation was sent

committer	
Alias (object)
Information about the committer

reward	
integer <int64>
Reward (micro tez) sent to the rejection sender

loss	
integer <int64>
Loss (micro tez) burned from the committer

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/tx_rollup_rejection/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"rollup": {},
"committer": {},
"reward": 0,
"loss": 0,
"status": "string",
"errors": [],
"quote": {}
}
]
Get tx rollup rejection status
Returns operation status: true if applied, false if failed, null (or HTTP 204) if doesn't exist.

path Parameters
hash
required
string
Operation hash

Responses
200
Response Schema: application/json
boolean Nullable

get
/v1/operations/tx_rollup_rejection/{hash}/status
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
true
Get tx rollup rejection count
Returns the total number of tx rollup rejection operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/tx_rollup_rejection/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get tx rollup remove commitment
Returns a list of tx rollup remove commitment operations.

query Parameters
sender	
AccountParameter (object) Nullable
Filters by sender. Allowed fields for .eqx mode: none.

rollup	
AccountParameter (object) Nullable
Filters by rollup. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

status	
OperationStatusParameter (object) Nullable
Filters by status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts by specified field. Supported fields: id (default), level, gasUsed, bakerFee.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, tx_rollup_remove_commitment

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

rollup	
Alias (object) Nullable
Information about the rollup to which the operation was sent

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/tx_rollup_remove_commitment
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"rollup": {},
"status": "string",
"errors": [],
"quote": {}
}
]
Get tx rollup remove commitment by hash
Returns tx rollup remove commitment operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, tx_rollup_remove_commitment

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

rollup	
Alias (object) Nullable
Information about the rollup to which the operation was sent

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/tx_rollup_remove_commitment/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"rollup": {},
"status": "string",
"errors": [],
"quote": {}
}
]
Get tx rollup remove commitment status
Returns operation status: true if applied, false if failed, null (or HTTP 204) if doesn't exist.

path Parameters
hash
required
string
Operation hash

Responses
200
Response Schema: application/json
boolean Nullable

get
/v1/operations/tx_rollup_remove_commitment/{hash}/status
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
true
Get tx rollup remove commitment count
Returns the total number of tx rollup remove commitment operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/tx_rollup_remove_commitment/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get tx rollup return bond
Returns a list of tx rollup return bond operations.

query Parameters
sender	
AccountParameter (object) Nullable
Filters by sender. Allowed fields for .eqx mode: none.

rollup	
AccountParameter (object) Nullable
Filters by rollup. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

status	
OperationStatusParameter (object) Nullable
Filters by status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts by specified field. Supported fields: id (default), level, gasUsed, bakerFee.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, tx_rollup_return_bond

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

rollup	
Alias (object) Nullable
Information about the rollup to which the operation was sent

bond	
integer <int64>
Amount of bonds unlocked (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/tx_rollup_return_bond
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"rollup": {},
"bond": 0,
"status": "string",
"errors": [],
"quote": {}
}
]
Get tx rollup return bond by hash
Returns tx rollup return bond operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, tx_rollup_return_bond

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

rollup	
Alias (object) Nullable
Information about the rollup to which the operation was sent

bond	
integer <int64>
Amount of bonds unlocked (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/tx_rollup_return_bond/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"rollup": {},
"bond": 0,
"status": "string",
"errors": [],
"quote": {}
}
]
Get tx rollup return bond status
Returns operation status: true if applied, false if failed, null (or HTTP 204) if doesn't exist.

path Parameters
hash
required
string
Operation hash

Responses
200
Response Schema: application/json
boolean Nullable

get
/v1/operations/tx_rollup_return_bond/{hash}/status
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
true
Get tx rollup return bond count
Returns the total number of tx rollup return bond operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/tx_rollup_return_bond/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get tx rollup submit batch
Returns a list of tx rollup submit batch operations.

query Parameters
sender	
AccountParameter (object) Nullable
Filters by sender. Allowed fields for .eqx mode: none.

rollup	
AccountParameter (object) Nullable
Filters by rollup. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

status	
OperationStatusParameter (object) Nullable
Filters by status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts by specified field. Supported fields: id (default), level, gasUsed, bakerFee.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, tx_rollup_submit_batch

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for used the blockchain storage (micro tez)

rollup	
Alias (object) Nullable
Information about the rollup to which the operation was sent

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/tx_rollup_submit_batch
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"rollup": {},
"status": "string",
"errors": [],
"quote": {}
}
]
Get tx rollup submit batch by hash
Returns tx rollup submit batch operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, tx_rollup_submit_batch

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for used the blockchain storage (micro tez)

rollup	
Alias (object) Nullable
Information about the rollup to which the operation was sent

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/tx_rollup_submit_batch/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"rollup": {},
"status": "string",
"errors": [],
"quote": {}
}
]
Get tx rollup submit batch status
Returns operation status: true if applied, false if failed, null (or HTTP 204) if doesn't exist.

path Parameters
hash
required
string
Operation hash

Responses
200
Response Schema: application/json
boolean Nullable

get
/v1/operations/tx_rollup_submit_batch/{hash}/status
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
true
Get tx rollup submit batch count
Returns the total number of tx rollup submit batch operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/tx_rollup_submit_batch/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get increase paid storage
Returns a list of increase paid storage operations.

query Parameters
sender	
AccountParameter (object) Nullable
Filters by sender. Allowed fields for .eqx mode: none.

contract	
AccountParameter (object) Nullable
Filters by contract. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

status	
OperationStatusParameter (object) Nullable
Filters by status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts operations by specified field. Supported fields: id (default), level, gasUsed, storageUsed, bakerFee, storageFee.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, increase_paid_storage

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for used the blockchain storage (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

contract	
Alias (object) Nullable
Information about the contract for which paid storage was increased

amount	
string
Amount of storage in bytes prepaid.

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/increase_paid_storage
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"status": "string",
"contract": {},
"amount": "string",
"errors": [],
"quote": {}
}
]
Get increase paid storage by hash
Returns increase paid storage operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, increase_paid_storage

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for used the blockchain storage (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

contract	
Alias (object) Nullable
Information about the contract for which paid storage was increased

amount	
string
Amount of storage in bytes prepaid.

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/increase_paid_storage/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"status": "string",
"contract": {},
"amount": "string",
"errors": [],
"quote": {}
}
]
Get increase paid storage count
Returns the total number of increase paid storage operations.

query Parameters
level	
Int32Parameter (object) Nullable
Filters operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters operations by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/increase_paid_storage/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get update secondary key
Returns a list of update secondary key operations.

query Parameters
sender	
AccountParameter (object) Nullable
Filters by sender. Allowed fields for .eqx mode: none.

keyType	
SecondaryKeyTypeParameter (object) Nullable
Filters by key type (consensus or companion).

activationCycle	
Int32Parameter (object) Nullable
Filters by activation cycle.

publicKeyHash	
AddressParameter (object) Nullable
Filters by pkh (tz address).

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

status	
OperationStatusParameter (object) Nullable
Filters by status (applied, failed, backtracked, skipped).

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts operations by specified field. Supported fields: id (default), level, gasUsed, storageUsed, bakerFee, storageFee.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, update_secondary_key

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

keyType	
string
Type of the key: consensus or companion

activationCycle	
integer <int32>
Index of the cycle from which the secondary key will be active

publicKey	
string
Secondary key

publicKeyHash	
string
Secondary key hash

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/update_secondary_key
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"status": "string",
"keyType": "string",
"activationCycle": 0,
"publicKey": "string",
"publicKeyHash": "string",
"errors": [],
"quote": {}
}
]
Get update secondary key by hash
Returns update secondary key operation with specified hash.

path Parameters
hash
required
string
Operation hash

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, update_secondary_key

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

keyType	
string
Type of the key: consensus or companion

activationCycle	
integer <int32>
Index of the cycle from which the secondary key will be active

publicKey	
string
Secondary key

publicKeyHash	
string
Secondary key hash

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/update_secondary_key/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"status": "string",
"keyType": "string",
"activationCycle": 0,
"publicKey": "string",
"publicKeyHash": "string",
"errors": [],
"quote": {}
}
]
Get update secondary key count
Returns the total number of update secondary key operations.

query Parameters
keyType	
SecondaryKeyTypeParameter (object) Nullable
Filters operations key type (consensus or companion).

level	
Int32Parameter (object) Nullable
Filters operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters operations by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/update_secondary_key/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get smart rollup add messages
Returns a list of smart rollup add messages operations.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, sr_add_messages

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database
[sortable]

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

messagesCount	
integer <int32>
Number of messages added to the smart rollup inbox

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/sr_add_messages
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"status": "string",
"messagesCount": 0,
"errors": [],
"quote": {}
}
]
Get smart rollup add messages count
Returns a total number of smart rollup add messages operations.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/sr_add_messages/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get smart rollup cement
Returns a list of smart rollup cement operations.

query Parameters
rollup	
SmartRollupParameter (object) Nullable
Filter by rollup address.
Click on the parameter to expand more details.

id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, sr_cement

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database
[sortable]

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

rollup	
Alias (object) Nullable
Smart rollup to which the operation was sent

commitment	
SrCommitmentInfo (object) Nullable
Cemented commitment

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/sr_cement
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"status": "string",
"rollup": {},
"commitment": {},
"errors": [],
"quote": {}
}
]
Get smart rollup cement count
Returns a total number of smart rollup cement operations.

query Parameters
rollup	
SmartRollupParameter (object) Nullable
Filter by rollup address.
Click on the parameter to expand more details.

id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/sr_cement/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get smart rollup execute
Returns a list of smart rollup execute operations.

query Parameters
rollup	
SmartRollupParameter (object) Nullable
Filter by rollup address.
Click on the parameter to expand more details.

id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, sr_execute

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database
[sortable]

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for used the blockchain storage (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

rollup	
Alias (object) Nullable
Smart rollup to which the operation was sent

commitment	
SrCommitmentInfo (object) Nullable
Executed commitment

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

ticketTransfersCount	
integer <int32> Nullable
Number of ticket transfers produced by the operation, or null if there are no transfers

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/sr_execute
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"status": "string",
"rollup": {},
"commitment": {},
"errors": [],
"ticketTransfersCount": 0,
"quote": {}
}
]
Get smart rollup execute count
Returns a total number of smart rollup execute operations.

query Parameters
rollup	
SmartRollupParameter (object) Nullable
Filter by rollup address.
Click on the parameter to expand more details.

id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/sr_execute/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get smart rollup originate
Returns a list of smart rollup originate operations.

query Parameters
rollup	
SmartRollupParameter (object) Nullable
Filter by rollup address.
Click on the parameter to expand more details.

id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

micheline	
MichelineFormat (string)
Default: "Json"
Format of the parameter type value: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, sr_originate

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database
[sortable]

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

storageUsed	
integer <int32>
Amount of storage, consumed by the operation

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

storageFee	
integer <int64>
The amount of funds burned from the sender account for used the blockchain storage (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

pvmKind	
string
PVM kind (arith or wasm).

kernel	
string <byte>
Kernel bytes (in base64).

parameterType	
any Nullable
Smart rollup parameter type. Note: you can configure format by setting micheline query parameter.

genesisCommitment	
string Nullable
Genesis commitment hash.

rollup	
Alias (object) Nullable
Originated smart rollup.

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/sr_originate
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"storageUsed": 0,
"bakerFee": 0,
"storageFee": 0,
"status": "string",
"pvmKind": "string",
"kernel": "string",
"parameterType": null,
"genesisCommitment": "string",
"rollup": {},
"errors": [],
"quote": {}
}
]
Get smart rollup originate count
Returns a total number of smart rollup originate operations.

query Parameters
rollup	
SmartRollupParameter (object) Nullable
Filter by rollup address.
Click on the parameter to expand more details.

id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/sr_originate/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get smart rollup publish
Returns a list of smart rollup publish operations.

query Parameters
commitment.id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

commitment.hash	
Src1HashParameter (object) Nullable
Filter by commitment hash.
Click on the parameter to expand more details.

rollup	
SmartRollupParameter (object) Nullable
Filter by rollup address.
Click on the parameter to expand more details.

id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, sr_publish

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database
[sortable]

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

rollup	
Alias (object) Nullable
Smart rollup to which the operation was sent

commitment	
SrCommitmentInfo (object) Nullable
Published commitment

bond	
integer <int64>
Amount of bonds locked (micro tez)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/sr_publish
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"status": "string",
"rollup": {},
"commitment": {},
"bond": 0,
"errors": [],
"quote": {}
}
]
Get smart rollup publish count
Returns a total number of smart rollup publish operations.

query Parameters
commitment.id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

commitment.hash	
Src1HashParameter (object) Nullable
Filter by commitment hash.
Click on the parameter to expand more details.

rollup	
SmartRollupParameter (object) Nullable
Filter by rollup address.
Click on the parameter to expand more details.

id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/sr_publish/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get smart rollup recover bond
Returns a list of smart rollup recover bond operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filter by any of the specified fields (sender or staker). Example: anyof.sender.staker=tz1... will return operations where sender OR staker is equal to the specified value. This parameter is useful when you need to get all operations somehow related to the account in a single request.
Click on the parameter to expand more details.

staker	
AccountParameter (object) Nullable
Filter by staker address.
Click on the parameter to expand more details.

rollup	
SmartRollupParameter (object) Nullable
Filter by rollup address.
Click on the parameter to expand more details.

id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, sr_recover_bond

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database
[sortable]

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

rollup	
Alias (object) Nullable
Smart rollup to which the operation was sent

staker	
Alias (object) Nullable
Staker account, which's bond should be returned

bond	
integer <int64>
Amount of bonds returned (micro tez)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/sr_recover_bond
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"status": "string",
"rollup": {},
"staker": {},
"bond": 0,
"errors": [],
"quote": {}
}
]
Get smart rollup recover bond count
Returns a total number of smart rollup recover bond operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filter by any of the specified fields (sender or staker). Example: anyof.sender.staker=tz1... will return operations where sender OR staker is equal to the specified value. This parameter is useful when you need to get all operations somehow related to the account in a single request.
Click on the parameter to expand more details.

staker	
AccountParameter (object) Nullable
Filter by staker address.
Click on the parameter to expand more details.

rollup	
SmartRollupParameter (object) Nullable
Filter by rollup address.
Click on the parameter to expand more details.

id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/sr_recover_bond/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get smart rollup refute
Returns a list of smart rollup refute operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filter by any of the specified fields (sender, initiator, or opponent). Example: anyof.initiator.opponent=tz1... will return operations where initiator OR opponent is equal to the specified value. This parameter is useful when you need to get all operations somehow related to the account in a single request.
Click on the parameter to expand more details.

game.id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

game.initiator	
AccountParameter (object) Nullable
Filter by initiator (who found a wrong commitment and started the refutation game).
Click on the parameter to expand more details.

game.initiatorCommitment.id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

game.initiatorCommitment.hash	
Src1HashParameter (object) Nullable
Filter by commitment hash.
Click on the parameter to expand more details.

game.opponent	
AccountParameter (object) Nullable
Filter by opponent (who was accused in publishing a wrong commitment).
Click on the parameter to expand more details.

game.opponentCommitment.id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

game.opponentCommitment.hash	
Src1HashParameter (object) Nullable
Filter by commitment hash.
Click on the parameter to expand more details.

move	
RefutationMoveParameter (object) Nullable
Filter by refutation game move (start, dissection, proof, or timeout).
Click on the parameter to expand more details.

gameStatus	
RefutationGameStatusParameter (object) Nullable
Filter by refutation game status (none, ongoing, loser, or draw).
Click on the parameter to expand more details.

rollup	
SmartRollupParameter (object) Nullable
Filter by rollup address.
Click on the parameter to expand more details.

id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, sr_refute

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database
[sortable]

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

rollup	
Alias (object) Nullable
Smart rollup to which the operation was sent

game	
SrGameInfo (object) Nullable
Refutation game info

move	
string
Player's move (start, dissection, proof, timeout)

gameStatus	
string
Game status, after player's move (ongoing, loser, draw)

dissectionStart	
integer <int64> Nullable
The first tick in the dissection range. This field is null if move is not `dissection.

dissectionEnd	
integer <int64> Nullable
The last tick in the dissection range. This field is null if move is not `dissection.

dissectionSteps	
integer <int32> Nullable
Total ticks in the dissection range. This field is null if move is not dissection.

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/sr_refute
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"status": "string",
"rollup": {},
"game": {},
"move": "string",
"gameStatus": "string",
"dissectionStart": 0,
"dissectionEnd": 0,
"dissectionSteps": 0,
"errors": [],
"quote": {}
}
]
Get smart rollup refute count
Returns a total number of smart rollup refute operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filter by any of the specified fields (sender, initiator, or opponent). Example: anyof.initiator.opponent=tz1... will return operations where initiator OR opponent is equal to the specified value. This parameter is useful when you need to get all operations somehow related to the account in a single request.
Click on the parameter to expand more details.

game.id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

game.initiator	
AccountParameter (object) Nullable
Filter by initiator (who found a wrong commitment and started the refutation game).
Click on the parameter to expand more details.

game.initiatorCommitment.id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

game.initiatorCommitment.hash	
Src1HashParameter (object) Nullable
Filter by commitment hash.
Click on the parameter to expand more details.

game.opponent	
AccountParameter (object) Nullable
Filter by opponent (who was accused in publishing a wrong commitment).
Click on the parameter to expand more details.

game.opponentCommitment.id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

game.opponentCommitment.hash	
Src1HashParameter (object) Nullable
Filter by commitment hash.
Click on the parameter to expand more details.

move	
RefutationMoveParameter (object) Nullable
Filter by refutation game move (start, dissection, proof, or timeout).
Click on the parameter to expand more details.

gameStatus	
RefutationGameStatusParameter (object) Nullable
Filter by refutation game status (none, ongoing, loser, or draw).
Click on the parameter to expand more details.

rollup	
SmartRollupParameter (object) Nullable
Filter by rollup address.
Click on the parameter to expand more details.

id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/sr_refute/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get staking ops
Returns a list of staking operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filter by any of the specified fields (sender, or baker). Example: anyof.sender.baker=tz1... will return operations where sender OR baker is equal to the specified value. This parameter is useful when you need to get all operations somehow related to the account in a single request.
Click on the parameter to expand more details.

staker	
AccountParameter (object) Nullable
Filter by staker address.
Click on the parameter to expand more details.

baker	
AccountParameter (object) Nullable
Filter by baker address.
Click on the parameter to expand more details.

action	
StakingActionParameter (object) Nullable
Filter by staking action (stake, unstake, finalize).
Click on the parameter to expand more details.

id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, staking

id	
integer <int64>
Internal TzKT ID.
[sortable]

level	
integer <int32>
Height of the block from the genesis

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

staker	
Alias (object)
Information about the account for which the action is performed

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

action	
string
Staking action (stake, unstake, finalize)

requestedAmount	
integer <int64>
Amount passed as the staking operation parameter (micro tez)

amount	
integer <int64> Nullable
Actually processed amount (micro tez)

baker	
Alias (object) Nullable
Information about the baker

stakingUpdatesCount	
integer <int64> Nullable
Number of staking updates happened internally

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/staking
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"hash": "string",
"sender": {},
"staker": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"action": "string",
"requestedAmount": 0,
"amount": 0,
"baker": {},
"stakingUpdatesCount": 0,
"status": "string",
"errors": [],
"quote": {}
}
]
Get staking ops count
Returns a total number of staking operations.

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filter by any of the specified fields (sender, or baker). Example: anyof.sender.baker=tz1... will return operations where sender OR baker is equal to the specified value. This parameter is useful when you need to get all operations somehow related to the account in a single request.
Click on the parameter to expand more details.

staker	
AccountParameter (object) Nullable
Filter by staker address.
Click on the parameter to expand more details.

baker	
AccountParameter (object) Nullable
Filter by baker address.
Click on the parameter to expand more details.

action	
StakingActionParameter (object) Nullable
Filter by staking action (stake, unstake, finalize).
Click on the parameter to expand more details.

id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/staking/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get migrations
Returns a list of migration operations (synthetic type).

query Parameters
account	
AccountParameter (object) Nullable
Filters migration operations by account. Allowed fields for .eqx mode: none.

kind	
MigrationKindParameter (object) Nullable
Filters migration operations by kind (bootstrap, activate_delegate, airdrop, proposal_invoice, origination, subsidy, remove_bigmap_key).

balanceChange	
Int64Parameter (object) Nullable
Filters migration operations by amount.

id	
Int64Parameter (object) Nullable
Filters migration operations by internal TzKT id.

level	
Int32Parameter (object) Nullable
Filters migration operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters migration operations by timestamp.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts migrations by specified field. Supported fields: id (default), level.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

micheline	
MichelineFormat (string)
Default: "Json"
Format of the parameters, storage and diffs: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, migration - result of the context (database) migration during a protocol update (synthetic type)

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

kind	
string
Kind of the migration bootstrap - balance updates, included in the first block after genesis activate_delegate - registering a new baker (delegator) during protocol migration airdrop - airdrop of 1 micro tez during Babylon protocol upgrade proposal_invoice - invoice for creation a proposal for protocol upgrade code_change - changing contract scripts during Babylon protocol upgrade origination - implicit (hardcoded in the protocol) origination of liquidity baking contracts subsidy - liquidity baking subsidy remove_bigmap_key - removing the key from the bigmap

account	
Alias (object)
Information about the account whose balance has updated as a result of the operation

balanceChange	
integer <int64>
The amount for which the operation updated the balance (micro tez)

storage	
any Nullable
Contract storage after the migration converted to human-readable JSON. Note: you can configure storage format by setting micheline query parameter.

diffs	
Array of objects (BigMapDiff) Nullable
List of bigmap updates caused by the migration.

tokenTransfersCount	
integer <int32> Nullable
Number of token transfers produced by the operation, or null if there are no transfers

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/migrations
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"kind": "string",
"account": {},
"balanceChange": 0,
"storage": null,
"diffs": [],
"tokenTransfersCount": 0,
"quote": {}
}
]
Get migration by id
Returns migration operation with specified id.

path Parameters
id
required
integer <int64>
Operation id

query Parameters
micheline	
MichelineFormat (string)
Default: "Json"
Format of the parameters, storage and diffs: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
type	
string
Type of the operation, migration - result of the context (database) migration during a protocol update (synthetic type)

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

kind	
string
Kind of the migration bootstrap - balance updates, included in the first block after genesis activate_delegate - registering a new baker (delegator) during protocol migration airdrop - airdrop of 1 micro tez during Babylon protocol upgrade proposal_invoice - invoice for creation a proposal for protocol upgrade code_change - changing contract scripts during Babylon protocol upgrade origination - implicit (hardcoded in the protocol) origination of liquidity baking contracts subsidy - liquidity baking subsidy remove_bigmap_key - removing the key from the bigmap

account	
Alias (object)
Information about the account whose balance has updated as a result of the operation

balanceChange	
integer <int64>
The amount for which the operation updated the balance (micro tez)

storage	
any Nullable
Contract storage after the migration converted to human-readable JSON. Note: you can configure storage format by setting micheline query parameter.

diffs	
Array of objects (BigMapDiff) Nullable
List of bigmap updates caused by the migration.

tokenTransfersCount	
integer <int32> Nullable
Number of token transfers produced by the operation, or null if there are no transfers

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/migrations/{id}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"kind": "string",
"account": {
"alias": "string",
"address": "string"
},
"balanceChange": 0,
"storage": null,
"diffs": [
{}
],
"tokenTransfersCount": 0,
"quote": {
"btc": 0,
"eur": 0,
"usd": 0,
"cny": 0,
"jpy": 0,
"krw": 0,
"eth": 0,
"gbp": 0
}
}
Get migrations count
Returns the total number of migration operations (synthetic type).

query Parameters
level	
Int32Parameter (object) Nullable
Filters migrations by level.

timestamp	
TimestampParameter (object) Nullable
Filters migrations by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/migrations/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get revelation penalties
Returns a list of revelation penalty operations (synthetic type).

query Parameters
id	
Int64Parameter (object) Nullable
Filters operations by internal TzKT id.

baker	
AccountParameter (object) Nullable
Filters revelation penalty operations by baker. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters revelation penalty operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters revelation penalty operations by timestamp.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts revelation penalty operations by specified field. Supported fields: id (default), level.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, revelation_penalty - is operation, in which rewards were lost due to unrevealed seed nonces by the delegate (synthetic type)

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

baker	
Alias (object)
Information about the delegate (baker) who has lost rewards due to unrevealed seed nonces

missedLevel	
integer <int32>
Height of the block, which contains hash of the seed nonce, which was to be revealed

loss	
integer <int64>
Reward for baking and gathered fees from the block, which were lost due to unrevealed seed nonces (micro tez)

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/revelation_penalties
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"baker": {},
"missedLevel": 0,
"loss": 0,
"quote": {}
}
]
Get revelation penalty by id
Returns revelation penalty operation with specified id.

path Parameters
id
required
integer <int64>
Operation id

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
type	
string
Type of the operation, revelation_penalty - is operation, in which rewards were lost due to unrevealed seed nonces by the delegate (synthetic type)

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
The height of the block from the genesis block, in which the operation was included

timestamp	
string <date-time>
Datetime of the block, in which the operation was included (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Hash of the block, in which the operation was included

baker	
Alias (object)
Information about the delegate (baker) who has lost rewards due to unrevealed seed nonces

missedLevel	
integer <int32>
Height of the block, which contains hash of the seed nonce, which was to be revealed

loss	
integer <int64>
Reward for baking and gathered fees from the block, which were lost due to unrevealed seed nonces (micro tez)

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/revelation_penalties/{id}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"baker": {
"alias": "string",
"address": "string"
},
"missedLevel": 0,
"loss": 0,
"quote": {
"btc": 0,
"eur": 0,
"usd": 0,
"cny": 0,
"jpy": 0,
"krw": 0,
"eth": 0,
"gbp": 0
}
}
Get revelation penalties count
Returns the total number of revelation penalty operations (synthetic type).

query Parameters
level	
Int32Parameter (object) Nullable
Filters revelation penalty operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters revelation penalty operations by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/revelation_penalties/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get baking
Returns a list of baking operations (synthetic type).

query Parameters
anyof	
AnyOfParameter (object) Nullable
Filters by any of the specified fields. Example: anyof.proposer.producer=tz1....

proposer	
AccountParameter (object) Nullable
Filters by block proposer. Allowed fields for .eqx mode: none.

producer	
AccountParameter (object) Nullable
Filters by block producer. Allowed fields for .eqx mode: none.

id	
Int64Parameter (object) Nullable
Filters operations by internal TzKT id.

level	
Int32Parameter (object) Nullable
Filters baking operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters baking operations by timestamp.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts baking operations by specified field. Supported fields: id (default), level.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, baking - an operation which contains brief information about a baked (produced) block (synthetic type)

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
Height of the block from the genesis

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Block hash

proposer	
Alias (object)
Baker who proposed the block payload

producer	
Alias (object)
Baker who produced the block

payloadRound	
integer <int32>
Round at which the block payload was proposed

blockRound	
integer <int32>
Round at which the block was produced

deposit	
integer <int64>
Security deposit frozen on the baker's account for producing the block (micro tez)

rewardDelegated	
integer <int64>
Portion of fixed reward, corresponding to delegated stake, paid to payload proposer's liquid balance (micro tez) (it is not frozen and can be spent immediately).

rewardStakedOwn	
integer <int64>
Portion of fixed reward, corresponding to baker's own stake, paid to payload proposer's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedEdge	
integer <int64>
Portion of fixed reward, corresponding to baker's edge from external stake, paid to payload proposer's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedShared	
integer <int64>
Portion of fixed reward, corresponding to baker's external stake, paid to payload proposer's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

bonusDelegated	
integer <int64>
Portion of bonus reward, corresponding to delegated stake, paid to block producer's liquid balance (micro tez) (it is not frozen and can be spent immediately).

bonusStakedOwn	
integer <int64>
Portion of bonus reward, corresponding to baker's own stake, paid to block producer's own staked balance (micro tez) (it is frozen and belongs to the baker).

bonusStakedEdge	
integer <int64>
Portion of bonus reward, corresponding to baker's edge from external stake, paid to block producer's own staked balance (micro tez) (it is frozen and belongs to the baker).

bonusStakedShared	
integer <int64>
Portion of fixed reward, corresponding to baker's external stake, paid to block producer's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

fees	
integer <int64>
Total fee gathered from operations, included into the block

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/baking
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"proposer": {},
"producer": {},
"payloadRound": 0,
"blockRound": 0,
"deposit": 0,
"rewardDelegated": 0,
"rewardStakedOwn": 0,
"rewardStakedEdge": 0,
"rewardStakedShared": 0,
"bonusDelegated": 0,
"bonusStakedOwn": 0,
"bonusStakedEdge": 0,
"bonusStakedShared": 0,
"fees": 0,
"quote": {}
}
]
Get baking by id
Returns baking operation with specified id.

path Parameters
id
required
integer <int64>
Operation id

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
type	
string
Type of the operation, baking - an operation which contains brief information about a baked (produced) block (synthetic type)

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
Height of the block from the genesis

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Block hash

proposer	
Alias (object)
Baker who proposed the block payload

producer	
Alias (object)
Baker who produced the block

payloadRound	
integer <int32>
Round at which the block payload was proposed

blockRound	
integer <int32>
Round at which the block was produced

deposit	
integer <int64>
Security deposit frozen on the baker's account for producing the block (micro tez)

rewardDelegated	
integer <int64>
Portion of fixed reward, corresponding to delegated stake, paid to payload proposer's liquid balance (micro tez) (it is not frozen and can be spent immediately).

rewardStakedOwn	
integer <int64>
Portion of fixed reward, corresponding to baker's own stake, paid to payload proposer's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedEdge	
integer <int64>
Portion of fixed reward, corresponding to baker's edge from external stake, paid to payload proposer's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedShared	
integer <int64>
Portion of fixed reward, corresponding to baker's external stake, paid to payload proposer's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

bonusDelegated	
integer <int64>
Portion of bonus reward, corresponding to delegated stake, paid to block producer's liquid balance (micro tez) (it is not frozen and can be spent immediately).

bonusStakedOwn	
integer <int64>
Portion of bonus reward, corresponding to baker's own stake, paid to block producer's own staked balance (micro tez) (it is frozen and belongs to the baker).

bonusStakedEdge	
integer <int64>
Portion of bonus reward, corresponding to baker's edge from external stake, paid to block producer's own staked balance (micro tez) (it is frozen and belongs to the baker).

bonusStakedShared	
integer <int64>
Portion of fixed reward, corresponding to baker's external stake, paid to block producer's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

fees	
integer <int64>
Total fee gathered from operations, included into the block

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/baking/{id}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"proposer": {
"alias": "string",
"address": "string"
},
"producer": {
"alias": "string",
"address": "string"
},
"payloadRound": 0,
"blockRound": 0,
"deposit": 0,
"rewardDelegated": 0,
"rewardStakedOwn": 0,
"rewardStakedEdge": 0,
"rewardStakedShared": 0,
"bonusDelegated": 0,
"bonusStakedOwn": 0,
"bonusStakedEdge": 0,
"bonusStakedShared": 0,
"fees": 0,
"quote": {
"btc": 0,
"eur": 0,
"usd": 0,
"cny": 0,
"jpy": 0,
"krw": 0,
"eth": 0,
"gbp": 0
}
}
Get baking count
Returns the total number of baking operations (synthetic type).

query Parameters
level	
Int32Parameter (object) Nullable
Filters baking operations by level.

timestamp	
TimestampParameter (object) Nullable
Filters baking operations by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/baking/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get attestation rewards
Returns a list of attestation reward operations (synthetic type).

query Parameters
id	
Int64Parameter (object) Nullable
Filters operations by internal TzKT id.

baker	
AccountParameter (object) Nullable
Filters by baker. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts by specified field. Supported fields: id (default), level.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, attestation_reward

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
Height of the block from the genesis

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Block hash

baker	
Alias (object)
Baker expected to receive attestation reward

expected	
integer <int64>
Expected attestation reward, based on baker's active stake (micro tez)

rewardDelegated	
integer <int64>
Reward, corresponding to delegated stake, paid to baker's liquid balance (micro tez) (it is not frozen and can be spent immediately).

rewardStakedOwn	
integer <int64>
Reward, corresponding to baker's own stake, paid to baker's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedEdge	
integer <int64>
Reward, corresponding to baker's edge from external stake, paid to baker's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedShared	
integer <int64>
Reward, corresponding to baker's external stake, paid to baker's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/attestation_rewards
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"baker": {},
"expected": 0,
"rewardDelegated": 0,
"rewardStakedOwn": 0,
"rewardStakedEdge": 0,
"rewardStakedShared": 0,
"quote": {}
}
]
Get attestation reward by id
Returns attestation reward operation with specified id.

path Parameters
id
required
integer <int64>
Operation id

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
type	
string
Type of the operation, attestation_reward

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
Height of the block from the genesis

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Block hash

baker	
Alias (object)
Baker expected to receive attestation reward

expected	
integer <int64>
Expected attestation reward, based on baker's active stake (micro tez)

rewardDelegated	
integer <int64>
Reward, corresponding to delegated stake, paid to baker's liquid balance (micro tez) (it is not frozen and can be spent immediately).

rewardStakedOwn	
integer <int64>
Reward, corresponding to baker's own stake, paid to baker's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedEdge	
integer <int64>
Reward, corresponding to baker's edge from external stake, paid to baker's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedShared	
integer <int64>
Reward, corresponding to baker's external stake, paid to baker's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/attestation_rewards/{id}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"baker": {
"alias": "string",
"address": "string"
},
"expected": 0,
"rewardDelegated": 0,
"rewardStakedOwn": 0,
"rewardStakedEdge": 0,
"rewardStakedShared": 0,
"quote": {
"btc": 0,
"eur": 0,
"usd": 0,
"cny": 0,
"jpy": 0,
"krw": 0,
"eth": 0,
"gbp": 0
}
}
Get attestation rewards count
Returns the total number of attestation reward operations (synthetic type).

query Parameters
level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/attestation_rewards/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get dal attestation rewards
Returns a list of dal attestation reward operations (synthetic type).

query Parameters
id	
Int64Parameter (object) Nullable
Filters operations by internal TzKT id.

baker	
AccountParameter (object) Nullable
Filters by baker. Allowed fields for .eqx mode: none.

level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts by specified field. Supported fields: id (default), level.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, dal_attestation_reward

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
Height of the block from the genesis

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Block hash

baker	
Alias (object)
Baker expected to receive dal attestation reward

expected	
integer <int64>
Expected dal attestation reward, based on baker's active stake (micro tez)

rewardDelegated	
integer <int64>
Reward, corresponding to delegated stake, paid to baker's liquid balance (micro tez) (it is not frozen and can be spent immediately).

rewardStakedOwn	
integer <int64>
Reward, corresponding to baker's own stake, paid to baker's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedEdge	
integer <int64>
Reward, corresponding to baker's edge from external stake, paid to baker's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedShared	
integer <int64>
Reward, corresponding to baker's external stake, paid to baker's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/dal_attestation_reward
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"baker": {},
"expected": 0,
"rewardDelegated": 0,
"rewardStakedOwn": 0,
"rewardStakedEdge": 0,
"rewardStakedShared": 0,
"quote": {}
}
]
Get dal attestation reward by id
Returns dal attestation reward operation with specified id.

path Parameters
id
required
integer <int64>
Operation id

query Parameters
quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
type	
string
Type of the operation, dal_attestation_reward

id	
integer <int64>
Unique ID of the operation, stored in the TzKT indexer database

level	
integer <int32>
Height of the block from the genesis

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

block	
string
Block hash

baker	
Alias (object)
Baker expected to receive dal attestation reward

expected	
integer <int64>
Expected dal attestation reward, based on baker's active stake (micro tez)

rewardDelegated	
integer <int64>
Reward, corresponding to delegated stake, paid to baker's liquid balance (micro tez) (it is not frozen and can be spent immediately).

rewardStakedOwn	
integer <int64>
Reward, corresponding to baker's own stake, paid to baker's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedEdge	
integer <int64>
Reward, corresponding to baker's edge from external stake, paid to baker's own staked balance (micro tez) (it is frozen and belongs to the baker).

rewardStakedShared	
integer <int64>
Reward, corresponding to baker's external stake, paid to baker's external staked balance (micro tez) (it is frozen and belongs to baker's stakers).

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/dal_attestation_reward/{id}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"block": "string",
"baker": {
"alias": "string",
"address": "string"
},
"expected": 0,
"rewardDelegated": 0,
"rewardStakedOwn": 0,
"rewardStakedEdge": 0,
"rewardStakedShared": 0,
"quote": {
"btc": 0,
"eur": 0,
"usd": 0,
"cny": 0,
"jpy": 0,
"krw": 0,
"eth": 0,
"gbp": 0
}
}
Get dal attestation rewards count
Returns the total number of dal attestation reward operations (synthetic type).

query Parameters
level	
Int32Parameter (object) Nullable
Filters by level.

timestamp	
TimestampParameter (object) Nullable
Filters by timestamp.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/dal_attestation_reward/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get autostaking ops
Returns a list of autostaking operations.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by level of the block where the operation happened.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the operation happened.
Click on the parameter to expand more details.

baker	
AccountParameter (object) Nullable
Filter by baker.
Click on the parameter to expand more details.

action	
StakingActionParameter (object) Nullable
Filter by autostaking action.
Click on the parameter to expand more details.

amount	
Int64Parameter (object) Nullable
Filter by amount.
Click on the parameter to expand more details.

stakingUpdatesCount	
Int32Parameter (object) Nullable
Filter by number of staking updates.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, autostaking

id	
integer <int64>
Internal TzKT ID.
[sortable]

level	
integer <int32>
Height of the block from the genesis

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

baker	
Alias (object)
Baker for which autostaking event happened

action	
string
Autostaking action (stake, unstake, finalize)

amount	
integer <int64>
Amount (micro tez)

stakingUpdatesCount	
integer <int64>
Number of staking updates happened internally

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/autostaking
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"baker": {},
"action": "string",
"amount": 0,
"stakingUpdatesCount": 0,
"quote": {}
}
]
Get autostaking ops count
Returns a total number of autostaking operations.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by level of the block where the operation happened.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the operation happened.
Click on the parameter to expand more details.

baker	
AccountParameter (object) Nullable
Filter by baker.
Click on the parameter to expand more details.

action	
StakingActionParameter (object) Nullable
Filter by autostaking action.
Click on the parameter to expand more details.

amount	
Int64Parameter (object) Nullable
Filter by amount.
Click on the parameter to expand more details.

stakingUpdatesCount	
Int32Parameter (object) Nullable
Filter by number of staking updates.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/autostaking/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get set_delegate_parameters ops
Returns a list of set_delegate_parameters operations.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, set_delegate_parameters

id	
integer <int64>
Internal TzKT ID.
[sortable]

level	
integer <int32>
Height of the block from the genesis

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

limitOfStakingOverBaking	
integer <int64> Nullable
This parameter determines the maximum portion (millionth) of external stake by stakers over the baker's own staked funds

edgeOfBakingOverStaking	
integer <int64> Nullable
This parameter determines the fraction (billionth) of the rewards that accrue to the delegateâ€™s frozen deposit â€“ the remainder is shared among its stakers

activationCycle	
integer <int32> Nullable
Cycle from which the specified staking parameters are activated

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/set_delegate_parameters
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"limitOfStakingOverBaking": 0,
"edgeOfBakingOverStaking": 0,
"activationCycle": 0,
"status": "string",
"errors": [],
"quote": {}
}
]
Get set_delegate_parameters ops count
Returns a total number of set_delegate_parameters operations.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/set_delegate_parameters/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get dal_publish_commitment ops
Returns a list of dal_publish_commitment operations.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the operation, dal_publish_commitment

id	
integer <int64>
Internal TzKT ID.
[sortable]

level	
integer <int32>
Height of the block from the genesis

timestamp	
string <date-time>
Datetime at which the block is claimed to have been created (ISO 8601, e.g. 2020-02-20T02:40:57Z)

hash	
string
Hash of the operation

sender	
Alias (object)
Information about the account who has sent the operation

counter	
integer <int32>
An account nonce which is used to prevent operation replay

gasLimit	
integer <int32>
A cap on the amount of gas a given operation can consume

gasUsed	
integer <int32>
Amount of gas, consumed by the operation

storageLimit	
integer <int32>
A cap on the amount of storage a given operation can consume

bakerFee	
integer <int64>
Fee to the baker, produced block, in which the operation was included (micro tez)

slot	
integer <int32>
Slot number

commitment	
string
Commitment hash

status	
string
Operation status (applied - an operation applied by the node and successfully added to the blockchain, failed - an operation which failed with some particular error (not enough balance, gas limit, etc), backtracked - an operation which was successful but reverted due to one of the following operations in the same operation group was failed, skipped - all operations after the failed one in an operation group)

errors	
Array of objects (OperationError) Nullable
List of errors provided by the node, injected the operation to the blockchain. null if there is no errors

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of operation


get
/v1/operations/dal_publish_commitment
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"hash": "string",
"sender": {},
"counter": 0,
"gasLimit": 0,
"gasUsed": 0,
"storageLimit": 0,
"bakerFee": 0,
"slot": 0,
"commitment": "string",
"status": "string",
"errors": [],
"quote": {}
}
]
Get dal_publish_commitment ops count
Returns a total number of dal_publish_commitment operations.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

hash	
OpHashParameter (object) Nullable
Filter by operation hash.
Click on the parameter to expand more details.

counter	
Int32Parameter (object) Nullable
Filter by operation counter.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by the domain level.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the operation.
Click on the parameter to expand more details.

status	
OperationStatusParameter (object) Nullable
Filter by operation status (applied, failed, backtracked, skipped).
Click on the parameter to expand more details.

sender	
AccountParameter (object) Nullable
Filter by operation sender address.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
Responses
200
Response Schema: application/json
integer <int32>

get
/v1/operations/dal_publish_commitment/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Protocols
Get protocols count
Returns the total number of protocols.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/protocols/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get protocols
Returns a list of protocols.

query Parameters
sort	
SortParameter (object) Nullable
Sorts protocols by specified field. Supported fields: code (default), firstLevel, lastLevel.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

Responses
200
Response Schema: application/json
Array ()
code	
integer <int32>
Protocol code, representing a number of protocol changes since genesis (mod 256, but -1 for the genesis block)

hash	
string
Hash of the protocol

version	
integer <int32>
Global version number

firstLevel	
integer <int32>
Block height where the protocol was applied

firstCycle	
integer <int32>
Index of the first cycle started with the protocol

firstCycleLevel	
integer <int32>
Level of the first block of the first cycle started with the protocol

lastLevel	
integer <int32> Nullable
Block height where the protocol ends. null if the protocol is active

constants	
ProtocolConstants (object)
Information about the protocol constants

extras	
any Nullable
Off-chain extras


get
/v1/protocols
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"code": 0,
"hash": "string",
"version": 0,
"firstLevel": 0,
"firstCycle": 0,
"firstCycleLevel": 0,
"lastLevel": 0,
"constants": {},
"extras": null
}
]
Get current protocol
Returns current protocol.

Responses
200
Response Schema: application/json
code	
integer <int32>
Protocol code, representing a number of protocol changes since genesis (mod 256, but -1 for the genesis block)

hash	
string
Hash of the protocol

version	
integer <int32>
Global version number

firstLevel	
integer <int32>
Block height where the protocol was applied

firstCycle	
integer <int32>
Index of the first cycle started with the protocol

firstCycleLevel	
integer <int32>
Level of the first block of the first cycle started with the protocol

lastLevel	
integer <int32> Nullable
Block height where the protocol ends. null if the protocol is active

constants	
ProtocolConstants (object)
Information about the protocol constants

extras	
any Nullable
Off-chain extras


get
/v1/protocols/current
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"code": 0,
"hash": "string",
"version": 0,
"firstLevel": 0,
"firstCycle": 0,
"firstCycleLevel": 0,
"lastLevel": 0,
"constants": {
"rampUpCycles": 0,
"noRewardCycles": 0,
"consensusRightsDelay": 0,
"delegateParametersActivationDelay": 0,
"blocksPerCycle": 0,
"blocksPerCommitment": 0,
"blocksPerSnapshot": 0,
"blocksPerVoting": 0,
"timeBetweenBlocks": 0,
"attestersPerBlock": 0,
"hardOperationGasLimit": 0,
"hardOperationStorageLimit": 0,
"hardBlockGasLimit": 0,
"minimalStake": 0,
"minimalFrozenStake": 0,
"blockDeposit": 0,
"blockReward": [],
"attestationDeposit": 0,
"attestationReward": [],
"originationSize": 0,
"byteCost": 0,
"proposalQuorum": 0,
"ballotQuorumMin": 0,
"ballotQuorumMax": 0,
"lbToggleThreshold": 0,
"consensusThreshold": 0,
"minParticipationNumerator": 0,
"minParticipationDenominator": 0,
"denunciationPeriod": 0,
"slashingDelay": 0,
"maxDelegatedOverFrozenRatio": 0,
"maxExternalOverOwnStakeRatio": 0,
"smartRollupOriginationSize": 0,
"smartRollupStakeAmount": 0,
"smartRollupChallengeWindow": 0,
"smartRollupCommitmentPeriod": 0,
"smartRollupTimeoutPeriod": 0,
"dalNumberOfShards": 0,
"dictator": "string",
"endorsersPerBlock": 0,
"endorsementDeposit": 0,
"endorsementReward": []
},
"extras": null
}
Get protocol by code
Returns a protocol with the specified proto code.

path Parameters
code
required
integer <int32>
Protocol code (e.g. 4 for Athens, 5 for Babylon, etc)

Responses
200
Response Schema: application/json
code	
integer <int32>
Protocol code, representing a number of protocol changes since genesis (mod 256, but -1 for the genesis block)

hash	
string
Hash of the protocol

version	
integer <int32>
Global version number

firstLevel	
integer <int32>
Block height where the protocol was applied

firstCycle	
integer <int32>
Index of the first cycle started with the protocol

firstCycleLevel	
integer <int32>
Level of the first block of the first cycle started with the protocol

lastLevel	
integer <int32> Nullable
Block height where the protocol ends. null if the protocol is active

constants	
ProtocolConstants (object)
Information about the protocol constants

extras	
any Nullable
Off-chain extras


get
/v1/protocols/{code}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"code": 0,
"hash": "string",
"version": 0,
"firstLevel": 0,
"firstCycle": 0,
"firstCycleLevel": 0,
"lastLevel": 0,
"constants": {
"rampUpCycles": 0,
"noRewardCycles": 0,
"consensusRightsDelay": 0,
"delegateParametersActivationDelay": 0,
"blocksPerCycle": 0,
"blocksPerCommitment": 0,
"blocksPerSnapshot": 0,
"blocksPerVoting": 0,
"timeBetweenBlocks": 0,
"attestersPerBlock": 0,
"hardOperationGasLimit": 0,
"hardOperationStorageLimit": 0,
"hardBlockGasLimit": 0,
"minimalStake": 0,
"minimalFrozenStake": 0,
"blockDeposit": 0,
"blockReward": [],
"attestationDeposit": 0,
"attestationReward": [],
"originationSize": 0,
"byteCost": 0,
"proposalQuorum": 0,
"ballotQuorumMin": 0,
"ballotQuorumMax": 0,
"lbToggleThreshold": 0,
"consensusThreshold": 0,
"minParticipationNumerator": 0,
"minParticipationDenominator": 0,
"denunciationPeriod": 0,
"slashingDelay": 0,
"maxDelegatedOverFrozenRatio": 0,
"maxExternalOverOwnStakeRatio": 0,
"smartRollupOriginationSize": 0,
"smartRollupStakeAmount": 0,
"smartRollupChallengeWindow": 0,
"smartRollupCommitmentPeriod": 0,
"smartRollupTimeoutPeriod": 0,
"dalNumberOfShards": 0,
"dictator": "string",
"endorsersPerBlock": 0,
"endorsementDeposit": 0,
"endorsementReward": []
},
"extras": null
}
Get protocol by hash
Returns a protocol with the specified hash.

path Parameters
hash
required
string
Protocol hash

Responses
200
Response Schema: application/json
code	
integer <int32>
Protocol code, representing a number of protocol changes since genesis (mod 256, but -1 for the genesis block)

hash	
string
Hash of the protocol

version	
integer <int32>
Global version number

firstLevel	
integer <int32>
Block height where the protocol was applied

firstCycle	
integer <int32>
Index of the first cycle started with the protocol

firstCycleLevel	
integer <int32>
Level of the first block of the first cycle started with the protocol

lastLevel	
integer <int32> Nullable
Block height where the protocol ends. null if the protocol is active

constants	
ProtocolConstants (object)
Information about the protocol constants

extras	
any Nullable
Off-chain extras


get
/v1/protocols/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"code": 0,
"hash": "string",
"version": 0,
"firstLevel": 0,
"firstCycle": 0,
"firstCycleLevel": 0,
"lastLevel": 0,
"constants": {
"rampUpCycles": 0,
"noRewardCycles": 0,
"consensusRightsDelay": 0,
"delegateParametersActivationDelay": 0,
"blocksPerCycle": 0,
"blocksPerCommitment": 0,
"blocksPerSnapshot": 0,
"blocksPerVoting": 0,
"timeBetweenBlocks": 0,
"attestersPerBlock": 0,
"hardOperationGasLimit": 0,
"hardOperationStorageLimit": 0,
"hardBlockGasLimit": 0,
"minimalStake": 0,
"minimalFrozenStake": 0,
"blockDeposit": 0,
"blockReward": [],
"attestationDeposit": 0,
"attestationReward": [],
"originationSize": 0,
"byteCost": 0,
"proposalQuorum": 0,
"ballotQuorumMin": 0,
"ballotQuorumMax": 0,
"lbToggleThreshold": 0,
"consensusThreshold": 0,
"minParticipationNumerator": 0,
"minParticipationDenominator": 0,
"denunciationPeriod": 0,
"slashingDelay": 0,
"maxDelegatedOverFrozenRatio": 0,
"maxExternalOverOwnStakeRatio": 0,
"smartRollupOriginationSize": 0,
"smartRollupStakeAmount": 0,
"smartRollupChallengeWindow": 0,
"smartRollupCommitmentPeriod": 0,
"smartRollupTimeoutPeriod": 0,
"dalNumberOfShards": 0,
"dictator": "string",
"endorsersPerBlock": 0,
"endorsementDeposit": 0,
"endorsementReward": []
},
"extras": null
}
Get protocol by cycle
Returns a protocol at the specified cycle.

path Parameters
cycle
required
integer <int32>
Cycle index

Responses
200
Response Schema: application/json
code	
integer <int32>
Protocol code, representing a number of protocol changes since genesis (mod 256, but -1 for the genesis block)

hash	
string
Hash of the protocol

version	
integer <int32>
Global version number

firstLevel	
integer <int32>
Block height where the protocol was applied

firstCycle	
integer <int32>
Index of the first cycle started with the protocol

firstCycleLevel	
integer <int32>
Level of the first block of the first cycle started with the protocol

lastLevel	
integer <int32> Nullable
Block height where the protocol ends. null if the protocol is active

constants	
ProtocolConstants (object)
Information about the protocol constants

extras	
any Nullable
Off-chain extras


get
/v1/protocols/cycles/{cycle}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"code": 0,
"hash": "string",
"version": 0,
"firstLevel": 0,
"firstCycle": 0,
"firstCycleLevel": 0,
"lastLevel": 0,
"constants": {
"rampUpCycles": 0,
"noRewardCycles": 0,
"consensusRightsDelay": 0,
"delegateParametersActivationDelay": 0,
"blocksPerCycle": 0,
"blocksPerCommitment": 0,
"blocksPerSnapshot": 0,
"blocksPerVoting": 0,
"timeBetweenBlocks": 0,
"attestersPerBlock": 0,
"hardOperationGasLimit": 0,
"hardOperationStorageLimit": 0,
"hardBlockGasLimit": 0,
"minimalStake": 0,
"minimalFrozenStake": 0,
"blockDeposit": 0,
"blockReward": [],
"attestationDeposit": 0,
"attestationReward": [],
"originationSize": 0,
"byteCost": 0,
"proposalQuorum": 0,
"ballotQuorumMin": 0,
"ballotQuorumMax": 0,
"lbToggleThreshold": 0,
"consensusThreshold": 0,
"minParticipationNumerator": 0,
"minParticipationDenominator": 0,
"denunciationPeriod": 0,
"slashingDelay": 0,
"maxDelegatedOverFrozenRatio": 0,
"maxExternalOverOwnStakeRatio": 0,
"smartRollupOriginationSize": 0,
"smartRollupStakeAmount": 0,
"smartRollupChallengeWindow": 0,
"smartRollupCommitmentPeriod": 0,
"smartRollupTimeoutPeriod": 0,
"dalNumberOfShards": 0,
"dictator": "string",
"endorsersPerBlock": 0,
"endorsementDeposit": 0,
"endorsementReward": []
},
"extras": null
}
Quotes
Get quotes count
Returns the total number of quotes aligned with blocks.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/quotes/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get last quote
Returns last known quote.

Responses
200
Response Schema: application/json
level	
integer <int32>
The level of the block at which the quote has been saved

timestamp	
string <date-time>
The datetime at which the quote has been saved (ISO 8601, e.g. 2020-02-20T02:40:57Z)

btc	
number <double>
XTZ/BTC price

eur	
number <double>
XTZ/EUR price

usd	
number <double>
XTZ/USD price

cny	
number <double>
XTZ/CNY price

jpy	
number <double>
XTZ/JPY price

krw	
number <double>
XTZ/KRW price

eth	
number <double>
XTZ/ETH price

gbp	
number <double>
XTZ/GBP price


get
/v1/quotes/last
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"btc": 0,
"eur": 0,
"usd": 0,
"cny": 0,
"jpy": 0,
"krw": 0,
"eth": 0,
"gbp": 0
}
Get quotes
Returns a list of quotes aligned with blocks.

query Parameters
level	
Int32Parameter (object) Nullable
Filters quotes by level.

timestamp	
DateTimeParameter (object) Nullable
Filters quotes by timestamp.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts quotes by specified field. Supported fields: level (default).

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

Responses
200
Response Schema: application/json
Array ()
level	
integer <int32>
The level of the block at which the quote has been saved

timestamp	
string <date-time>
The datetime at which the quote has been saved (ISO 8601, e.g. 2020-02-20T02:40:57Z)

btc	
number <double>
XTZ/BTC price

eur	
number <double>
XTZ/EUR price

usd	
number <double>
XTZ/USD price

cny	
number <double>
XTZ/CNY price

jpy	
number <double>
XTZ/JPY price

krw	
number <double>
XTZ/KRW price

eth	
number <double>
XTZ/ETH price

gbp	
number <double>
XTZ/GBP price


get
/v1/quotes
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"btc": 0,
"eur": 0,
"usd": 0,
"cny": 0,
"jpy": 0,
"krw": 0,
"eth": 0,
"gbp": 0
}
]
Rewards
Get baker cycle rewards count
Returns total number of cycles where the baker was active

path Parameters
address
required
string
Baker address

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/rewards/bakers/{address}/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get baker cycle rewards
Returns a list of baker rewards for every cycle, including future cycles.

path Parameters
address
required
string
Baker address.

query Parameters
cycle	
Int32Parameter (object) Nullable
Filter by cycle.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
cycle	
integer <int32>
Cycle in which rewards were or will be earned.
[sortable]

ownDelegatedBalance	
integer <int64>
Amount delegated from the baker's own balance (micro tez). This amount doesn't include staked amount.

externalDelegatedBalance	
integer <int64>
Amount delegated from external delegators and "unstakers" (delegators who left the baker, but still had locked unstaked balance delegated to the baker) (micro tez). This amount doesn't include external staked amount.

delegatorsCount	
integer <int32>
Number of delegators (those who were delegated to the baker). This doesn't include "unstakers" (delegators who left the baker, but still had locked unstaked balance delegated to the baker).

ownStakedBalance	
integer <int64>
Amount staked from the baker's own balance (micro tez).

externalStakedBalance	
integer <int64>
Amount staked from external stakers (micro tez).

stakersCount	
integer <int32>
Number of external stakers (those who delegated to the baker and also staked some amount).

issuedPseudotokens	
string Nullable
Amount of staking pseudotokens issued by/for external stakers.

bakingPower	
integer <int64>
Baker's baking power

totalBakingPower	
integer <int64>
Sum of baking power of all active bakers

expectedBlocks	
number <double>
Expected value of how many blocks baker should produce based on baker's active stake, selected stake and blocks per cycle.

futureBlocks	
integer <int32>
Number of blocks which baker is allowed to produce in this cycle based on future baking rights.

futureBlockRewards	
integer <int64>
Estimated value of future block rewards.

blocks	
integer <int32>
Number of successfully baked blocks (both proposed and re-proposed blocks).

blockRewardsDelegated	
integer <int64>
Rewards, corresponding to delegated stake, received for baked blocks (both proposed and re-proposed blocks) on baker's liquid balance (it is not frozen and can be spent immediately).

blockRewardsStakedOwn	
integer <int64>
Rewards, corresponding to baker's own stake, received for baked blocks (both proposed and re-proposed blocks) on baker's own staked balance (it is frozen and belongs to the baker).

blockRewardsStakedEdge	
integer <int64>
Rewards, corresponding to baker's edge from external stake, received for baked blocks (both proposed and re-proposed blocks) on baker's own staked balance (it is frozen and belongs to the baker).

blockRewardsStakedShared	
integer <int64>
Rewards, corresponding to baker's external stake, received for baked blocks (both proposed and re-proposed blocks) on baker's external staked balance (it is frozen and belongs to baker's stakers).

missedBlocks	
integer <int32>
Number of missed opportunities to bake block.

missedBlockRewards	
integer <int64>
Rewards which were not received due to missing blocks.

expectedAttestations	
number <double>
Expected value of how many slots baker should validate based on baker's active stake, selected stake and attestation slots per cycle.

futureAttestations	
integer <int32>
Number of slots which baker is allowed to validate in this cycle based on future attestation rights.

futureAttestationRewards	
integer <int64>
Estimated value of future attestation rewards.

attestations	
integer <int32>
Number of successfully attested slots.

attestationRewardsDelegated	
integer <int64>
Rewards, corresponding to delegated stake, received for attested slots on baker's liquid balance (it is not frozen and can be spent immediately).

attestationRewardsStakedOwn	
integer <int64>
Rewards, corresponding to baker's own stake, received for attested slots on baker's own staked balance (it is frozen and belongs to the baker).

attestationRewardsStakedEdge	
integer <int64>
Rewards, corresponding to baker's edge from external stake, received for attested slots on baker's own staked balance (it is frozen and belongs to the baker).

attestationRewardsStakedShared	
integer <int64>
Rewards, corresponding to baker's external stake, received for attested slots on baker's external staked balance (it is frozen and belongs to baker's stakers).

missedAttestations	
integer <int32>
Number of not attested (missed) slots.

missedAttestationRewards	
integer <int64>
Rewards which were not received due to missing attestations.

expectedDalAttestations	
integer <int64>
Expected value of how many dal shards baker should attest based on baker's active stake, selected stake and total shards per cycle.

futureDalAttestationRewards	
integer <int64>
Estimated value of future dal attestation rewards.

dalAttestationRewardsDelegated	
integer <int64>
Rewards, corresponding to delegated stake, received for attested dal shards on baker's liquid balance (it is not frozen and can be spent immediately).

dalAttestationRewardsStakedOwn	
integer <int64>
Rewards, corresponding to baker's own stake, received for attested dal shards on baker's own staked balance (it is frozen and belongs to the baker).

dalAttestationRewardsStakedEdge	
integer <int64>
Rewards, corresponding to baker's edge from external stake, received for attested dal shards on baker's own staked balance (it is frozen and belongs to the baker).

dalAttestationRewardsStakedShared	
integer <int64>
Rewards, corresponding to baker's external stake, received for attested dal shards on baker's external staked balance (it is frozen and belongs to baker's stakers).

missedDalAttestationRewards	
integer <int64>
Rewards which were not received due to denunciation or not enough participation.

blockFees	
integer <int64>
Operation fees which were harvested from successfully baked blocks.

missedBlockFees	
integer <int64>
Operation fees which were not received due to missing blocks.

doubleBakingRewards	
integer <int64>
Rewards for detecting double baking (accusing someone of producing two different blocks at the same level).

doubleBakingLostStaked	
integer <int64>
Amount of baker's own staked balance lost due to double baking

doubleBakingLostUnstaked	
integer <int64>
Amount of baker's own unstaked balance lost due to double baking

doubleBakingLostExternalStaked	
integer <int64>
Amount of baker's external staked balance lost due to double baking

doubleBakingLostExternalUnstaked	
integer <int64>
Amount of baker's external unstaked balance lost due to double baking

doubleConsensusRewards	
integer <int64>
Rewards for detecting double (pre)attestation (accusing someone of validating two different blocks at the same level).

doubleConsensusLostStaked	
integer <int64>
Amount of baker's own staked balance lost due to double (pre)attestation

doubleConsensusLostUnstaked	
integer <int64>
Amount of baker's own unstaked balance lost due to double (pre)attestation

doubleConsensusLostExternalStaked	
integer <int64>
Amount of baker's external staked balance lost due to double (pre)attestation

doubleConsensusLostExternalUnstaked	
integer <int64>
Amount of baker's external unstaked balance lost due to double (pre)attestation

vdfRevelationRewardsDelegated	
integer <int64>
Rewards, corresponding to delegated stake, for including vdf revelations, received on baker's liquid balance (it is not frozen and can be spent immediately).

vdfRevelationRewardsStakedOwn	
integer <int64>
Rewards, corresponding to baker's own stake, for including vdf revelations, received on baker's own staked balance (it is frozen and belongs to the baker).

vdfRevelationRewardsStakedEdge	
integer <int64>
Rewards, corresponding to baker's edge from external stake, for including vdf revelations, received on baker's own staked balance (it is frozen and belongs to the baker).

vdfRevelationRewardsStakedShared	
integer <int64>
Rewards, corresponding to baker's external stake, for including vdf revelations, received on baker's external staked balance (it is frozen and belongs to baker's stakers).

nonceRevelationRewardsDelegated	
integer <int64>
Rewards, corresponding to delegated stake, for including seed nonce revelations, received on baker's liquid balance (it is not frozen and can be spent immediately).

nonceRevelationRewardsStakedOwn	
integer <int64>
Rewards, corresponding to baker's own stake, for including seed nonce revelations, received on baker's own staked balance (it is frozen and belongs to the baker).

nonceRevelationRewardsStakedEdge	
integer <int64>
Rewards, corresponding to baker's edge from external stake, for including seed nonce revelations, received on baker's own staked balance (it is frozen and belongs to the baker).

nonceRevelationRewardsStakedShared	
integer <int64>
Rewards, corresponding to baker's external stake, for including seed nonce revelations, received on baker's external staked balance (it is frozen and belongs to baker's stakers).

nonceRevelationLosses	
integer <int64>
Amount of frozen deposits lost due to missing seed nonce revelation (always zero after Ithaca).

quote	
QuoteShort (object) Nullable
Injected historical quote at the end of the cycle

expectedDalShards	
integer <int64>
DEPRECATED

expectedEndorsements	
number <double>
DEPRECATED

futureEndorsements	
integer <int32>
DEPRECATED

futureEndorsementRewards	
integer <int64>
DEPRECATED

endorsements	
integer <int32>
DEPRECATED

endorsementRewardsDelegated	
integer <int64>
DEPRECATED

endorsementRewardsStakedOwn	
integer <int64>
DEPRECATED

endorsementRewardsStakedEdge	
integer <int64>
DEPRECATED

endorsementRewardsStakedShared	
integer <int64>
DEPRECATED

missedEndorsements	
integer <int32>
DEPRECATED

missedEndorsementRewards	
integer <int64>
DEPRECATED

doubleEndorsingRewards	
integer <int64>
DEPRECATED

doubleEndorsingLostStaked	
integer <int64>
DEPRECATED

doubleEndorsingLostUnstaked	
integer <int64>
DEPRECATED

doubleEndorsingLostExternalStaked	
integer <int64>
DEPRECATED

doubleEndorsingLostExternalUnstaked	
integer <int64>
DEPRECATED

doublePreendorsingRewards	
integer <int64>
DEPRECATED

doublePreendorsingLostStaked	
integer <int64>
DEPRECATED

doublePreendorsingLostUnstaked	
integer <int64>
DEPRECATED

doublePreendorsingLostExternalStaked	
integer <int64>
DEPRECATED

doublePreendorsingLostExternalUnstaked	
integer <int64>
DEPRECATED


get
/v1/rewards/bakers/{address}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"cycle": 0,
"ownDelegatedBalance": 0,
"externalDelegatedBalance": 0,
"delegatorsCount": 0,
"ownStakedBalance": 0,
"externalStakedBalance": 0,
"stakersCount": 0,
"issuedPseudotokens": "string",
"bakingPower": 0,
"totalBakingPower": 0,
"expectedBlocks": 0,
"futureBlocks": 0,
"futureBlockRewards": 0,
"blocks": 0,
"blockRewardsDelegated": 0,
"blockRewardsStakedOwn": 0,
"blockRewardsStakedEdge": 0,
"blockRewardsStakedShared": 0,
"missedBlocks": 0,
"missedBlockRewards": 0,
"expectedAttestations": 0,
"futureAttestations": 0,
"futureAttestationRewards": 0,
"attestations": 0,
"attestationRewardsDelegated": 0,
"attestationRewardsStakedOwn": 0,
"attestationRewardsStakedEdge": 0,
"attestationRewardsStakedShared": 0,
"missedAttestations": 0,
"missedAttestationRewards": 0,
"expectedDalAttestations": 0,
"futureDalAttestationRewards": 0,
"dalAttestationRewardsDelegated": 0,
"dalAttestationRewardsStakedOwn": 0,
"dalAttestationRewardsStakedEdge": 0,
"dalAttestationRewardsStakedShared": 0,
"missedDalAttestationRewards": 0,
"blockFees": 0,
"missedBlockFees": 0,
"doubleBakingRewards": 0,
"doubleBakingLostStaked": 0,
"doubleBakingLostUnstaked": 0,
"doubleBakingLostExternalStaked": 0,
"doubleBakingLostExternalUnstaked": 0,
"doubleConsensusRewards": 0,
"doubleConsensusLostStaked": 0,
"doubleConsensusLostUnstaked": 0,
"doubleConsensusLostExternalStaked": 0,
"doubleConsensusLostExternalUnstaked": 0,
"vdfRevelationRewardsDelegated": 0,
"vdfRevelationRewardsStakedOwn": 0,
"vdfRevelationRewardsStakedEdge": 0,
"vdfRevelationRewardsStakedShared": 0,
"nonceRevelationRewardsDelegated": 0,
"nonceRevelationRewardsStakedOwn": 0,
"nonceRevelationRewardsStakedEdge": 0,
"nonceRevelationRewardsStakedShared": 0,
"nonceRevelationLosses": 0,
"quote": {},
"expectedDalShards": 0,
"expectedEndorsements": 0,
"futureEndorsements": 0,
"futureEndorsementRewards": 0,
"endorsements": 0,
"endorsementRewardsDelegated": 0,
"endorsementRewardsStakedOwn": 0,
"endorsementRewardsStakedEdge": 0,
"endorsementRewardsStakedShared": 0,
"missedEndorsements": 0,
"missedEndorsementRewards": 0,
"doubleEndorsingRewards": 0,
"doubleEndorsingLostStaked": 0,
"doubleEndorsingLostUnstaked": 0,
"doubleEndorsingLostExternalStaked": 0,
"doubleEndorsingLostExternalUnstaked": 0,
"doublePreendorsingRewards": 0,
"doublePreendorsingLostStaked": 0,
"doublePreendorsingLostUnstaked": 0,
"doublePreendorsingLostExternalStaked": 0,
"doublePreendorsingLostExternalUnstaked": 0
}
]
Get delegator cycle rewards count
Returns total number of cycles where the delegator was delegated to an active baker

path Parameters
address
required
string
Delegator address

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/rewards/delegators/{address}/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get delegator cycle rewards
Returns a list of delegator rewards for every cycle, including future cycles.

path Parameters
address
required
string
Delegator address.

query Parameters
cycle	
Int32Parameter (object) Nullable
Filter by cycle.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
cycle	
integer <int32>
Cycle in which rewards were or will be earned.
[sortable]

baker	
Alias (object)
Baker at the snapshot time.

delegatedBalance	
integer <int64>
Amount delegated to the baker at the snapshot time (micro tez). This amount doesn't include staked amount.

stakedPseudotokens	
string Nullable
Amount of staked pseudotokens, representing staker's share within the baker's externalStakedBalance at the snapshot time.

stakedBalance	
integer <int64> Nullable
Estimated amount staked to the baker at the snapshot time (micro tez). It's computed on-the-fly as externalStakedBalance * stakedPseudotokens / issuedPseudotokens.

bakerRewards	
BakerRewards (object)
Rewards of the delegator's baker, from which the delegator can estimate his share, given his delegatedBalance.

quote	
QuoteShort (object) Nullable
Injected historical quote at the end of the cycle

bakingPower	
integer <int64>
DEPRECATED

totalBakingPower	
integer <int64>
DEPRECATED

bakerDelegatedBalance	
integer <int64>
DEPRECATED

externalDelegatedBalance	
integer <int64>
DEPRECATED

bakerStakedBalance	
integer <int64>
DEPRECATED

externalStakedBalance	
integer <int64>
DEPRECATED

expectedBlocks	
number <double>
DEPRECATED

expectedEndorsements	
number <double>
DEPRECATED

expectedDalShards	
integer <int64>
DEPRECATED

futureBlocks	
integer <int32>
DEPRECATED

futureBlockRewards	
integer <int64>
DEPRECATED

blocks	
integer <int32>
DEPRECATED

blockRewardsDelegated	
integer <int64>
DEPRECATED

blockRewardsStakedOwn	
integer <int64>
DEPRECATED

blockRewardsStakedEdge	
integer <int64>
DEPRECATED

blockRewardsStakedShared	
integer <int64>
DEPRECATED

missedBlocks	
integer <int32>
DEPRECATED

missedBlockRewards	
integer <int64>
DEPRECATED

futureEndorsements	
integer <int32>
DEPRECATED

futureEndorsementRewards	
integer <int64>
DEPRECATED

endorsements	
integer <int32>
DEPRECATED

endorsementRewardsDelegated	
integer <int64>
DEPRECATED

endorsementRewardsStakedOwn	
integer <int64>
DEPRECATED

endorsementRewardsStakedEdge	
integer <int64>
DEPRECATED

endorsementRewardsStakedShared	
integer <int64>
DEPRECATED

missedEndorsements	
integer <int32>
DEPRECATED

missedEndorsementRewards	
integer <int64>
DEPRECATED

futureDalAttestationRewards	
integer <int64>
DEPRECATED

dalAttestationRewardsDelegated	
integer <int64>
DEPRECATED

dalAttestationRewardsStakedOwn	
integer <int64>
DEPRECATED

dalAttestationRewardsStakedEdge	
integer <int64>
DEPRECATED

dalAttestationRewardsStakedShared	
integer <int64>
DEPRECATED

missedDalAttestationRewards	
integer <int64>
DEPRECATED

blockFees	
integer <int64>
DEPRECATED

missedBlockFees	
integer <int64>
DEPRECATED

doubleBakingRewards	
integer <int64>
DEPRECATED

doubleBakingLostStaked	
integer <int64>
DEPRECATED

doubleBakingLostUnstaked	
integer <int64>
DEPRECATED

doubleBakingLostExternalStaked	
integer <int64>
DEPRECATED

doubleBakingLostExternalUnstaked	
integer <int64>
DEPRECATED

doubleEndorsingRewards	
integer <int64>
DEPRECATED

doubleEndorsingLostStaked	
integer <int64>
DEPRECATED

doubleEndorsingLostUnstaked	
integer <int64>
DEPRECATED

doubleEndorsingLostExternalStaked	
integer <int64>
DEPRECATED

doubleEndorsingLostExternalUnstaked	
integer <int64>
DEPRECATED

doublePreendorsingRewards	
integer <int64>
DEPRECATED

doublePreendorsingLostStaked	
integer <int64>
DEPRECATED

doublePreendorsingLostUnstaked	
integer <int64>
DEPRECATED

doublePreendorsingLostExternalStaked	
integer <int64>
DEPRECATED

doublePreendorsingLostExternalUnstaked	
integer <int64>
DEPRECATED

vdfRevelationRewardsDelegated	
integer <int64>
DEPRECATED

vdfRevelationRewardsStakedOwn	
integer <int64>
DEPRECATED

vdfRevelationRewardsStakedEdge	
integer <int64>
DEPRECATED

vdfRevelationRewardsStakedShared	
integer <int64>
DEPRECATED

nonceRevelationRewardsDelegated	
integer <int64>
DEPRECATED

nonceRevelationRewardsStakedOwn	
integer <int64>
DEPRECATED

nonceRevelationRewardsStakedEdge	
integer <int64>
DEPRECATED

nonceRevelationRewardsStakedShared	
integer <int64>
DEPRECATED

nonceRevelationLosses	
integer <int64>
DEPRECATED


get
/v1/rewards/delegators/{address}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"cycle": 0,
"baker": {},
"delegatedBalance": 0,
"stakedPseudotokens": "string",
"stakedBalance": 0,
"bakerRewards": {},
"quote": {},
"bakingPower": 0,
"totalBakingPower": 0,
"bakerDelegatedBalance": 0,
"externalDelegatedBalance": 0,
"bakerStakedBalance": 0,
"externalStakedBalance": 0,
"expectedBlocks": 0,
"expectedEndorsements": 0,
"expectedDalShards": 0,
"futureBlocks": 0,
"futureBlockRewards": 0,
"blocks": 0,
"blockRewardsDelegated": 0,
"blockRewardsStakedOwn": 0,
"blockRewardsStakedEdge": 0,
"blockRewardsStakedShared": 0,
"missedBlocks": 0,
"missedBlockRewards": 0,
"futureEndorsements": 0,
"futureEndorsementRewards": 0,
"endorsements": 0,
"endorsementRewardsDelegated": 0,
"endorsementRewardsStakedOwn": 0,
"endorsementRewardsStakedEdge": 0,
"endorsementRewardsStakedShared": 0,
"missedEndorsements": 0,
"missedEndorsementRewards": 0,
"futureDalAttestationRewards": 0,
"dalAttestationRewardsDelegated": 0,
"dalAttestationRewardsStakedOwn": 0,
"dalAttestationRewardsStakedEdge": 0,
"dalAttestationRewardsStakedShared": 0,
"missedDalAttestationRewards": 0,
"blockFees": 0,
"missedBlockFees": 0,
"doubleBakingRewards": 0,
"doubleBakingLostStaked": 0,
"doubleBakingLostUnstaked": 0,
"doubleBakingLostExternalStaked": 0,
"doubleBakingLostExternalUnstaked": 0,
"doubleEndorsingRewards": 0,
"doubleEndorsingLostStaked": 0,
"doubleEndorsingLostUnstaked": 0,
"doubleEndorsingLostExternalStaked": 0,
"doubleEndorsingLostExternalUnstaked": 0,
"doublePreendorsingRewards": 0,
"doublePreendorsingLostStaked": 0,
"doublePreendorsingLostUnstaked": 0,
"doublePreendorsingLostExternalStaked": 0,
"doublePreendorsingLostExternalUnstaked": 0,
"vdfRevelationRewardsDelegated": 0,
"vdfRevelationRewardsStakedOwn": 0,
"vdfRevelationRewardsStakedEdge": 0,
"vdfRevelationRewardsStakedShared": 0,
"nonceRevelationRewardsDelegated": 0,
"nonceRevelationRewardsStakedOwn": 0,
"nonceRevelationRewardsStakedEdge": 0,
"nonceRevelationRewardsStakedShared": 0,
"nonceRevelationLosses": 0
}
]
Get staker cycle rewards count
Returns total number of cycles where the staker was staking to an active baker

path Parameters
address
required
string
Staker address

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/rewards/stakers/{address}/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get staker cycle rewards
Returns a list of staker rewards.

path Parameters
address
required
string
Staker address.

query Parameters
cycle	
Int32Parameter (object) Nullable
Filter by cycle.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
cycle	
integer <int32>
Cycle in which the rewards were earned.
[sortable]

baker	
Alias (object)
Staker's baker.

initialStake	
integer <int64>
Staked balance at the beginning of the cycle (micro tez).

addedStake	
integer <int64>
Amount added (staked) during the cycle (micro tez).

removedStake	
integer <int64>
Amount removed (unstaked) during the cycle (micro tez).

finalStake	
integer <int64>
Staked balance at the end of the cycle (micro tez).

avgStake	
integer <int64>
Average (per-block) staked balance (micro tez).

rewards	
integer <int64>
Staking rewards (or losses if negative) earned during the cycle (micro tez).

bakerRewards	
BakerRewards (object)
Rewards of the staker's baker, from which the staker can understand the source of the rewards/losses.

quote	
QuoteShort (object) Nullable
Injected historical quote at the end of the cycle


get
/v1/rewards/stakers/{address}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"cycle": 0,
"baker": {},
"initialStake": 0,
"addedStake": 0,
"removedStake": 0,
"finalStake": 0,
"avgStake": 0,
"rewards": 0,
"bakerRewards": {},
"quote": {}
}
]
Get reward split
Returns baker rewards for the specified cycle with all delegators and stakers (both snapshotted and actual ones). This endpoint helps to distribute delegation rewards between delegators in proportion to their delegated balances.

path Parameters
baker
required
string
Baker address

cycle
required
integer <int32>
Rewards cycle

query Parameters
offset	
integer <int32>
Default: 0
Specifies how many delegators/stakers in the reward split should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of delegators/stakers to return

Responses
200
Response Schema: application/json
cycle	
integer <int32>
Cycle in which rewards were or will be earned.
[sortable]

ownDelegatedBalance	
integer <int64>
Amount delegated from the baker's own balance (micro tez). This amount doesn't include staked amount.

externalDelegatedBalance	
integer <int64>
Amount delegated from external delegators and "unstakers" (delegators who left the baker, but still had locked unstaked balance delegated to the baker) (micro tez). This amount doesn't include external staked amount.

delegatorsCount	
integer <int32>
Number of delegators (those who were delegated to the baker). This doesn't include "unstakers" (delegators who left the baker, but still had locked unstaked balance delegated to the baker).

ownStakedBalance	
integer <int64>
Amount staked from the baker's own balance (micro tez).

externalStakedBalance	
integer <int64>
Amount staked from external stakers (micro tez).

stakersCount	
integer <int32>
Number of external stakers (those who delegated to the baker and also staked some amount).

issuedPseudotokens	
string Nullable
Amount of staking pseudotokens issued by/for external stakers.

bakingPower	
integer <int64>
Baker's baking power

totalBakingPower	
integer <int64>
Sum of baking power of all active bakers

expectedBlocks	
number <double>
Expected value of how many blocks baker should produce based on baker's active stake, selected stake and blocks per cycle.

futureBlocks	
integer <int32>
Number of blocks which baker is allowed to produce in this cycle based on future baking rights.

futureBlockRewards	
integer <int64>
Estimated value of future block rewards.

blocks	
integer <int32>
Number of successfully baked blocks (both proposed and re-proposed blocks).

blockRewardsDelegated	
integer <int64>
Rewards, corresponding to delegated stake, received for baked blocks (both proposed and re-proposed blocks) on baker's liquid balance (it is not frozen and can be spent immediately).

blockRewardsStakedOwn	
integer <int64>
Rewards, corresponding to baker's own stake, received for baked blocks (both proposed and re-proposed blocks) on baker's own staked balance (it is frozen and belongs to the baker).

blockRewardsStakedEdge	
integer <int64>
Rewards, corresponding to baker's edge from external stake, received for baked blocks (both proposed and re-proposed blocks) on baker's own staked balance (it is frozen and belongs to the baker).

blockRewardsStakedShared	
integer <int64>
Rewards, corresponding to baker's external stake, received for baked blocks (both proposed and re-proposed blocks) on baker's external staked balance (it is frozen and belongs to baker's stakers).

missedBlocks	
integer <int32>
Number of missed opportunities to bake block.

missedBlockRewards	
integer <int64>
Rewards which were not received due to missing blocks.

expectedAttestations	
number <double>
Expected value of how many slots baker should validate based on baker's active stake, selected stake and attestation slots per cycle.

futureAttestations	
integer <int32>
Number of slots which baker is allowed to validate in this cycle based on future attestation rights.

futureAttestationRewards	
integer <int64>
Estimated value of future attestation rewards.

attestations	
integer <int32>
Number of successfully attested slots.

attestationRewardsDelegated	
integer <int64>
Rewards, corresponding to delegated stake, received for attested slots on baker's liquid balance (it is not frozen and can be spent immediately).

attestationRewardsStakedOwn	
integer <int64>
Rewards, corresponding to baker's own stake, received for attested slots on baker's own staked balance (it is frozen and belongs to the baker).

attestationRewardsStakedEdge	
integer <int64>
Rewards, corresponding to baker's edge from external stake, received for attested slots on baker's own staked balance (it is frozen and belongs to the baker).

attestationRewardsStakedShared	
integer <int64>
Rewards, corresponding to baker's external stake, received for attested slots on baker's external staked balance (it is frozen and belongs to baker's stakers).

missedAttestations	
integer <int32>
Number of not attested (missed) slots.

missedAttestationRewards	
integer <int64>
Rewards which were not received due to missing attestations.

expectedDalAttestations	
integer <int64>
Expected value of how many dal shards baker should attest based on baker's active stake, selected stake and total shards per cycle.

futureDalAttestationRewards	
integer <int64>
Estimated value of future dal attestation rewards.

dalAttestationRewardsDelegated	
integer <int64>
Rewards, corresponding to delegated stake, received for attested dal shards on baker's liquid balance (it is not frozen and can be spent immediately).

dalAttestationRewardsStakedOwn	
integer <int64>
Rewards, corresponding to baker's own stake, received for attested dal shards on baker's own staked balance (it is frozen and belongs to the baker).

dalAttestationRewardsStakedEdge	
integer <int64>
Rewards, corresponding to baker's edge from external stake, received for attested dal shards on baker's own staked balance (it is frozen and belongs to the baker).

dalAttestationRewardsStakedShared	
integer <int64>
Rewards, corresponding to baker's external stake, received for attested dal shards on baker's external staked balance (it is frozen and belongs to baker's stakers).

missedDalAttestationRewards	
integer <int64>
Rewards which were not received due to denunciation or not enough participation.

blockFees	
integer <int64>
Operation fees which were harvested from successfully baked blocks.

missedBlockFees	
integer <int64>
Operation fees which were not received due to missing blocks.

doubleBakingRewards	
integer <int64>
Rewards for detecting double baking (accusing someone of producing two different blocks at the same level).

doubleBakingLostStaked	
integer <int64>
Amount of baker's own staked balance lost due to double baking

doubleBakingLostUnstaked	
integer <int64>
Amount of baker's own unstaked balance lost due to double baking

doubleBakingLostExternalStaked	
integer <int64>
Amount of baker's external staked balance lost due to double baking

doubleBakingLostExternalUnstaked	
integer <int64>
Amount of baker's external unstaked balance lost due to double baking

doubleConsensusRewards	
integer <int64>
Rewards for detecting double (pre)attestation (accusing someone of validating two different blocks at the same level).

doubleConsensusLostStaked	
integer <int64>
Amount of baker's own staked balance lost due to double (pre)attestation

doubleConsensusLostUnstaked	
integer <int64>
Amount of baker's own unstaked balance lost due to double (pre)attestation

doubleConsensusLostExternalStaked	
integer <int64>
Amount of baker's external staked balance lost due to double (pre)attestation

doubleConsensusLostExternalUnstaked	
integer <int64>
Amount of baker's external unstaked balance lost due to double (pre)attestation

vdfRevelationRewardsDelegated	
integer <int64>
Rewards, corresponding to delegated stake, for including vdf revelations, received on baker's liquid balance (it is not frozen and can be spent immediately).

vdfRevelationRewardsStakedOwn	
integer <int64>
Rewards, corresponding to baker's own stake, for including vdf revelations, received on baker's own staked balance (it is frozen and belongs to the baker).

vdfRevelationRewardsStakedEdge	
integer <int64>
Rewards, corresponding to baker's edge from external stake, for including vdf revelations, received on baker's own staked balance (it is frozen and belongs to the baker).

vdfRevelationRewardsStakedShared	
integer <int64>
Rewards, corresponding to baker's external stake, for including vdf revelations, received on baker's external staked balance (it is frozen and belongs to baker's stakers).

nonceRevelationRewardsDelegated	
integer <int64>
Rewards, corresponding to delegated stake, for including seed nonce revelations, received on baker's liquid balance (it is not frozen and can be spent immediately).

nonceRevelationRewardsStakedOwn	
integer <int64>
Rewards, corresponding to baker's own stake, for including seed nonce revelations, received on baker's own staked balance (it is frozen and belongs to the baker).

nonceRevelationRewardsStakedEdge	
integer <int64>
Rewards, corresponding to baker's edge from external stake, for including seed nonce revelations, received on baker's own staked balance (it is frozen and belongs to the baker).

nonceRevelationRewardsStakedShared	
integer <int64>
Rewards, corresponding to baker's external stake, for including seed nonce revelations, received on baker's external staked balance (it is frozen and belongs to baker's stakers).

nonceRevelationLosses	
integer <int64>
Amount of frozen deposits lost due to missing seed nonce revelation (always zero after Ithaca).

quote	
QuoteShort (object) Nullable
Injected historical quote at the end of the cycle

expectedDalShards	
integer <int64>
DEPRECATED

expectedEndorsements	
number <double>
DEPRECATED

futureEndorsements	
integer <int32>
DEPRECATED

futureEndorsementRewards	
integer <int64>
DEPRECATED

endorsements	
integer <int32>
DEPRECATED

endorsementRewardsDelegated	
integer <int64>
DEPRECATED

endorsementRewardsStakedOwn	
integer <int64>
DEPRECATED

endorsementRewardsStakedEdge	
integer <int64>
DEPRECATED

endorsementRewardsStakedShared	
integer <int64>
DEPRECATED

missedEndorsements	
integer <int32>
DEPRECATED

missedEndorsementRewards	
integer <int64>
DEPRECATED

doubleEndorsingRewards	
integer <int64>
DEPRECATED

doubleEndorsingLostStaked	
integer <int64>
DEPRECATED

doubleEndorsingLostUnstaked	
integer <int64>
DEPRECATED

doubleEndorsingLostExternalStaked	
integer <int64>
DEPRECATED

doubleEndorsingLostExternalUnstaked	
integer <int64>
DEPRECATED

doublePreendorsingRewards	
integer <int64>
DEPRECATED

doublePreendorsingLostStaked	
integer <int64>
DEPRECATED

doublePreendorsingLostUnstaked	
integer <int64>
DEPRECATED

doublePreendorsingLostExternalStaked	
integer <int64>
DEPRECATED

doublePreendorsingLostExternalUnstaked	
integer <int64>
DEPRECATED

delegators	
Array of objects (SplitDelegator)
List of delegators, forming baker's baking power. This list includes "unstakers" (delegators who left the baker, but still had locked unstaked balance delegated to the baker), therefore its length shouldn't necessarily match the delegatorsCount value.

stakers	
Array of objects (SplitStaker)
List of stakers, forming baker's baking power.

actualStakers	
Array of objects (SplitActualStaker)
List of actual stakers, receiving staking rewards regardless of contribution to the baker's baking power.


get
/v1/rewards/split/{baker}/{cycle}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"cycle": 0,
"ownDelegatedBalance": 0,
"externalDelegatedBalance": 0,
"delegatorsCount": 0,
"ownStakedBalance": 0,
"externalStakedBalance": 0,
"stakersCount": 0,
"issuedPseudotokens": "string",
"bakingPower": 0,
"totalBakingPower": 0,
"expectedBlocks": 0,
"futureBlocks": 0,
"futureBlockRewards": 0,
"blocks": 0,
"blockRewardsDelegated": 0,
"blockRewardsStakedOwn": 0,
"blockRewardsStakedEdge": 0,
"blockRewardsStakedShared": 0,
"missedBlocks": 0,
"missedBlockRewards": 0,
"expectedAttestations": 0,
"futureAttestations": 0,
"futureAttestationRewards": 0,
"attestations": 0,
"attestationRewardsDelegated": 0,
"attestationRewardsStakedOwn": 0,
"attestationRewardsStakedEdge": 0,
"attestationRewardsStakedShared": 0,
"missedAttestations": 0,
"missedAttestationRewards": 0,
"expectedDalAttestations": 0,
"futureDalAttestationRewards": 0,
"dalAttestationRewardsDelegated": 0,
"dalAttestationRewardsStakedOwn": 0,
"dalAttestationRewardsStakedEdge": 0,
"dalAttestationRewardsStakedShared": 0,
"missedDalAttestationRewards": 0,
"blockFees": 0,
"missedBlockFees": 0,
"doubleBakingRewards": 0,
"doubleBakingLostStaked": 0,
"doubleBakingLostUnstaked": 0,
"doubleBakingLostExternalStaked": 0,
"doubleBakingLostExternalUnstaked": 0,
"doubleConsensusRewards": 0,
"doubleConsensusLostStaked": 0,
"doubleConsensusLostUnstaked": 0,
"doubleConsensusLostExternalStaked": 0,
"doubleConsensusLostExternalUnstaked": 0,
"vdfRevelationRewardsDelegated": 0,
"vdfRevelationRewardsStakedOwn": 0,
"vdfRevelationRewardsStakedEdge": 0,
"vdfRevelationRewardsStakedShared": 0,
"nonceRevelationRewardsDelegated": 0,
"nonceRevelationRewardsStakedOwn": 0,
"nonceRevelationRewardsStakedEdge": 0,
"nonceRevelationRewardsStakedShared": 0,
"nonceRevelationLosses": 0,
"quote": {
"btc": 0,
"eur": 0,
"usd": 0,
"cny": 0,
"jpy": 0,
"krw": 0,
"eth": 0,
"gbp": 0
},
"expectedDalShards": 0,
"expectedEndorsements": 0,
"futureEndorsements": 0,
"futureEndorsementRewards": 0,
"endorsements": 0,
"endorsementRewardsDelegated": 0,
"endorsementRewardsStakedOwn": 0,
"endorsementRewardsStakedEdge": 0,
"endorsementRewardsStakedShared": 0,
"missedEndorsements": 0,
"missedEndorsementRewards": 0,
"doubleEndorsingRewards": 0,
"doubleEndorsingLostStaked": 0,
"doubleEndorsingLostUnstaked": 0,
"doubleEndorsingLostExternalStaked": 0,
"doubleEndorsingLostExternalUnstaked": 0,
"doublePreendorsingRewards": 0,
"doublePreendorsingLostStaked": 0,
"doublePreendorsingLostUnstaked": 0,
"doublePreendorsingLostExternalStaked": 0,
"doublePreendorsingLostExternalUnstaked": 0,
"delegators": [
{}
],
"stakers": [
{}
],
"actualStakers": [
{}
]
}
Get reward split member
Returns delegator/staker from the reward split for the specified cycle.

path Parameters
baker
required
string
Baker address

cycle
required
integer <int32>
Reward split cycle

member
required
string
Member address

Responses
200
Response Schema: application/json
address	
string
Address of the delegator

delegatedBalance	
integer <int64>
Amount delegated to the baker at the snapshot time (micro tez). This amount doesn't include staked amount.

stakedPseudotokens	
string Nullable
Amount of staked pseudotokens at the snapshot time, representing staker's share within the baker's externalStakedBalance.

stakedBalance	
integer <int64>
Estimated amount staked to the baker at the snapshot time (micro tez). It's computed on-the-fly as externalStakedBalance * stakedPseudotokens / issuedPseudotokens.

emptied	
boolean
Indicates whether the delegator is emptied (at the moment, not at the snapshot time). Emptied accounts (users with zero balance) should be re-allocated, so if you make payment to the emptied account you will pay allocation fee.


get
/v1/rewards/split/{baker}/{cycle}/{member}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"address": "string",
"delegatedBalance": 0,
"stakedPseudotokens": "string",
"stakedBalance": 0,
"emptied": true
}
Rights
Get rights count
Returns the total number of stored rights.

query Parameters
type	
BakingRightTypeParameter (object) Nullable
Filters rights by type (baking, attestation)

baker	
AccountParameter (object) Nullable
Filters rights by baker

cycle	
Int32Parameter (object) Nullable
Filters rights by cycle

level	
Int32Parameter (object) Nullable
Filters rights by level

slots	
Int32NullParameter (object) Nullable
Filters rights by slots

round	
Int32NullParameter (object) Nullable
Filters rights by round

status	
BakingRightStatusParameter (object) Nullable
Filters rights by status (future, realized, missed)

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/rights/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get rights
Returns a list of rights.

query Parameters
type	
BakingRightTypeParameter (object) Nullable
Filters rights by type (baking, attestation)

baker	
AccountParameter (object) Nullable
Filters rights by baker

cycle	
Int32Parameter (object) Nullable
Filters rights by cycle

level	
Int32Parameter (object) Nullable
Filters rights by level

slots	
Int32NullParameter (object) Nullable
Filters rights by slots

round	
Int32NullParameter (object) Nullable
Filters rights by round

status	
BakingRightStatusParameter (object) Nullable
Filters rights by status (future, realized, missed)

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts rights by specified field. Supported fields: level (default).

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

Responses
200
Response Schema: application/json
Array ()
type	
string
Type of the right:

baking - right to bake (produce) a block;
attestation - right to attest (validate) a block.
cycle	
integer <int32>
Cycle on which the right can be realized.

level	
integer <int32>
Level at which a block must be baked or an attestation must be sent.

timestamp	
string <date-time>
Time (estimated, in case of future rights) when a block must be baked or an attestation must be sent.

round	
integer <int32> Nullable
Round (0 - âˆž) at which the baker can propose/produce a block. If a baker at round 0 doesn't produce a block within the given time interval, then the right goes to a baker at round1, etc. For attestation rights this field is always null.

slots	
integer <int32> Nullable
Number of slots to be attested. For baking rights this field is always null.

baker	
Alias (object)
Baker to which baking or attestation right has been given.

status	
string
Status of the baking or attestation right:

future - the right is not realized yet;
realized - the right was successfully realized;
missed - the right was not realized.

get
/v1/rights
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"type": "string",
"cycle": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"round": 0,
"slots": 0,
"baker": {},
"status": "string"
}
]
SmartRollups
Get smart rollups count
Returns a total number of smart rollups.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

address	
AddressParameter (object) Nullable
Filter by smart rollup address.
Click on the parameter to expand more details.

creator	
AccountParameter (object) Nullable
Filter by smart rollup creator.
Click on the parameter to expand more details.

firstActivity	
Int32Parameter (object) Nullable
Filter by level of the block, where the rollup was first seen.
Click on the parameter to expand more details.

firstActivityTime	
TimestampParameter (object) Nullable
Filter by timestamp of the block, where the rollup was first seen.
Click on the parameter to expand more details.

lastActivity	
Int32Parameter (object) Nullable
Filter by level of the block, where the rollup was last seen.
Click on the parameter to expand more details.

lastActivityTime	
TimestampParameter (object) Nullable
Filter by timestamp of the block, where the rollup was last seen.
Click on the parameter to expand more details.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/smart_rollups/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get smart rollups
Returns a list of smart rollups.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

address	
AddressParameter (object) Nullable
Filter by smart rollup address.
Click on the parameter to expand more details.

creator	
AccountParameter (object) Nullable
Filter by smart rollup creator.
Click on the parameter to expand more details.

firstActivity	
Int32Parameter (object) Nullable
Filter by level of the block, where the rollup was first seen.
Click on the parameter to expand more details.

firstActivityTime	
TimestampParameter (object) Nullable
Filter by timestamp of the block, where the rollup was first seen.
Click on the parameter to expand more details.

lastActivity	
Int32Parameter (object) Nullable
Filter by level of the block, where the rollup was last seen.
Click on the parameter to expand more details.

lastActivityTime	
TimestampParameter (object) Nullable
Filter by timestamp of the block, where the rollup was last seen.
Click on the parameter to expand more details.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal TzKT id

type	
string
Type of the account

address	
string
Address of the account

alias	
string Nullable
Name of the account

creator	
Alias (object)
Information about the account, which has deployed the rollup to the blockchain

pvmKind	
string
PVM kind: arith or wasm

genesisCommitment	
string
Genesis commitment hash

lastCommitment	
string
The most recent cemented commitment hash

inboxLevel	
integer <int32>
Inbox level of the most recent cemented commitment

totalStakers	
integer <int32>
Total number of stakers.

activeStakers	
integer <int32>
Total number of active stakers.

executedCommitments	
integer <int32>
Number of commitments that were cemented and executed

cementedCommitments	
integer <int32>
Number of commitments that were cemented (including executed ones)

pendingCommitments	
integer <int32>
Number of pending commitments

refutedCommitments	
integer <int32>
Number of commitments that were refuted

orphanCommitments	
integer <int32>
Number of commitments that became orphan, due to their parent was refuted

smartRollupBonds	
integer <int64>
Amount of mutez locked as bonds

activeTokensCount	
integer <int32>
Number of account tokens with non-zero balances

tokenBalancesCount	
integer <int32>
Number of tokens the account ever had

tokenTransfersCount	
integer <int32>
Number of token transfers from/to the account

activeTicketsCount	
integer <int32>
Number of tickets the account owns.

ticketBalancesCount	
integer <int32>
Number of tickets the account ever owned.

ticketTransfersCount	
integer <int32>
Number of ticket transfers from/to the account.

numTransactions	
integer <int32>
Number of transaction operations related to the account

transferTicketCount	
integer <int32>
Number of transfer ticket operations related to the account

smartRollupCementCount	
integer <int32>
Number of smart_rollup_cement operations related to the account

smartRollupExecuteCount	
integer <int32>
Number of smart_rollup_execute_outbox_message operations related to the account

smartRollupOriginateCount	
integer <int32>
Number of smart_rollup_originate operations related to the account

smartRollupPublishCount	
integer <int32>
Number of smart_rollup_publish operations related to the account

smartRollupRecoverBondCount	
integer <int32>
Number of smart_rollup_recover_bond operations related to the account

smartRollupRefuteCount	
integer <int32>
Number of smart_rollup_refute operations related to the account

refutationGamesCount	
integer <int32>
Number of smart rollup refutation games related to the account

activeRefutationGamesCount	
integer <int32>
Number of active smart rollup refutation games related to the account

firstActivity	
integer <int32>
Block height at which the ghost contract appeared first time

firstActivityTime	
string <date-time>
Block datetime at which the ghost contract appeared first time (ISO 8601, e.g. 2020-02-20T02:40:57Z)

lastActivity	
integer <int32>
Height of the block in which the ghost contract state was changed last time

lastActivityTime	
string <date-time>
Datetime of the block in which the ghost contract state was changed last time (ISO 8601, e.g. 2020-02-20T02:40:57Z)

extras	
any Nullable
Off-chain extras


get
/v1/smart_rollups
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"type": "string",
"address": "string",
"alias": "string",
"creator": {},
"pvmKind": "string",
"genesisCommitment": "string",
"lastCommitment": "string",
"inboxLevel": 0,
"totalStakers": 0,
"activeStakers": 0,
"executedCommitments": 0,
"cementedCommitments": 0,
"pendingCommitments": 0,
"refutedCommitments": 0,
"orphanCommitments": 0,
"smartRollupBonds": 0,
"activeTokensCount": 0,
"tokenBalancesCount": 0,
"tokenTransfersCount": 0,
"activeTicketsCount": 0,
"ticketBalancesCount": 0,
"ticketTransfersCount": 0,
"numTransactions": 0,
"transferTicketCount": 0,
"smartRollupCementCount": 0,
"smartRollupExecuteCount": 0,
"smartRollupOriginateCount": 0,
"smartRollupPublishCount": 0,
"smartRollupRecoverBondCount": 0,
"smartRollupRefuteCount": 0,
"refutationGamesCount": 0,
"activeRefutationGamesCount": 0,
"firstActivity": 0,
"firstActivityTime": "2019-08-24T14:15:22Z",
"lastActivity": 0,
"lastActivityTime": "2019-08-24T14:15:22Z",
"extras": null
}
]
Get smart rollup by address
Returns a smart rollup with the specified address.

path Parameters
address
required
string
Smart rollup address

Responses
200
Response Schema: application/json
id	
integer <int32>
Internal TzKT id

type	
string
Type of the account

address	
string
Address of the account

alias	
string Nullable
Name of the account

creator	
Alias (object)
Information about the account, which has deployed the rollup to the blockchain

pvmKind	
string
PVM kind: arith or wasm

genesisCommitment	
string
Genesis commitment hash

lastCommitment	
string
The most recent cemented commitment hash

inboxLevel	
integer <int32>
Inbox level of the most recent cemented commitment

totalStakers	
integer <int32>
Total number of stakers.

activeStakers	
integer <int32>
Total number of active stakers.

executedCommitments	
integer <int32>
Number of commitments that were cemented and executed

cementedCommitments	
integer <int32>
Number of commitments that were cemented (including executed ones)

pendingCommitments	
integer <int32>
Number of pending commitments

refutedCommitments	
integer <int32>
Number of commitments that were refuted

orphanCommitments	
integer <int32>
Number of commitments that became orphan, due to their parent was refuted

smartRollupBonds	
integer <int64>
Amount of mutez locked as bonds

activeTokensCount	
integer <int32>
Number of account tokens with non-zero balances

tokenBalancesCount	
integer <int32>
Number of tokens the account ever had

tokenTransfersCount	
integer <int32>
Number of token transfers from/to the account

activeTicketsCount	
integer <int32>
Number of tickets the account owns.

ticketBalancesCount	
integer <int32>
Number of tickets the account ever owned.

ticketTransfersCount	
integer <int32>
Number of ticket transfers from/to the account.

numTransactions	
integer <int32>
Number of transaction operations related to the account

transferTicketCount	
integer <int32>
Number of transfer ticket operations related to the account

smartRollupCementCount	
integer <int32>
Number of smart_rollup_cement operations related to the account

smartRollupExecuteCount	
integer <int32>
Number of smart_rollup_execute_outbox_message operations related to the account

smartRollupOriginateCount	
integer <int32>
Number of smart_rollup_originate operations related to the account

smartRollupPublishCount	
integer <int32>
Number of smart_rollup_publish operations related to the account

smartRollupRecoverBondCount	
integer <int32>
Number of smart_rollup_recover_bond operations related to the account

smartRollupRefuteCount	
integer <int32>
Number of smart_rollup_refute operations related to the account

refutationGamesCount	
integer <int32>
Number of smart rollup refutation games related to the account

activeRefutationGamesCount	
integer <int32>
Number of active smart rollup refutation games related to the account

firstActivity	
integer <int32>
Block height at which the ghost contract appeared first time

firstActivityTime	
string <date-time>
Block datetime at which the ghost contract appeared first time (ISO 8601, e.g. 2020-02-20T02:40:57Z)

lastActivity	
integer <int32>
Height of the block in which the ghost contract state was changed last time

lastActivityTime	
string <date-time>
Datetime of the block in which the ghost contract state was changed last time (ISO 8601, e.g. 2020-02-20T02:40:57Z)

extras	
any Nullable
Off-chain extras


get
/v1/smart_rollups/{address}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"id": 0,
"type": "string",
"address": "string",
"alias": "string",
"creator": {
"alias": "string",
"address": "string"
},
"pvmKind": "string",
"genesisCommitment": "string",
"lastCommitment": "string",
"inboxLevel": 0,
"totalStakers": 0,
"activeStakers": 0,
"executedCommitments": 0,
"cementedCommitments": 0,
"pendingCommitments": 0,
"refutedCommitments": 0,
"orphanCommitments": 0,
"smartRollupBonds": 0,
"activeTokensCount": 0,
"tokenBalancesCount": 0,
"tokenTransfersCount": 0,
"activeTicketsCount": 0,
"ticketBalancesCount": 0,
"ticketTransfersCount": 0,
"numTransactions": 0,
"transferTicketCount": 0,
"smartRollupCementCount": 0,
"smartRollupExecuteCount": 0,
"smartRollupOriginateCount": 0,
"smartRollupPublishCount": 0,
"smartRollupRecoverBondCount": 0,
"smartRollupRefuteCount": 0,
"refutationGamesCount": 0,
"activeRefutationGamesCount": 0,
"firstActivity": 0,
"firstActivityTime": "2019-08-24T14:15:22Z",
"lastActivity": 0,
"lastActivityTime": "2019-08-24T14:15:22Z",
"extras": null
}
Get smart rollup entrypoints
Returns entrypoints of the specified smart rollup.

path Parameters
address
required
string
Smart rollup address (starting with sr1)

query Parameters
all	
boolean
Default: false
If true, returns all entrypoints, including unused ones. Unused means that the entrypoint can be normalized to a more specific one. For example here (or %entry1 (unit %entry2) (nat %entry3)) the %entry1 is unused entrypoint because it can be normalized to %entry2 or %entry3

json	
boolean
Default: true
Include parameters schema in human-readable JSON format

micheline	
boolean
Default: false
Include parameters schema in micheline format

michelson	
boolean
Default: false
Include parameters schema in michelson format

Responses
200
Response Schema: application/json
Array ()
name	
string
Entrypoint name

jsonParameters	
any Nullable
A kind of JSON schema, describing how parameters will look like in a human-readable JSON format

michelineParameters	
IMicheline (object) Nullable
Parameters schema in micheline format

michelsonParameters	
string Nullable
Parameters schema in michelson format

unused	
boolean
Unused means that the entrypoint can be normalized to a more specific one. For example here (or %entry1 (unit %entry2) (nat %entry3)) the %entry1 is unused entrypoint because it can be normalized to %entry2 or %entry3


get
/v1/smart_rollups/{address}/entrypoints
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"name": "string",
"jsonParameters": null,
"michelineParameters": {},
"michelsonParameters": "string",
"unused": true
}
]
Get JSON Schema [2020-12] interface for the smart rollup
Returns standard JSON Schema for smart rollup parameter.

path Parameters
address
required
string
Smart rollup address

Responses
200
Response Schema: application/json
any Nullable

get
/v1/smart_rollups/{address}/interface
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
null
Get smart rollup stakers
Returns a list of smart rollup stakers.

path Parameters
address
required
object (AddressParameter)
Filter by smart rollup staker address.
Click on the parameter to expand more details.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

bondStatus	
SrBondStatusParameter (object) Nullable
Filter by staker bond status (active, returned, or lost).
Click on the parameter to expand more details.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

Responses
200
Response Schema: application/json
Array ()
alias	
string Nullable
Account alias name (off-chain data).

address	
string
Account address (public key hash).

id	
integer <int32>
Internal TzKT id.
[sortable]

bondStatus	
string
Bond status (active, returned, or lost).

bondLevel	
integer <int32>
Level of the block where the staker published his first commitment.
[sortable]

bondTime	
string <date-time>
Timestamp of the block where the staker published his first commitment.


get
/v1/smart_rollups/{address}/stakers
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"alias": "string",
"address": "string",
"id": 0,
"bondStatus": "string",
"bondLevel": 0,
"bondTime": "2019-08-24T14:15:22Z"
}
]
Get smart rollup commitments count
Returns a total number of smart rollup commitments.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

initiator	
AccountParameter (object) Nullable
Filter by initiator (an account published the commitment first).
Click on the parameter to expand more details.

rollup	
AccountParameter (object) Nullable
Filter by smart rollup.
Click on the parameter to expand more details.

inboxLevel	
Int32Parameter (object) Nullable
Filter by inbox level.
Click on the parameter to expand more details.

hash	
Src1HashParameter (object) Nullable
Filter by commitment hash.
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block, where the commitment was first seen.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp of the block, where the commitment was first seen.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block, where the commitment was last seen.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp of the block, where the commitment was last seen.
Click on the parameter to expand more details.

status	
SrCommitmentStatusParameter (object) Nullable
Filter by commitment status (pending, cemented, executed, refuted, or orphan).
Click on the parameter to expand more details.

predecessor.id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

predecessor.hash	
Src1HashParameter (object) Nullable
Filter by commitment hash.
Click on the parameter to expand more details.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/smart_rollups/commitments/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get smart rollup commitments
Returns a list of smart rollup commitments.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

initiator	
AccountParameter (object) Nullable
Filter by initiator (an account published the commitment first).
Click on the parameter to expand more details.

rollup	
AccountParameter (object) Nullable
Filter by smart rollup.
Click on the parameter to expand more details.

inboxLevel	
Int32Parameter (object) Nullable
Filter by inbox level.
Click on the parameter to expand more details.

hash	
Src1HashParameter (object) Nullable
Filter by commitment hash.
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block, where the commitment was first seen.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp of the block, where the commitment was first seen.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block, where the commitment was last seen.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp of the block, where the commitment was last seen.
Click on the parameter to expand more details.

status	
SrCommitmentStatusParameter (object) Nullable
Filter by commitment status (pending, cemented, executed, refuted, or orphan).
Click on the parameter to expand more details.

predecessor.id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

predecessor.hash	
Src1HashParameter (object) Nullable
Filter by commitment hash.
Click on the parameter to expand more details.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int64>
Internal TzKT id.
[sortable]

rollup	
Alias (object)
Smart rollup.

initiator	
Alias (object)
Account that published the commitment first.

inboxLevel	
integer <int32>
Inbox level.
[sortable]

state	
string
State hash.

hash	
string
Commitment hash.

ticks	
integer <int64>
Number of ticks.

firstLevel	
integer <int32>
Level of the block where the commitment was first published.
[sortable]

firstTime	
string <date-time>
Timestamp of the block where the commitment was first published.

lastLevel	
integer <int32>
Level of the block where the commitment was last updated.
[sortable]

lastTime	
string <date-time>
Timestamp of the block where the commitment was last updated.

stakers	
integer <int32>
Number of stakers, published this commitment.
[sortable]

activeStakers	
integer <int32>
Number of active (not refuted) stakers.
[sortable]

successors	
integer <int32>
Number of successor commitments.
[sortable]

status	
string
Commitment status (pending, cemented, executed, refuted, or orphan).

predecessor	
SrCommitmentInfo (object) Nullable
Predecessor commitment.


get
/v1/smart_rollups/commitments
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"rollup": {},
"initiator": {},
"inboxLevel": 0,
"state": "string",
"hash": "string",
"ticks": 0,
"firstLevel": 0,
"firstTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"lastTime": "2019-08-24T14:15:22Z",
"stakers": 0,
"activeStakers": 0,
"successors": 0,
"status": "string",
"predecessor": {}
}
]
Get smart rollup games count
Returns a total number of smart rollup refutation games.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

rollup	
AccountParameter (object) Nullable
Filter by smart rollup.
Click on the parameter to expand more details.

initiator	
AccountParameter (object) Nullable
Filter by initiator (who found a wrong commitment and started the refutation game).
Click on the parameter to expand more details.

initiatorCommitment.id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

initiatorCommitment.hash	
Src1HashParameter (object) Nullable
Filter by commitment hash.
Click on the parameter to expand more details.

opponent	
AccountParameter (object) Nullable
Filter by opponent (who was accused in publishing a wrong commitment).
Click on the parameter to expand more details.

opponentCommitment.id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

opponentCommitment.hash	
Src1HashParameter (object) Nullable
Filter by commitment hash.
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block, where the refutation game was started.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp of the block, where the refutation game was started.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block, where the refutation game was last updated.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp of the block, where the refutation game was last updated.
Click on the parameter to expand more details.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/smart_rollups/games/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get smart rollup games
Returns a list of smart rollup refutation games.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

rollup	
AccountParameter (object) Nullable
Filter by smart rollup.
Click on the parameter to expand more details.

initiator	
AccountParameter (object) Nullable
Filter by initiator (who found a wrong commitment and started the refutation game).
Click on the parameter to expand more details.

initiatorCommitment.id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

initiatorCommitment.hash	
Src1HashParameter (object) Nullable
Filter by commitment hash.
Click on the parameter to expand more details.

opponent	
AccountParameter (object) Nullable
Filter by opponent (who was accused in publishing a wrong commitment).
Click on the parameter to expand more details.

opponentCommitment.id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

opponentCommitment.hash	
Src1HashParameter (object) Nullable
Filter by commitment hash.
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block, where the refutation game was started.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp of the block, where the refutation game was started.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block, where the refutation game was last updated.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp of the block, where the refutation game was last updated.
Click on the parameter to expand more details.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int64>
Internal TzKT id.
[sortable]

rollup	
Alias (object)
Smart rollup, in which's scope the refutation game was started.

initiator	
Alias (object)
Initiator, who found a wrong commitment and started the refutation game.

initiatorCommitment	
SrCommitmentInfo (object)
Initiator's version of a valid commitment

opponent	
Alias (object)
Opponent, who was accused in publishing a wrong commitment.

opponentCommitment	
SrCommitmentInfo (object)
Opponent's version of a valid commitment

lastMove	
SrGameMove (object)
The most recent move (sr_refute operation).

firstLevel	
integer <int32>
Level of the block where the refutation game was started.
[sortable]

firstTime	
string <date-time>
Timestamp of the block where the refutation game was started.

lastLevel	
integer <int32>
Level of the block where the refutation game was last updated.
[sortable]

lastTime	
string <date-time>
Timestamp of the block where the refutation game was last updated.

initiatorReward	
integer <int64> Nullable
In case the initiator won, this field will contain the reward amount (in mutez).

initiatorLoss	
integer <int64> Nullable
In case the initiator lost (including a draw), this field will contain the loss amount (in mutez).

opponentReward	
integer <int64> Nullable
In case the opponent won, this field will contain the reward amount (in mutez).

opponentLoss	
integer <int64> Nullable
In case the opponent lost (including a draw), this field will contain the loss amount (in mutez).


get
/v1/smart_rollups/games
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"rollup": {},
"initiator": {},
"initiatorCommitment": {},
"opponent": {},
"opponentCommitment": {},
"lastMove": {},
"firstLevel": 0,
"firstTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"lastTime": "2019-08-24T14:15:22Z",
"initiatorReward": 0,
"initiatorLoss": 0,
"opponentReward": 0,
"opponentLoss": 0
}
]
Get inbox messages count
Returns a total number of smart rollup inbox messages.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by level of the block, where the message was pushed.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp of the block, where the message was pushed.
Click on the parameter to expand more details.

type	
SrMessageTypeParameter (object) Nullable
Filter by inbox message type (level_start, level_info, level_end, transfer, external, migration).
Click on the parameter to expand more details.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/smart_rollups/inbox/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get inbox messages
Returns a list of smart rollup inbox messages.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by level of the block, where the message was pushed.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp of the block, where the message was pushed.
Click on the parameter to expand more details.

type	
SrMessageTypeParameter (object) Nullable
Filter by inbox message type (level_start, level_info, level_end, transfer, external, migration).
Click on the parameter to expand more details.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

micheline	
MichelineFormat (string)
Default: "Json"
Format of smart rollup call parameters: 0 - JSON, 1 - JSON string, 2 - raw micheline, 3 - raw micheline string

Responses
200
Response Schema: application/json
Array ()
id	
integer <int64>
Internal TzKT id.
[sortable]

level	
integer <int32>
Level of the block where the message was pushed.
[sortable]

index	
integer <int32>
Index of the inbox message within the block.

timestamp	
string <date-time>
Timestamp of the block where the message was pushed.

type	
string
Type of the message (level_start, level_info, level_end, transfer, external, migration).

predecessorHash	
string Nullable
For level_info messages only. Hash of the predecessor block.

predecessorTimestamp	
string <date-time> Nullable
For level_info messages only. Timestamp of the predecessor block.

initiator	
Alias (object) Nullable
For transfer messages only. Account, initiated the operation.

sender	
Alias (object) Nullable
For transfer messages only. Smart contract, sent the internal transaction.

target	
Alias (object) Nullable
For transfer messages only. Smart rollup to which the internal transaction was sent.

entrypoint	
string Nullable
For transfer messages only. Entrypoint called in the target rollup

parameter	
any Nullable
For transfer messages only. Value passed to the called entrypoint. Note: you can configure parameters format by setting micheline query parameter.

payload	
string <byte> Nullable
For external messages only. Payload bytes (in base64).

protocol	
string Nullable
For migration messages only. Version of the new protocol (e.g. 'nairobi_017').


get
/v1/smart_rollups/inbox
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"level": 0,
"index": 0,
"timestamp": "2019-08-24T14:15:22Z",
"type": "string",
"predecessorHash": "string",
"predecessorTimestamp": "2019-08-24T14:15:22Z",
"initiator": {},
"sender": {},
"target": {},
"entrypoint": "string",
"parameter": null,
"payload": "string",
"protocol": "string"
}
]
Software
Get baker software
Returns a list of baker software.

query Parameters
select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts delegators by specified field. Supported fields: id (default), firstLevel, lastLevel, blocksCount.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

Responses
200
Response Schema: application/json
Array ()
shortHash	
string
Software ID (short commit hash)

firstLevel	
integer <int32>
Level of the first block baked with this software

firstTime	
string <date-time>
Datetime of the first block baked with this software

lastLevel	
integer <int32>
Level of the last block baked with this software

lastTime	
string <date-time>
Datetime of the last block baked with this software

blocksCount	
integer <int32>
Total number of blocks baked with this software

extras	
any Nullable
Off-chain extras


get
/v1/software
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"shortHash": "string",
"firstLevel": 0,
"firstTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"lastTime": "2019-08-24T14:15:22Z",
"blocksCount": 0,
"extras": null
}
]
Get software count
Returns a number of software.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/software/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Staking
Get staking updates count
Returns a total number of staking updates.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by level of the block, where the staking update happened.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp of the block, where the staking update happened.
Click on the parameter to expand more details.

cycle	
Int32Parameter (object) Nullable
Filter by freezer or block cycle (depending on the update type).
Click on the parameter to expand more details.

baker	
AccountParameter (object) Nullable
Filter by related baker.
Click on the parameter to expand more details.

staker	
AccountParameter (object) Nullable
Filter by related staker.
Click on the parameter to expand more details.

type	
StakingUpdateTypeParameter (object) Nullable
Filter by staking update type.
Click on the parameter to expand more details.

amount	
Int64Parameter (object) Nullable
Filter by amount.
Click on the parameter to expand more details.

pseudotokens	
BigIntegerNullableParameter (object) Nullable
Filter by amount of staking pseudotokens minted or burnt.
Click on the parameter to expand more details.

roundingError	
Int64NullParameter (object) Nullable
Filter by protocol rounding error.
Click on the parameter to expand more details.

autostakingOpId	
Int64NullParameter (object) Nullable
Filter by the ID of the related operation.
Click on the parameter to expand more details.

stakingOpId	
Int64NullParameter (object) Nullable
Filter by the ID of the related operation.
Click on the parameter to expand more details.

delegationOpId	
Int64NullParameter (object) Nullable
Filter by the ID of the related operation.
Click on the parameter to expand more details.

doubleBakingOpId	
Int64NullParameter (object) Nullable
Filter by the ID of the related operation.
Click on the parameter to expand more details.

doubleConsensusOpId	
Int64NullParameter (object) Nullable
Filter by the ID of the related operation.
Click on the parameter to expand more details.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/staking/updates/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get staking updates
Returns a list of staking updates.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by level of the block, where the staking update happened.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp of the block, where the staking update happened.
Click on the parameter to expand more details.

cycle	
Int32Parameter (object) Nullable
Filter by freezer or block cycle (depending on the update type).
Click on the parameter to expand more details.

baker	
AccountParameter (object) Nullable
Filter by related baker.
Click on the parameter to expand more details.

staker	
AccountParameter (object) Nullable
Filter by related staker.
Click on the parameter to expand more details.

type	
StakingUpdateTypeParameter (object) Nullable
Filter by staking update type.
Click on the parameter to expand more details.

amount	
Int64Parameter (object) Nullable
Filter by amount.
Click on the parameter to expand more details.

pseudotokens	
BigIntegerNullableParameter (object) Nullable
Filter by amount of staking pseudotokens minted or burnt.
Click on the parameter to expand more details.

roundingError	
Int64NullParameter (object) Nullable
Filter by protocol rounding error.
Click on the parameter to expand more details.

autostakingOpId	
Int64NullParameter (object) Nullable
Filter by the ID of the related operation.
Click on the parameter to expand more details.

stakingOpId	
Int64NullParameter (object) Nullable
Filter by the ID of the related operation.
Click on the parameter to expand more details.

delegationOpId	
Int64NullParameter (object) Nullable
Filter by the ID of the related operation.
Click on the parameter to expand more details.

doubleBakingOpId	
Int64NullParameter (object) Nullable
Filter by the ID of the related operation.
Click on the parameter to expand more details.

doubleConsensusOpId	
Int64NullParameter (object) Nullable
Filter by the ID of the related operation.
Click on the parameter to expand more details.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal TzKT ID.
[sortable]

level	
integer <int32>
Level of the block where the staking update happened.
[sortable]

timestamp	
string <date-time>
Timestamp of the block where the staking update happened.

cycle	
integer <int32>
For unstake, restake, finalize and slash_unstaked update types it's freezer cycle, otherwise it's cycle of the block.

baker	
Alias (object)
Related baker.

staker	
Alias (object)
Related staker.

type	
string
Staking update type (stake, unstake, restake, finalize, slash_staked, slash_unstaked).

amount	
integer <int64>
Amount (mutez).

pseudotokens	
string Nullable
Amount of staking pseudotokens minted or burnt.

roundingError	
integer <int64> Nullable
Protocol rounding error, appearing after slashing.

autostakingOpId	
integer <int64> Nullable
Id of the operation, caused the staking update. If all ..OpId fields are null, then the staking update was produced by the protocol migration.

stakingOpId	
integer <int64> Nullable
Id of the operation, caused the staking update. If all ..OpId fields are null, then the staking update was produced by the protocol migration.

delegationOpId	
integer <int64> Nullable
Id of the operation, caused the staking update. If all ..OpId fields are null, then the staking update was produced by the protocol migration.

doubleBakingOpId	
integer <int64> Nullable
Id of the operation, caused the staking update. If all ..OpId fields are null, then the staking update was produced by the protocol migration.

doubleConsensusOpId	
integer <int64> Nullable
Id of the operation, caused the staking update. If all ..OpId fields are null, then the staking update was produced by the protocol migration.

doubleEndorsingOpId	
integer <int64> Nullable
DEPRECATED

doublePreendorsingOpId	
integer <int64> Nullable
DEPRECATED


get
/v1/staking/updates
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"cycle": 0,
"baker": {},
"staker": {},
"type": "string",
"amount": 0,
"pseudotokens": "string",
"roundingError": 0,
"autostakingOpId": 0,
"stakingOpId": 0,
"delegationOpId": 0,
"doubleBakingOpId": 0,
"doubleConsensusOpId": 0,
"doubleEndorsingOpId": 0,
"doublePreendorsingOpId": 0
}
]
Get unstake requests count
Returns a total number of unstake requests.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

cycle	
Int32Parameter (object) Nullable
Filter by cycle.
Click on the parameter to expand more details.

baker	
AccountParameter (object) Nullable
Filter by related baker.
Click on the parameter to expand more details.

staker	
AccountParameter (object) Nullable
Filter by related staker. If staker is null, then it's aggregated unstaked deposits for the baker.
Click on the parameter to expand more details.

requestedAmount	
Int64Parameter (object) Nullable
Filter by requested amount.
Click on the parameter to expand more details.

restakedAmount	
Int64Parameter (object) Nullable
Filter by restaked amount.
Click on the parameter to expand more details.

finalizedAmount	
Int64Parameter (object) Nullable
Filter by finalized amount.
Click on the parameter to expand more details.

slashedAmount	
Int64Parameter (object) Nullable
Filter by slashed amount.
Click on the parameter to expand more details.

roundingError	
Int64NullParameter (object) Nullable
Filter by protocol rounding error.
Click on the parameter to expand more details.

actualAmount	
Int64Parameter (object) Nullable
Filter by actual amount.
Click on the parameter to expand more details.

status	
UnstakeRequestStatusParameter (object) Nullable
Filter by status.
Click on the parameter to expand more details.

updatesCount	
Int32Parameter (object) Nullable
Filter by staking updates count.
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the unstake request was created.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the unstake request was created.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the unstake request was last updated.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the unstake request was last updated.
Click on the parameter to expand more details.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/staking/unstake_requests/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get unstake requests
Returns a list of unstake requests.

query Parameters
id	
Int32Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

cycle	
Int32Parameter (object) Nullable
Filter by cycle.
Click on the parameter to expand more details.

baker	
AccountParameter (object) Nullable
Filter by related baker.
Click on the parameter to expand more details.

staker	
AccountParameter (object) Nullable
Filter by related staker. If staker is null, then it's aggregated unstaked deposits for the baker.
Click on the parameter to expand more details.

requestedAmount	
Int64Parameter (object) Nullable
Filter by requested amount.
Click on the parameter to expand more details.

restakedAmount	
Int64Parameter (object) Nullable
Filter by restaked amount.
Click on the parameter to expand more details.

finalizedAmount	
Int64Parameter (object) Nullable
Filter by finalized amount.
Click on the parameter to expand more details.

slashedAmount	
Int64Parameter (object) Nullable
Filter by slashed amount.
Click on the parameter to expand more details.

roundingError	
Int64NullParameter (object) Nullable
Filter by protocol rounding error.
Click on the parameter to expand more details.

actualAmount	
Int64Parameter (object) Nullable
Filter by actual amount.
Click on the parameter to expand more details.

status	
UnstakeRequestStatusParameter (object) Nullable
Filter by status.
Click on the parameter to expand more details.

updatesCount	
Int32Parameter (object) Nullable
Filter by staking updates count.
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the unstake request was created.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the unstake request was created.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the unstake request was last updated.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the unstake request was last updated.
Click on the parameter to expand more details.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int32>
Internal TzKT ID.
[sortable]

cycle	
integer <int32>
Cycle at which the unstake request was created.
[sortable]

baker	
Alias (object)
Related baker.

staker	
Alias (object) Nullable
Related staker.

requestedAmount	
integer <int64>
Initially requested amount (mutez).

restakedAmount	
integer <int64>
Amount that was restaked back (mutez).

finalizedAmount	
integer <int64>
Finalized amount (mutez).

slashedAmount	
integer <int64>
Slashed amount (mutez).

roundingError	
integer <int64> Nullable
Protocol rounding error, appearing after slashing.

actualAmount	
integer <int64>
Actual amount that was/is/will be available for finalizing.

status	
string
Status of the unstake request (pending, finalizable, finalized).

updatesCount	
integer <int32>
Number of staking updates related to the unstake request.

firstLevel	
integer <int32>
Level of the block where the unstake request was created.
[sortable]

firstTime	
string <date-time>
Timestamp of the block where the unstake request was created.

lastLevel	
integer <int32>
Level of the block where the unstake request was last updated.
[sortable]

lastTime	
string <date-time>
Timestamp of the block where the unstake request was last updated.


get
/v1/staking/unstake_requests
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"cycle": 0,
"baker": {},
"staker": {},
"requestedAmount": 0,
"restakedAmount": 0,
"finalizedAmount": 0,
"slashedAmount": 0,
"roundingError": 0,
"actualAmount": 0,
"status": "string",
"updatesCount": 0,
"firstLevel": 0,
"firstTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"lastTime": "2019-08-24T14:15:22Z"
}
]
Statistics
Get statistics
Returns a list of end-of-block statistics.

query Parameters
level	
Int32Parameter (object) Nullable
Filters statistics by level.

timestamp	
TimestampParameter (object) Nullable
Filters statistics by timestamp.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts delegators by specified field. Supported fields: id (default), level, cycle, date.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
cycle	
integer <int32> Nullable
Cycle at the end of which the statistics has been calculated. This field is only present in cyclic statistics.

date	
string <date-time> Nullable
Day at the end of which the statistics has been calculated. This field is only present in daily statistics.

level	
integer <int32>
Level of the block at which the statistics has been calculated

timestamp	
string <date-time>
Timestamp of the block at which the statistics has been calculated (ISO 8601, e.g. 2020-02-20T02:40:57Z)

totalSupply	
integer <int64>
Total supply - all existing tokens (including locked vested funds and frozen funds) plus not yet activated fundraiser tokens

circulatingSupply	
integer <int64>
Circulating supply - all active tokens which can affect supply and demand (can be spent/transferred)

totalBootstrapped	
integer <int64>
Total amount of tokens initially created when starting the blockchain

totalCommitments	
integer <int64>
Total commitment amount (tokens to be activated by fundraisers)

totalActivated	
integer <int64>
Total amount of tokens activated by fundraisers

totalCreated	
integer <int64>
Total amount of created/issued tokens

totalBurned	
integer <int64>
Total amount of burned tokens

totalBanished	
integer <int64>
Total amount of tokens sent to the null-address, which is equivalent to burning

totalFrozen	
integer <int64>
Total amount of frozen tokens (frozen security deposits, frozen rewards and frozen fees)

totalRollupBonds	
integer <int64>
Total amount of tokens locked as rollup bonds

totalSmartRollupBonds	
integer <int64>
Total amount of tokens locked as smart rollup bonds

totalLost	
integer <int64>
Total amount lost due to inaccuracy of the economic protocol introduced in Oxford. This amount is literally lost, because it is no longer available for the account in any mean, but for some reason it is counted as delegated.

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of the block at which the statistics has been calculated


get
/v1/statistics
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"cycle": 0,
"date": "2019-08-24T14:15:22Z",
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"totalSupply": 0,
"circulatingSupply": 0,
"totalBootstrapped": 0,
"totalCommitments": 0,
"totalActivated": 0,
"totalCreated": 0,
"totalBurned": 0,
"totalBanished": 0,
"totalFrozen": 0,
"totalRollupBonds": 0,
"totalSmartRollupBonds": 0,
"totalLost": 0,
"quote": {}
}
]
Get daily statistics
Returns a list of end-of-day statistics.

query Parameters
date	
DateTimeParameter (object) Nullable
Filters statistics by date.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts delegators by specified field. Supported fields: id (default), level, cycle, date.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
cycle	
integer <int32> Nullable
Cycle at the end of which the statistics has been calculated. This field is only present in cyclic statistics.

date	
string <date-time> Nullable
Day at the end of which the statistics has been calculated. This field is only present in daily statistics.

level	
integer <int32>
Level of the block at which the statistics has been calculated

timestamp	
string <date-time>
Timestamp of the block at which the statistics has been calculated (ISO 8601, e.g. 2020-02-20T02:40:57Z)

totalSupply	
integer <int64>
Total supply - all existing tokens (including locked vested funds and frozen funds) plus not yet activated fundraiser tokens

circulatingSupply	
integer <int64>
Circulating supply - all active tokens which can affect supply and demand (can be spent/transferred)

totalBootstrapped	
integer <int64>
Total amount of tokens initially created when starting the blockchain

totalCommitments	
integer <int64>
Total commitment amount (tokens to be activated by fundraisers)

totalActivated	
integer <int64>
Total amount of tokens activated by fundraisers

totalCreated	
integer <int64>
Total amount of created/issued tokens

totalBurned	
integer <int64>
Total amount of burned tokens

totalBanished	
integer <int64>
Total amount of tokens sent to the null-address, which is equivalent to burning

totalFrozen	
integer <int64>
Total amount of frozen tokens (frozen security deposits, frozen rewards and frozen fees)

totalRollupBonds	
integer <int64>
Total amount of tokens locked as rollup bonds

totalSmartRollupBonds	
integer <int64>
Total amount of tokens locked as smart rollup bonds

totalLost	
integer <int64>
Total amount lost due to inaccuracy of the economic protocol introduced in Oxford. This amount is literally lost, because it is no longer available for the account in any mean, but for some reason it is counted as delegated.

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of the block at which the statistics has been calculated


get
/v1/statistics/daily
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"cycle": 0,
"date": "2019-08-24T14:15:22Z",
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"totalSupply": 0,
"circulatingSupply": 0,
"totalBootstrapped": 0,
"totalCommitments": 0,
"totalActivated": 0,
"totalCreated": 0,
"totalBurned": 0,
"totalBanished": 0,
"totalFrozen": 0,
"totalRollupBonds": 0,
"totalSmartRollupBonds": 0,
"totalLost": 0,
"quote": {}
}
]
Get cyclic statistics
Returns a list of end-of-cycle statistics.

query Parameters
cycle	
Int32Parameter (object) Nullable
Filters statistics by cycle.

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts delegators by specified field. Supported fields: id (default), level, cycle, date.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
Array ()
cycle	
integer <int32> Nullable
Cycle at the end of which the statistics has been calculated. This field is only present in cyclic statistics.

date	
string <date-time> Nullable
Day at the end of which the statistics has been calculated. This field is only present in daily statistics.

level	
integer <int32>
Level of the block at which the statistics has been calculated

timestamp	
string <date-time>
Timestamp of the block at which the statistics has been calculated (ISO 8601, e.g. 2020-02-20T02:40:57Z)

totalSupply	
integer <int64>
Total supply - all existing tokens (including locked vested funds and frozen funds) plus not yet activated fundraiser tokens

circulatingSupply	
integer <int64>
Circulating supply - all active tokens which can affect supply and demand (can be spent/transferred)

totalBootstrapped	
integer <int64>
Total amount of tokens initially created when starting the blockchain

totalCommitments	
integer <int64>
Total commitment amount (tokens to be activated by fundraisers)

totalActivated	
integer <int64>
Total amount of tokens activated by fundraisers

totalCreated	
integer <int64>
Total amount of created/issued tokens

totalBurned	
integer <int64>
Total amount of burned tokens

totalBanished	
integer <int64>
Total amount of tokens sent to the null-address, which is equivalent to burning

totalFrozen	
integer <int64>
Total amount of frozen tokens (frozen security deposits, frozen rewards and frozen fees)

totalRollupBonds	
integer <int64>
Total amount of tokens locked as rollup bonds

totalSmartRollupBonds	
integer <int64>
Total amount of tokens locked as smart rollup bonds

totalLost	
integer <int64>
Total amount lost due to inaccuracy of the economic protocol introduced in Oxford. This amount is literally lost, because it is no longer available for the account in any mean, but for some reason it is counted as delegated.

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of the block at which the statistics has been calculated


get
/v1/statistics/cyclic
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"cycle": 0,
"date": "2019-08-24T14:15:22Z",
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"totalSupply": 0,
"circulatingSupply": 0,
"totalBootstrapped": 0,
"totalCommitments": 0,
"totalActivated": 0,
"totalCreated": 0,
"totalBurned": 0,
"totalBanished": 0,
"totalFrozen": 0,
"totalRollupBonds": 0,
"totalSmartRollupBonds": 0,
"totalLost": 0,
"quote": {}
}
]
Get current statistics
Returns statistics at the end of a head block.

query Parameters
select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select a single field, response will be a single value in both .fields and .values modes.

quote	
Symbols (string)
Default: "None"
Comma-separated list of ticker symbols to inject historical prices into response

Responses
200
Response Schema: application/json
cycle	
integer <int32> Nullable
Cycle at the end of which the statistics has been calculated. This field is only present in cyclic statistics.

date	
string <date-time> Nullable
Day at the end of which the statistics has been calculated. This field is only present in daily statistics.

level	
integer <int32>
Level of the block at which the statistics has been calculated

timestamp	
string <date-time>
Timestamp of the block at which the statistics has been calculated (ISO 8601, e.g. 2020-02-20T02:40:57Z)

totalSupply	
integer <int64>
Total supply - all existing tokens (including locked vested funds and frozen funds) plus not yet activated fundraiser tokens

circulatingSupply	
integer <int64>
Circulating supply - all active tokens which can affect supply and demand (can be spent/transferred)

totalBootstrapped	
integer <int64>
Total amount of tokens initially created when starting the blockchain

totalCommitments	
integer <int64>
Total commitment amount (tokens to be activated by fundraisers)

totalActivated	
integer <int64>
Total amount of tokens activated by fundraisers

totalCreated	
integer <int64>
Total amount of created/issued tokens

totalBurned	
integer <int64>
Total amount of burned tokens

totalBanished	
integer <int64>
Total amount of tokens sent to the null-address, which is equivalent to burning

totalFrozen	
integer <int64>
Total amount of frozen tokens (frozen security deposits, frozen rewards and frozen fees)

totalRollupBonds	
integer <int64>
Total amount of tokens locked as rollup bonds

totalSmartRollupBonds	
integer <int64>
Total amount of tokens locked as smart rollup bonds

totalLost	
integer <int64>
Total amount lost due to inaccuracy of the economic protocol introduced in Oxford. This amount is literally lost, because it is no longer available for the account in any mean, but for some reason it is counted as delegated.

quote	
QuoteShort (object) Nullable
Injected historical quote at the time of the block at which the statistics has been calculated


get
/v1/statistics/current
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"cycle": 0,
"date": "2019-08-24T14:15:22Z",
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"totalSupply": 0,
"circulatingSupply": 0,
"totalBootstrapped": 0,
"totalCommitments": 0,
"totalActivated": 0,
"totalCreated": 0,
"totalBurned": 0,
"totalBanished": 0,
"totalFrozen": 0,
"totalRollupBonds": 0,
"totalSmartRollupBonds": 0,
"totalLost": 0,
"quote": {
"btc": 0,
"eur": 0,
"usd": 0,
"cny": 0,
"jpy": 0,
"krw": 0,
"eth": 0,
"gbp": 0
}
}
Tickets
Get tickets count
Returns a total number of tickets.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

ticketer	
AccountParameter (object) Nullable
Filter by ticketer address.
Click on the parameter to expand more details.

rawType	
MichelineParameter (object) Nullable
Filter by ticket content type in Micheline format.
Click on the parameter to expand more details.

rawContent	
MichelineParameter (object) Nullable
Filter by ticket content in Micheline format.
Click on the parameter to expand more details.

content	
JsonParameter (object) Nullable
Filter by ticket content in JSON format.
Note, this parameter supports the following format: content{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by (for example, ?content.color.in=red,green).
Click on the parameter to expand more details.

typeHash	
Int32Parameter (object) Nullable
Filter by 32-bit hash of ticket content type.
Click on the parameter to expand more details.

contentHash	
Int32Parameter (object) Nullable
Filter by 32-bit hash of ticket content.
Click on the parameter to expand more details.

firstMinter	
AccountParameter (object) Nullable
Filter by address of the first minter.
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the ticket was first seen.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the ticket was first seen.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the ticket was last seen.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the ticket was last seen.
Click on the parameter to expand more details.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/tickets/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get tickets
Returns a list of tickets.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

ticketer	
AccountParameter (object) Nullable
Filter by ticketer address.
Click on the parameter to expand more details.

rawType	
MichelineParameter (object) Nullable
Filter by ticket content type in Micheline format.
Click on the parameter to expand more details.

rawContent	
MichelineParameter (object) Nullable
Filter by ticket content in Micheline format.
Click on the parameter to expand more details.

content	
JsonParameter (object) Nullable
Filter by ticket content in JSON format.
Note, this parameter supports the following format: content{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by (for example, ?content.color.in=red,green).
Click on the parameter to expand more details.

typeHash	
Int32Parameter (object) Nullable
Filter by 32-bit hash of ticket content type.
Click on the parameter to expand more details.

contentHash	
Int32Parameter (object) Nullable
Filter by 32-bit hash of ticket content.
Click on the parameter to expand more details.

firstMinter	
AccountParameter (object) Nullable
Filter by address of the first minter.
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the ticket was first seen.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the ticket was first seen.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the ticket was last seen.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the ticket was last seen.
Click on the parameter to expand more details.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int64>
Internal TzKT id.
[sortable]

ticketer	
Alias (object)
Contract, issued the ticket.

rawType	
IMicheline (object)
Ticket content type in Micheline format.

rawContent	
IMicheline (object)
Ticket content in Micheline format.

content	
any Nullable
Ticket content in JSON format.

typeHash	
integer <int32>
32-bit hash of the ticket content type.

contentHash	
integer <int32>
32-bit hash of the ticket content.

firstMinter	
Alias (object)
Account, minted the ticket first.

firstLevel	
integer <int32>
Level of the block where the ticket was first seen.
[sortable]

firstTime	
string <date-time>
Timestamp of the block where the ticket was first seen.

lastLevel	
integer <int32>
Level of the block where the ticket was last seen.
[sortable]

lastTime	
string <date-time>
Timestamp of the block where the ticket was last seen.

transfersCount	
integer <int32>
Total number of transfers.
[sortable]

balancesCount	
integer <int32>
Total number of holders ever seen.
[sortable]

holdersCount	
integer <int32>
Total number of current holders.
[sortable]

totalMinted	
string
Total amount minted.

totalBurned	
string
Total amount burned.

totalSupply	
string
Total amount exists.


get
/v1/tickets
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"ticketer": {},
"rawType": {},
"rawContent": {},
"content": null,
"typeHash": 0,
"contentHash": 0,
"firstMinter": {},
"firstLevel": 0,
"firstTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"lastTime": "2019-08-24T14:15:22Z",
"transfersCount": 0,
"balancesCount": 0,
"holdersCount": 0,
"totalMinted": "string",
"totalBurned": "string",
"totalSupply": "string"
}
]
Get ticket balances count
Returns a total number of ticket balances.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

ticket.id	
Int64Parameter (object) Nullable
Filter by internal TzKT id. Click on the parameter to expand more details.

ticket.ticketer	
AccountParameter (object) Nullable
Filter by ticketer address.
Click on the parameter to expand more details.

ticket.rawType	
MichelineParameter (object) Nullable
Filter by ticket content type in Micheline format.
Click on the parameter to expand more details.

ticket.rawContent	
MichelineParameter (object) Nullable
Filter by ticket content in Micheline format.
Click on the parameter to expand more details.

ticket.content	
JsonParameter (object) Nullable
Filter by ticket content in JSON format.
Note, this parameter supports the following format: content{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by (for example, ?content.color.in=red,green).
Click on the parameter to expand more details.

ticket.typeHash	
Int32Parameter (object) Nullable
Filter by 32-bit hash of ticket content type.
Click on the parameter to expand more details.

ticket.contentHash	
Int32Parameter (object) Nullable
Filter by 32-bit hash of ticket content.
Click on the parameter to expand more details.

account	
AccountParameter (object) Nullable
Filter by account address.
Click on the parameter to expand more details.

balance	
NatParameter (object) Nullable
Filter by balance.
Click on the parameter to expand more details.

transfersCount	
Int32Parameter (object) Nullable
Filter by number of transfers.
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the balance was first changed.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the balance was first changed.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the balance was last changed.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the balance was last changed.
Click on the parameter to expand more details.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/tickets/balances/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get ticket balances
Returns a list of ticket balances.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

ticket.id	
Int64Parameter (object) Nullable
Filter by internal TzKT id. Click on the parameter to expand more details.

ticket.ticketer	
AccountParameter (object) Nullable
Filter by ticketer address.
Click on the parameter to expand more details.

ticket.rawType	
MichelineParameter (object) Nullable
Filter by ticket content type in Micheline format.
Click on the parameter to expand more details.

ticket.rawContent	
MichelineParameter (object) Nullable
Filter by ticket content in Micheline format.
Click on the parameter to expand more details.

ticket.content	
JsonParameter (object) Nullable
Filter by ticket content in JSON format.
Note, this parameter supports the following format: content{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by (for example, ?content.color.in=red,green).
Click on the parameter to expand more details.

ticket.typeHash	
Int32Parameter (object) Nullable
Filter by 32-bit hash of ticket content type.
Click on the parameter to expand more details.

ticket.contentHash	
Int32Parameter (object) Nullable
Filter by 32-bit hash of ticket content.
Click on the parameter to expand more details.

account	
AccountParameter (object) Nullable
Filter by account address.
Click on the parameter to expand more details.

balance	
NatParameter (object) Nullable
Filter by balance.
Click on the parameter to expand more details.

transfersCount	
Int32Parameter (object) Nullable
Filter by number of transfers.
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the balance was first changed.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the balance was first changed.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the balance was last changed.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the balance was last changed.
Click on the parameter to expand more details.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int64>
Internal TzKT id.
[sortable]

ticket	
TicketInfo (object)
Ticket info.
Click on the field to expand more details.

account	
Alias (object)
Owner account.
Click on the field to expand more details.

balance	
string
Balance.
[sortable]

transfersCount	
integer <int32>
Total number of transfers, affecting the ticket balance.
[sortable]

firstLevel	
integer <int32>
Level of the block where the ticket balance was first changed.
[sortable]

firstTime	
string <date-time>
Timestamp of the block where the ticket balance was first changed.

lastLevel	
integer <int32>
Level of the block where the ticket balance was last changed.
[sortable]

lastTime	
string <date-time>
Timestamp of the block where the ticket balance was last changed.


get
/v1/tickets/balances
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"ticket": {},
"account": {},
"balance": "string",
"transfersCount": 0,
"firstLevel": 0,
"firstTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"lastTime": "2019-08-24T14:15:22Z"
}
]
Get ticket transfers count
Returns the total number of ticket transfers.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by level of the block where the transfer was made.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the transfer was made.
Click on the parameter to expand more details.

ticket.id	
Int64Parameter (object) Nullable
Filter by internal TzKT id. Click on the parameter to expand more details.

ticket.ticketer	
AccountParameter (object) Nullable
Filter by ticketer address.
Click on the parameter to expand more details.

ticket.rawType	
MichelineParameter (object) Nullable
Filter by ticket content type in Micheline format.
Click on the parameter to expand more details.

ticket.rawContent	
MichelineParameter (object) Nullable
Filter by ticket content in Micheline format.
Click on the parameter to expand more details.

ticket.content	
JsonParameter (object) Nullable
Filter by ticket content in JSON format.
Note, this parameter supports the following format: content{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by (for example, ?content.color.in=red,green).
Click on the parameter to expand more details.

ticket.typeHash	
Int32Parameter (object) Nullable
Filter by 32-bit hash of ticket content type.
Click on the parameter to expand more details.

ticket.contentHash	
Int32Parameter (object) Nullable
Filter by 32-bit hash of ticket content.
Click on the parameter to expand more details.

anyof	
AnyOfParameter (object) Nullable
Filter by any of the specified fields (from or to). Example: anyof.from.to=tz1... will return transfers where from OR to is equal to the specified value. This parameter is useful when you need to get both incoming and outgoing transfers of the account at once.
Click on the parameter to expand more details.

from	
AccountParameter (object) Nullable
Filter by sender address.
Click on the parameter to expand more details.

to	
AccountParameter (object) Nullable
Filter by recepient address.
Click on the parameter to expand more details.

amount	
NatParameter (object) Nullable
Filter by amount.
Click on the parameter to expand more details.

transactionId	
Int64NullParameter (object) Nullable
Filter by id of the transaction, caused the ticket transfer.
Click on the parameter to expand more details.

transferTicketId	
Int64NullParameter (object) Nullable
Filter by id of the transfer_ticket operation, caused the ticket transfer.
Click on the parameter to expand more details.

smartRollupExecuteId	
Int64NullParameter (object) Nullable
Filter by id of the smart_rollup_execute operation, caused the ticket transfer.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
Responses
200
Response Schema: application/json
integer <int32>

get
/v1/tickets/transfers/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get ticket transfers
Returns a list of ticket transfers.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by level of the block where the transfer was made.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the transfer was made.
Click on the parameter to expand more details.

ticket.id	
Int64Parameter (object) Nullable
Filter by internal TzKT id. Click on the parameter to expand more details.

ticket.ticketer	
AccountParameter (object) Nullable
Filter by ticketer address.
Click on the parameter to expand more details.

ticket.rawType	
MichelineParameter (object) Nullable
Filter by ticket content type in Micheline format.
Click on the parameter to expand more details.

ticket.rawContent	
MichelineParameter (object) Nullable
Filter by ticket content in Micheline format.
Click on the parameter to expand more details.

ticket.content	
JsonParameter (object) Nullable
Filter by ticket content in JSON format.
Note, this parameter supports the following format: content{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by (for example, ?content.color.in=red,green).
Click on the parameter to expand more details.

ticket.typeHash	
Int32Parameter (object) Nullable
Filter by 32-bit hash of ticket content type.
Click on the parameter to expand more details.

ticket.contentHash	
Int32Parameter (object) Nullable
Filter by 32-bit hash of ticket content.
Click on the parameter to expand more details.

anyof	
AnyOfParameter (object) Nullable
Filter by any of the specified fields (from or to). Example: anyof.from.to=tz1... will return transfers where from OR to is equal to the specified value. This parameter is useful when you need to get both incoming and outgoing transfers of the account at once.
Click on the parameter to expand more details.

from	
AccountParameter (object) Nullable
Filter by sender address.
Click on the parameter to expand more details.

to	
AccountParameter (object) Nullable
Filter by recepient address.
Click on the parameter to expand more details.

amount	
NatParameter (object) Nullable
Filter by amount.
Click on the parameter to expand more details.

transactionId	
Int64NullParameter (object) Nullable
Filter by id of the transaction, caused the ticket transfer.
Click on the parameter to expand more details.

transferTicketId	
Int64NullParameter (object) Nullable
Filter by id of the transfer_ticket operation, caused the ticket transfer.
Click on the parameter to expand more details.

smartRollupExecuteId	
Int64NullParameter (object) Nullable
Filter by id of the smart_rollup_execute operation, caused the ticket transfer.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int64>
Internal TzKT id.
[sortable]

level	
integer <int32>
Level of the block, at which the transfer was made.
[sortable]

timestamp	
string <date-time>
Timestamp of the block, at which the transfer was made.

ticket	
TicketInfo (object)
Ticket info.
Click on the field to expand more details.

from	
Alias (object) Nullable
Sender account.
Click on the field to expand more details.

to	
Alias (object) Nullable
Recipient account.
Click on the field to expand more details.

amount	
string
Amount of tickets transferred.
[sortable]

transactionId	
integer <int64> Nullable
Internal TzKT id of the transaction operation, caused the ticket transfer.

transferTicketId	
integer <int64> Nullable
Internal TzKT id of the transfer_ticket operation, caused the ticket transfer.

smartRollupExecuteId	
integer <int64> Nullable
Internal TzKT id of the smart_rollup_execute operation, caused the ticket transfer.


get
/v1/tickets/transfers
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"ticket": {},
"from": {},
"to": {},
"amount": "string",
"transactionId": 0,
"transferTicketId": 0,
"smartRollupExecuteId": 0
}
]
Get historical ticket balances
Returns a list of ticket balances at the end of the specified block. Note, this endpoint is quite heavy, therefore at least one of the filters (account, ticket.id, ticket.ticketer) must be specified.

path Parameters
level
required
integer <int32>
Level of the block at the end of which historical balances must be calculated

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id. Click on the parameter to expand more details.

ticket.id	
Int64Parameter (object) Nullable
Filter by internal TzKT id. Click on the parameter to expand more details.

ticket.ticketer	
AccountParameter (object) Nullable
Filter by ticketer address.
Click on the parameter to expand more details.

account	
AccountParameter (object) Nullable
Filter by account address.
Click on the parameter to expand more details.

balance	
NatParameter (object) Nullable
Filter by balance.
Click on the parameter to expand more details.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int64>
Internal TzKT id.
[sortable]

ticket	
TicketInfoShort (object)
Ticket info.
Click on the field to expand more details.

account	
Alias (object)
Owner account.
Click on the field to expand more details.

balance	
string
Balance.


get
/v1/tickets/historical_balances/{level}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"ticket": {},
"account": {},
"balance": "string"
}
]
Tokens
Get tokens count
Returns a total number of tokens.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id. Note, this is not the same as tokenId nat value.
Click on the parameter to expand more details.

contract	
AccountParameter (object) Nullable
Filter by contract address.
Click on the parameter to expand more details.

tokenId	
NatParameter (object) Nullable
Filter by tokenId (for FA1.2 tokens tokenId is always "0").
Click on the parameter to expand more details.

globalId	
TokenGlobalIdParameter (object) Nullable
Filter by "global id", which is a "{contract}:{tokenId}" string.
Click on the parameter to expand more details.

standard	
TokenStandardParameter (object) Nullable
Filter by token standard (fa1.2 or fa2).
Click on the parameter to expand more details.

totalMinted	
NatParameter (object) Nullable
Filter by total minted.
Click on the parameter to expand more details.

totalBurned	
NatParameter (object) Nullable
Filter by total burned. Note: total burned shows only those tokens that were literally burned, excluding tokens sent to burn addresses (because they still exist on the burn address' balance).
Click on the parameter to expand more details.

totalSupply	
NatParameter (object) Nullable
Filter by total supply. Note: total supply shows all existing tokens, including tokens sent to burn addresses (so that they exist on the burn address' balance).
Click on the parameter to expand more details.

firstMinter	
AccountParameter (object) Nullable
Filter by address of the first minter.
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the token was first seen.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the token was first seen.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the token was last seen.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the token was last seen.
Click on the parameter to expand more details.

metadata	
JsonParameter (object) Nullable
Filter by metadata.
Note, this parameter supports the following format: metadata{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by (for example, ?metadata.symbol.in=kUSD,uUSD).
Click on the parameter to expand more details.

indexedAt	
Int32NullParameter (object) Nullable
Responses
200
Response Schema: application/json
integer <int32>

get
/v1/tokens/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get tokens
Returns a list of tokens.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id. Note, this is not the same as tokenId nat value.
Click on the parameter to expand more details.

contract	
AccountParameter (object) Nullable
Filter by contract address.
Click on the parameter to expand more details.

tokenId	
NatParameter (object) Nullable
Filter by tokenId (for FA1.2 tokens tokenId is always "0").
Click on the parameter to expand more details.

globalId	
TokenGlobalIdParameter (object) Nullable
Filter by "global id", which is a "{contract}:{tokenId}" string.
Click on the parameter to expand more details.

standard	
TokenStandardParameter (object) Nullable
Filter by token standard (fa1.2 or fa2).
Click on the parameter to expand more details.

totalMinted	
NatParameter (object) Nullable
Filter by total minted.
Click on the parameter to expand more details.

totalBurned	
NatParameter (object) Nullable
Filter by total burned. Note: total burned shows only those tokens that were literally burned, excluding tokens sent to burn addresses (because they still exist on the burn address' balance).
Click on the parameter to expand more details.

totalSupply	
NatParameter (object) Nullable
Filter by total supply. Note: total supply shows all existing tokens, including tokens sent to burn addresses (so that they exist on the burn address' balance).
Click on the parameter to expand more details.

firstMinter	
AccountParameter (object) Nullable
Filter by address of the first minter.
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the token was first seen.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the token was first seen.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the token was last seen.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the token was last seen.
Click on the parameter to expand more details.

metadata	
JsonParameter (object) Nullable
Filter by metadata.
Note, this parameter supports the following format: metadata{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by (for example, ?metadata.symbol.in=kUSD,uUSD).
Click on the parameter to expand more details.

indexedAt	
Int32NullParameter (object) Nullable
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int64>
Internal TzKT id (not the same as tokenId).
[sortable]

contract	
Alias (object)
Contract, created the token.

tokenId	
string
Token id, unique within the contract.
[sortable]

standard	
string
Token standard (fa1.2 or fa2).

firstMinter	
Alias (object)
Account, minted the token first.

firstLevel	
integer <int32>
Level of the block where the token was first seen.
[sortable]

firstTime	
string <date-time>
Timestamp of the block where the token was first seen.

lastLevel	
integer <int32>
Level of the block where the token was last seen.
[sortable]

lastTime	
string <date-time>
Timestamp of the block where the token was last seen.

transfersCount	
integer <int32>
Total number of transfers.
[sortable]

balancesCount	
integer <int32>
Total number of holders ever seen.
[sortable]

holdersCount	
integer <int32>
Total number of current holders.
[sortable]

totalMinted	
string
Total number of minted tokens (raw value, not divided by decimals).

totalBurned	
string
Total number of burned tokens (raw value, not divided by decimals).

totalSupply	
string
Total number of existing tokens (raw value, not divided by decimals).

metadata	
any Nullable
Token metadata.
[sortable]


get
/v1/tokens
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"contract": {},
"tokenId": "string",
"standard": "string",
"firstMinter": {},
"firstLevel": 0,
"firstTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"lastTime": "2019-08-24T14:15:22Z",
"transfersCount": 0,
"balancesCount": 0,
"holdersCount": 0,
"totalMinted": "string",
"totalBurned": "string",
"totalSupply": "string",
"metadata": null
}
]
Get token balances count
Returns a total number of token balances.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

account	
AccountParameter (object) Nullable
Filter by account address.
Click on the parameter to expand more details.

token.id	
Int64Parameter (object) Nullable
Filter by internal TzKT id. Note, this is not the same as tokenId. Click on the parameter to expand more details.

token.contract	
AccountParameter (object) Nullable
Filter by contract address.
Click on the parameter to expand more details.

token.tokenId	
NatParameter (object) Nullable
Filter by tokenId (for FA1.2 tokens tokenId is always "0").
Click on the parameter to expand more details.

token.standard	
TokenStandardParameter (object) Nullable
Filter by token standard (fa1.2 or fa2).
Click on the parameter to expand more details.

token.metadata	
JsonParameter (object) Nullable
Filter by metadata. Note, this parameter supports the following format: token.metadata{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?token.metadata.symbol.in=kUSD,uUSD. Click on the parameter to expand more details.

balance	
NatParameter (object) Nullable
Filter by balance.
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the balance was first changed.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the balance was first changed.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the balance was last seen.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the balance was last changed.
Click on the parameter to expand more details.

indexedAt	
Int32NullParameter (object) Nullable
Responses
200
Response Schema: application/json
integer <int32>

get
/v1/tokens/balances/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get token balances
Returns a list of token balances.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

account	
AccountParameter (object) Nullable
Filter by account address.
Click on the parameter to expand more details.

token.id	
Int64Parameter (object) Nullable
Filter by internal TzKT id. Note, this is not the same as tokenId. Click on the parameter to expand more details.

token.contract	
AccountParameter (object) Nullable
Filter by contract address.
Click on the parameter to expand more details.

token.tokenId	
NatParameter (object) Nullable
Filter by tokenId (for FA1.2 tokens tokenId is always "0").
Click on the parameter to expand more details.

token.standard	
TokenStandardParameter (object) Nullable
Filter by token standard (fa1.2 or fa2).
Click on the parameter to expand more details.

token.metadata	
JsonParameter (object) Nullable
Filter by metadata. Note, this parameter supports the following format: token.metadata{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?token.metadata.symbol.in=kUSD,uUSD. Click on the parameter to expand more details.

balance	
NatParameter (object) Nullable
Filter by balance.
Click on the parameter to expand more details.

firstLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the balance was first changed.
Click on the parameter to expand more details.

firstTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the balance was first changed.
Click on the parameter to expand more details.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the block where the balance was last seen.
Click on the parameter to expand more details.

lastTime	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the balance was last changed.
Click on the parameter to expand more details.

indexedAt	
Int32NullParameter (object) Nullable
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int64>
Internal TzKT id.
[sortable]

account	
Alias (object)
Owner account.
Click on the field to expand more details.

token	
TokenInfo (object)
Token info.
Click on the field to expand more details.

balance	
string
Balance (raw value, not divided by decimals).
[sortable]

balanceValue	
string Nullable
Balance value in mutez, based on the current token price.
[sortable]

transfersCount	
integer <int32>
Total number of transfers, affecting the token balance.
[sortable]

firstLevel	
integer <int32>
Level of the block where the token balance was first changed.
[sortable]

firstTime	
string <date-time>
Timestamp of the block where the token balance was first changed.

lastLevel	
integer <int32>
Level of the block where the token balance was last changed.
[sortable]

lastTime	
string <date-time>
Timestamp of the block where the token balance was last changed.


get
/v1/tokens/balances
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"account": {},
"token": {},
"balance": "string",
"balanceValue": "string",
"transfersCount": 0,
"firstLevel": 0,
"firstTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"lastTime": "2019-08-24T14:15:22Z"
}
]
Get token transfers count
Returns the total number of token transfers.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by level of the block where the transfer was made.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the transfer was made.
Click on the parameter to expand more details.

token.id	
Int64Parameter (object) Nullable
Filter by internal TzKT id. Note, this is not the same as tokenId. Click on the parameter to expand more details.

token.contract	
AccountParameter (object) Nullable
Filter by contract address.
Click on the parameter to expand more details.

token.tokenId	
NatParameter (object) Nullable
Filter by tokenId (for FA1.2 tokens tokenId is always "0").
Click on the parameter to expand more details.

token.standard	
TokenStandardParameter (object) Nullable
Filter by token standard (fa1.2 or fa2).
Click on the parameter to expand more details.

token.metadata	
JsonParameter (object) Nullable
Filter by metadata. Note, this parameter supports the following format: token.metadata{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?token.metadata.symbol.in=kUSD,uUSD. Click on the parameter to expand more details.

anyof	
AnyOfParameter (object) Nullable
Filter by any of the specified fields (from or to). Example: anyof.from.to=tz1... will return transfers where from OR to is equal to the specified value. This parameter is useful when you need to get both incoming and outgoing transfers of the account at once.
Click on the parameter to expand more details.

from	
AccountParameter (object) Nullable
Filter by sender account address.
Click on the parameter to expand more details.

to	
AccountParameter (object) Nullable
Filter by target account address.
Click on the parameter to expand more details.

amount	
NatParameter (object) Nullable
Filter by amount.
Click on the parameter to expand more details.

transactionId	
Int64NullParameter (object) Nullable
Filter by id of the transaction, caused the token transfer.
Click on the parameter to expand more details.

originationId	
Int64NullParameter (object) Nullable
Filter by id of the origination, caused the token transfer.
Click on the parameter to expand more details.

migrationId	
Int64NullParameter (object) Nullable
Filter by id of the migration, caused the token transfer.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
indexedAt	
Int32NullParameter (object) Nullable
Responses
200
Response Schema: application/json
integer <int32>

get
/v1/tokens/transfers/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get token transfers
Returns a list of token transfers.

query Parameters
id	
Int64Parameter (object) Nullable
Filter by internal TzKT id.
Click on the parameter to expand more details.

level	
Int32Parameter (object) Nullable
Filter by level of the block where the transfer was made.
Click on the parameter to expand more details.

timestamp	
TimestampParameter (object) Nullable
Filter by timestamp (ISO 8601) of the block where the transfer was made.
Click on the parameter to expand more details.

token.id	
Int64Parameter (object) Nullable
Filter by internal TzKT id. Note, this is not the same as tokenId. Click on the parameter to expand more details.

token.contract	
AccountParameter (object) Nullable
Filter by contract address.
Click on the parameter to expand more details.

token.tokenId	
NatParameter (object) Nullable
Filter by tokenId (for FA1.2 tokens tokenId is always "0").
Click on the parameter to expand more details.

token.standard	
TokenStandardParameter (object) Nullable
Filter by token standard (fa1.2 or fa2).
Click on the parameter to expand more details.

token.metadata	
JsonParameter (object) Nullable
Filter by metadata. Note, this parameter supports the following format: token.metadata{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?token.metadata.symbol.in=kUSD,uUSD. Click on the parameter to expand more details.

anyof	
AnyOfParameter (object) Nullable
Filter by any of the specified fields (from or to). Example: anyof.from.to=tz1... will return transfers where from OR to is equal to the specified value. This parameter is useful when you need to get both incoming and outgoing transfers of the account at once.
Click on the parameter to expand more details.

from	
AccountParameter (object) Nullable
Filter by sender account address.
Click on the parameter to expand more details.

to	
AccountParameter (object) Nullable
Filter by target account address.
Click on the parameter to expand more details.

amount	
NatParameter (object) Nullable
Filter by amount.
Click on the parameter to expand more details.

transactionId	
Int64NullParameter (object) Nullable
Filter by id of the transaction, caused the token transfer.
Click on the parameter to expand more details.

originationId	
Int64NullParameter (object) Nullable
Filter by id of the origination, caused the token transfer.
Click on the parameter to expand more details.

migrationId	
Int64NullParameter (object) Nullable
Filter by id of the migration, caused the token transfer.
Click on the parameter to expand more details.

or.ColsAndVals	
Array of objects (ValueTupleOfStringAndListOfInteger)
indexedAt	
Int32NullParameter (object) Nullable
sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

Responses
200
Response Schema: application/json
Array ()
id	
integer <int64>
Internal TzKT id.
[sortable]

level	
integer <int32>
Level of the block, at which the token transfer was made.
[sortable]

timestamp	
string <date-time>
Timestamp of the block, at which the token transfer was made.

token	
TokenInfo (object)
Token info.
Click on the field to expand more details.

from	
Alias (object) Nullable
Sender account.
Click on the field to expand more details.

to	
Alias (object) Nullable
Target account.
Click on the field to expand more details.

amount	
string
Amount of tokens transferred (raw value, not divided by decimals).
[sortable]

transactionId	
integer <int64> Nullable
Internal TzKT id of the transaction operation, caused the token transfer.

originationId	
integer <int64> Nullable
Internal TzKT id of the origination operation, caused the token transfer.

migrationId	
integer <int64> Nullable
Internal TzKT id of the migration operation, caused the token transfer.


get
/v1/tokens/transfers
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"id": 0,
"level": 0,
"timestamp": "2019-08-24T14:15:22Z",
"token": {},
"from": {},
"to": {},
"amount": "string",
"transactionId": 0,
"originationId": 0,
"migrationId": 0
}
]
Get historical token balances
Returns a list of token balances at the end of the specified block. Note, this endpoint is quite heavy, therefore at least one of the filters (account, token.id, token.contract with token.tokenId) must be specified.

path Parameters
level
required
integer <int32>
Level of the block at the end of which historical balances must be calculated

query Parameters
account	
AccountParameter (object) Nullable
Filter by account address.
Click on the parameter to expand more details.

token.id	
Int64Parameter (object) Nullable
Filter by internal TzKT id. Note, this is not the same as tokenId. Click on the parameter to expand more details.

token.contract	
AccountParameter (object) Nullable
Filter by contract address.
Click on the parameter to expand more details.

token.tokenId	
NatParameter (object) Nullable
Filter by tokenId (for FA1.2 tokens tokenId is always "0").
Click on the parameter to expand more details.

token.standard	
TokenStandardParameter (object) Nullable
Filter by token standard (fa1.2 or fa2).
Click on the parameter to expand more details.

token.metadata	
JsonParameter (object) Nullable
Filter by metadata. Note, this parameter supports the following format: token.metadata{.path?}{.mode?}=..., so you can specify a path to a particular field to filter by, for example: ?token.metadata.symbol.in=kUSD,uUSD. Click on the parameter to expand more details.

balance	
NatParameter (object) Nullable
Filter by balance.
Click on the parameter to expand more details.

sort	
SortParameter (object) Nullable
Sorts items (asc or desc) by the specified field. You can see what fields can be used for sorting in the response description, below.
Click on the parameter to expand more details.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped.
Click on the parameter to expand more details.

limit	
integer <int32> [ 0 .. 10000 ]
Maximum number of items to return.

select	
SelectionParameter (object) Nullable
Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields. This parameter accepts values of the following format: {field}{path?}{as alias?}, so you can do deep selection (for example, ?select=balance,token.metadata.symbol as token,...).
Note, if you select just one field, the response will be flatten into a simple array of values.
Click on the parameter to expand the details.

Responses
200
Response Schema: application/json
Array ()
account	
Alias (object)
Owner account.
Click on the field to expand more details.

token	
TokenInfoShort (object)
Token info.
Click on the field to expand more details.

balance	
string
Balance (raw value, not divided by decimals).
[sortable]


get
/v1/tokens/historical_balances/{level}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"account": {},
"token": {},
"balance": "string"
}
]
Voting
Get proposals count
Returns the total number of protocol proposals.

Responses
200
Response Schema: application/json
integer <int32>

get
/v1/voting/proposals/count
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
0
Get proposals
Returns a list of protocol proposals.

query Parameters
hash	
ProtocolParameter (object) Nullable
Filters proposals by hash

epoch	
Int32Parameter (object) Nullable
Filters proposals by voting epoch

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts proposals by specified field. Supported fields: id (default), upvotes, votingPower.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

Responses
200
Response Schema: application/json
Array ()
hash	
string
Hash of the proposal, which representing a tarball of concatenated .ml/.mli source files

initiator	
Alias (object)
Information about the baker (delegate) submitted the proposal

firstPeriod	
integer <int32>
The first voting period where the proposal was active

lastPeriod	
integer <int32>
The last voting period where the proposal was active

epoch	
integer <int32>
The voting epoch where the proposal was active

upvotes	
integer <int32>
The total number of upvotes (proposal operations)

votingPower	
integer <int64>
The total voting power of bakers, upvoted the proposal

status	
string
Status of the proposal active - the proposal in the active state accepted - the proposal was accepted rejected - the proposal was rejected due to too many "nay" ballots skipped - the proposal was skipped due to the quorum was not reached

extras	
any Nullable
Off-chain extras


get
/v1/voting/proposals
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"hash": "string",
"initiator": {},
"firstPeriod": 0,
"lastPeriod": 0,
"epoch": 0,
"upvotes": 0,
"votingPower": 0,
"status": "string",
"extras": null
}
]
Get proposal by hash
Returns the most recent protocol proposal with the specified hash.

path Parameters
hash
required
string
Proposal hash

Responses
200
Response Schema: application/json
hash	
string
Hash of the proposal, which representing a tarball of concatenated .ml/.mli source files

initiator	
Alias (object)
Information about the baker (delegate) submitted the proposal

firstPeriod	
integer <int32>
The first voting period where the proposal was active

lastPeriod	
integer <int32>
The last voting period where the proposal was active

epoch	
integer <int32>
The voting epoch where the proposal was active

upvotes	
integer <int32>
The total number of upvotes (proposal operations)

votingPower	
integer <int64>
The total voting power of bakers, upvoted the proposal

status	
string
Status of the proposal active - the proposal in the active state accepted - the proposal was accepted rejected - the proposal was rejected due to too many "nay" ballots skipped - the proposal was skipped due to the quorum was not reached

extras	
any Nullable
Off-chain extras


get
/v1/voting/proposals/{hash}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"hash": "string",
"initiator": {
"alias": "string",
"address": "string"
},
"firstPeriod": 0,
"lastPeriod": 0,
"epoch": 0,
"upvotes": 0,
"votingPower": 0,
"status": "string",
"extras": null
}
Get voting periods
Returns a list of voting periods.

query Parameters
firstLevel	
Int32Parameter (object) Nullable
Filter by level of the first block of the period.

lastLevel	
Int32Parameter (object) Nullable
Filter by level of the last block of the period.

epoch	
Int32Parameter (object) Nullable
Filters by voting epoch

select	
SelectParameter (object) Nullable
Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both .fields and .values modes.

sort	
SortParameter (object) Nullable
Sorts voting periods by specified field. Supported fields: id (default).

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

Responses
200
Response Schema: application/json
Array ()
index	
integer <int32>
Index of the voting period, starting from zero

epoch	
integer <int32>
Index of the voting epoch, starting from zero

firstLevel	
integer <int32>
The height of the block in which the period starts

startTime	
string <date-time>
The timestamp of the block in which the period starts

lastLevel	
integer <int32>
The height of the block in which the period ends

endTime	
string <date-time>
The timestamp of the block in which the period ends

kind	
string
Kind of the voting period: proposal - delegates can submit protocol amendment proposals using the proposal operation exploration - bakers (delegates) may vote on the top-ranked proposal from the previous Proposal Period using the ballot operation testing - If the proposal is approved in the Exploration Period, the testing (or 'cooldown') period begins and bakers start testing the new protocol promotion - delegates can cast one vote to promote or not the tested proposal using the ballot operation adoption - after the proposal is actually accepted, the ecosystem has some time to prepare to the upgrade

status	
string
Status of the voting period: active - means that the voting period is in progress no_proposals - means that there were no proposals during the voting period no_quorum - means that there was a voting but the quorum was not reached no_supermajority - means that there was a voting but the supermajority was not reached no_single_winner - means that there were multiple winning proposals with the same voting power success - means that the period was finished with positive voting result

dictator	
string
Status of the governance dictator: none - means that there were no actions by the dictator abort - means that the epoch was aborted by the dictator reset - means that the period was reset by the dictator submit - means that the dictator submitted a proposal

totalBakers	
integer <int32>
The number of bakers on the voters list

totalVotingPower	
integer <int64>
Total voting power of bakers on the voters list

upvotesQuorum	
number <double> Nullable
Upvotes quorum percentage (only for proposal period)

proposalsCount	
integer <int32> Nullable
The number of proposals injected during the voting period (only for proposal period)

topUpvotes	
integer <int32> Nullable
This is how many upvotes (proposal operations) the most upvoted proposal has (only for proposal period)

topVotingPower	
integer <int64> Nullable
This is how much voting power the most upvoted proposal has (only for proposal period)

ballotsQuorum	
number <double> Nullable
Ballots quorum percentage (only for exploration and promotion periods)

supermajority	
number <double> Nullable
Supermajority percentage (only for exploration and promotion periods)

yayBallots	
integer <int32> Nullable
The number of the ballots with "yay" vote (only for exploration and promotion periods)

yayVotingPower	
integer <int64> Nullable
Total voting power of the ballots with "yay" vote (only for exploration and promotion periods)

nayBallots	
integer <int32> Nullable
The number of the ballots with "nay" vote (only for exploration and promotion periods)

nayVotingPower	
integer <int64> Nullable
Total voting power of the ballots with "nay" vote (only for exploration and promotion periods)

passBallots	
integer <int32> Nullable
The number of the ballots with "pass" vote (only for exploration and promotion periods)

passVotingPower	
integer <int64> Nullable
Total voting power of the ballots with "pass" vote (only for exploration and promotion periods)


get
/v1/voting/periods
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"index": 0,
"epoch": 0,
"firstLevel": 0,
"startTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"endTime": "2019-08-24T14:15:22Z",
"kind": "string",
"status": "string",
"dictator": "string",
"totalBakers": 0,
"totalVotingPower": 0,
"upvotesQuorum": 0,
"proposalsCount": 0,
"topUpvotes": 0,
"topVotingPower": 0,
"ballotsQuorum": 0,
"supermajority": 0,
"yayBallots": 0,
"yayVotingPower": 0,
"nayBallots": 0,
"nayVotingPower": 0,
"passBallots": 0,
"passVotingPower": 0
}
]
Get voting period by index
Returns a voting period at the specified index.

path Parameters
index
required
integer <int32>
Voting period index starting from zero

Responses
200
Response Schema: application/json
index	
integer <int32>
Index of the voting period, starting from zero

epoch	
integer <int32>
Index of the voting epoch, starting from zero

firstLevel	
integer <int32>
The height of the block in which the period starts

startTime	
string <date-time>
The timestamp of the block in which the period starts

lastLevel	
integer <int32>
The height of the block in which the period ends

endTime	
string <date-time>
The timestamp of the block in which the period ends

kind	
string
Kind of the voting period: proposal - delegates can submit protocol amendment proposals using the proposal operation exploration - bakers (delegates) may vote on the top-ranked proposal from the previous Proposal Period using the ballot operation testing - If the proposal is approved in the Exploration Period, the testing (or 'cooldown') period begins and bakers start testing the new protocol promotion - delegates can cast one vote to promote or not the tested proposal using the ballot operation adoption - after the proposal is actually accepted, the ecosystem has some time to prepare to the upgrade

status	
string
Status of the voting period: active - means that the voting period is in progress no_proposals - means that there were no proposals during the voting period no_quorum - means that there was a voting but the quorum was not reached no_supermajority - means that there was a voting but the supermajority was not reached no_single_winner - means that there were multiple winning proposals with the same voting power success - means that the period was finished with positive voting result

dictator	
string
Status of the governance dictator: none - means that there were no actions by the dictator abort - means that the epoch was aborted by the dictator reset - means that the period was reset by the dictator submit - means that the dictator submitted a proposal

totalBakers	
integer <int32>
The number of bakers on the voters list

totalVotingPower	
integer <int64>
Total voting power of bakers on the voters list

upvotesQuorum	
number <double> Nullable
Upvotes quorum percentage (only for proposal period)

proposalsCount	
integer <int32> Nullable
The number of proposals injected during the voting period (only for proposal period)

topUpvotes	
integer <int32> Nullable
This is how many upvotes (proposal operations) the most upvoted proposal has (only for proposal period)

topVotingPower	
integer <int64> Nullable
This is how much voting power the most upvoted proposal has (only for proposal period)

ballotsQuorum	
number <double> Nullable
Ballots quorum percentage (only for exploration and promotion periods)

supermajority	
number <double> Nullable
Supermajority percentage (only for exploration and promotion periods)

yayBallots	
integer <int32> Nullable
The number of the ballots with "yay" vote (only for exploration and promotion periods)

yayVotingPower	
integer <int64> Nullable
Total voting power of the ballots with "yay" vote (only for exploration and promotion periods)

nayBallots	
integer <int32> Nullable
The number of the ballots with "nay" vote (only for exploration and promotion periods)

nayVotingPower	
integer <int64> Nullable
Total voting power of the ballots with "nay" vote (only for exploration and promotion periods)

passBallots	
integer <int32> Nullable
The number of the ballots with "pass" vote (only for exploration and promotion periods)

passVotingPower	
integer <int64> Nullable
Total voting power of the ballots with "pass" vote (only for exploration and promotion periods)


get
/v1/voting/periods/{index}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"index": 0,
"epoch": 0,
"firstLevel": 0,
"startTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"endTime": "2019-08-24T14:15:22Z",
"kind": "string",
"status": "string",
"dictator": "string",
"totalBakers": 0,
"totalVotingPower": 0,
"upvotesQuorum": 0,
"proposalsCount": 0,
"topUpvotes": 0,
"topVotingPower": 0,
"ballotsQuorum": 0,
"supermajority": 0,
"yayBallots": 0,
"yayVotingPower": 0,
"nayBallots": 0,
"nayVotingPower": 0,
"passBallots": 0,
"passVotingPower": 0
}
Get current voting period
Returns current voting period.

Responses
200
Response Schema: application/json
index	
integer <int32>
Index of the voting period, starting from zero

epoch	
integer <int32>
Index of the voting epoch, starting from zero

firstLevel	
integer <int32>
The height of the block in which the period starts

startTime	
string <date-time>
The timestamp of the block in which the period starts

lastLevel	
integer <int32>
The height of the block in which the period ends

endTime	
string <date-time>
The timestamp of the block in which the period ends

kind	
string
Kind of the voting period: proposal - delegates can submit protocol amendment proposals using the proposal operation exploration - bakers (delegates) may vote on the top-ranked proposal from the previous Proposal Period using the ballot operation testing - If the proposal is approved in the Exploration Period, the testing (or 'cooldown') period begins and bakers start testing the new protocol promotion - delegates can cast one vote to promote or not the tested proposal using the ballot operation adoption - after the proposal is actually accepted, the ecosystem has some time to prepare to the upgrade

status	
string
Status of the voting period: active - means that the voting period is in progress no_proposals - means that there were no proposals during the voting period no_quorum - means that there was a voting but the quorum was not reached no_supermajority - means that there was a voting but the supermajority was not reached no_single_winner - means that there were multiple winning proposals with the same voting power success - means that the period was finished with positive voting result

dictator	
string
Status of the governance dictator: none - means that there were no actions by the dictator abort - means that the epoch was aborted by the dictator reset - means that the period was reset by the dictator submit - means that the dictator submitted a proposal

totalBakers	
integer <int32>
The number of bakers on the voters list

totalVotingPower	
integer <int64>
Total voting power of bakers on the voters list

upvotesQuorum	
number <double> Nullable
Upvotes quorum percentage (only for proposal period)

proposalsCount	
integer <int32> Nullable
The number of proposals injected during the voting period (only for proposal period)

topUpvotes	
integer <int32> Nullable
This is how many upvotes (proposal operations) the most upvoted proposal has (only for proposal period)

topVotingPower	
integer <int64> Nullable
This is how much voting power the most upvoted proposal has (only for proposal period)

ballotsQuorum	
number <double> Nullable
Ballots quorum percentage (only for exploration and promotion periods)

supermajority	
number <double> Nullable
Supermajority percentage (only for exploration and promotion periods)

yayBallots	
integer <int32> Nullable
The number of the ballots with "yay" vote (only for exploration and promotion periods)

yayVotingPower	
integer <int64> Nullable
Total voting power of the ballots with "yay" vote (only for exploration and promotion periods)

nayBallots	
integer <int32> Nullable
The number of the ballots with "nay" vote (only for exploration and promotion periods)

nayVotingPower	
integer <int64> Nullable
Total voting power of the ballots with "nay" vote (only for exploration and promotion periods)

passBallots	
integer <int32> Nullable
The number of the ballots with "pass" vote (only for exploration and promotion periods)

passVotingPower	
integer <int64> Nullable
Total voting power of the ballots with "pass" vote (only for exploration and promotion periods)


get
/v1/voting/periods/current
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"index": 0,
"epoch": 0,
"firstLevel": 0,
"startTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"endTime": "2019-08-24T14:15:22Z",
"kind": "string",
"status": "string",
"dictator": "string",
"totalBakers": 0,
"totalVotingPower": 0,
"upvotesQuorum": 0,
"proposalsCount": 0,
"topUpvotes": 0,
"topVotingPower": 0,
"ballotsQuorum": 0,
"supermajority": 0,
"yayBallots": 0,
"yayVotingPower": 0,
"nayBallots": 0,
"nayVotingPower": 0,
"passBallots": 0,
"passVotingPower": 0
}
Get period voters
Returns voters from the voting period at the specified index.

path Parameters
index
required
integer <int32>
Voting period index starting from zero

query Parameters
status	
VoterStatusParameter (object) Nullable
Filters voters by status (none, upvoted, voted_yay, voted_nay, voted_pass)

sort	
SortParameter (object) Nullable
Sorts voters by specified field. Supported fields: id (default), votingPower.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

Responses
200
Response Schema: application/json
Array ()
delegate	
Alias (object)
Voter identity

votingPower	
integer <int64>
Baker's voting power

status	
string
Voter's status: none - the voter did nothing upvoted - the voter upvoted at least one proposal voted_yay - the voter voted "yay" voted_nay - the voter voted "nay" voted_pass - the voter voted "pass"


get
/v1/voting/periods/{index}/voters
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"delegate": {},
"votingPower": 0,
"status": "string"
}
]
Get period voter
Returns a voter with the specified address from the voting period at the specified index.

path Parameters
index
required
integer <int32>
Voting period index starting from zero

address
required
string
Voter address

Responses
200
Response Schema: application/json
delegate	
Alias (object)
Voter identity

votingPower	
integer <int64>
Baker's voting power

status	
string
Voter's status: none - the voter did nothing upvoted - the voter upvoted at least one proposal voted_yay - the voter voted "yay" voted_nay - the voter voted "nay" voted_pass - the voter voted "pass"


get
/v1/voting/periods/{index}/voters/{address}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"delegate": {
"alias": "string",
"address": "string"
},
"votingPower": 0,
"status": "string"
}
Get current period voters
Returns voters from the current period.

query Parameters
status	
VoterStatusParameter (object) Nullable
Filters voters by status (none, upvoted, voted_yay, voted_nay, voted_pass)

sort	
SortParameter (object) Nullable
Sorts voters by specified field. Supported fields: id (default), votingPower.

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

Responses
200
Response Schema: application/json
Array ()
delegate	
Alias (object)
Voter identity

votingPower	
integer <int64>
Baker's voting power

status	
string
Voter's status: none - the voter did nothing upvoted - the voter upvoted at least one proposal voted_yay - the voter voted "yay" voted_nay - the voter voted "nay" voted_pass - the voter voted "pass"


get
/v1/voting/periods/current/voters
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"delegate": {},
"votingPower": 0,
"status": "string"
}
]
Get current period voter
Returns a voter with the specified address from the current period.

path Parameters
address
required
string
Voter address

Responses
200
Response Schema: application/json
delegate	
Alias (object)
Voter identity

votingPower	
integer <int64>
Baker's voting power

status	
string
Voter's status: none - the voter did nothing upvoted - the voter upvoted at least one proposal voted_yay - the voter voted "yay" voted_nay - the voter voted "nay" voted_pass - the voter voted "pass"


get
/v1/voting/periods/current/voters/{address}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"delegate": {
"alias": "string",
"address": "string"
},
"votingPower": 0,
"status": "string"
}
Get voting epochs
Returns a list of voting epochs.

query Parameters
status	
EpochStatusParameter (object) Nullable
Filter by voting epoch status (no_proposals, voting, completed, failed).

sort	
SortParameter (object) Nullable
Sorts voting epochs by specified field. Supported fields: index (default).

offset	
OffsetParameter (object) Nullable
Specifies which or how many items should be skipped

limit	
integer <int32> [ 0 .. 10000 ]
Default: 100
Maximum number of items to return

Responses
200
Response Schema: application/json
Array ()
index	
integer <int32>
Index of the voting epoch, starting from zero

firstLevel	
integer <int32>
The height of the block in which the epoch starts

startTime	
string <date-time>
The timestamp of the block in which the epoch starts

lastLevel	
integer <int32>
The height of the block in which the epoch ends

endTime	
string <date-time>
The timestamp of the block in which the epoch ends

status	
string
Status of the voting epoch: no_proposals - there were no proposals proposed voting - there was at least one proposal and the voting is in progress completed - voting successfully completed and the proposal was accepted failed - voting was not completed due to either quorum or supermajority was not reached

periods	
Array of objects (VotingPeriod)
Voting periods in the epoch

proposals	
Array of objects (Proposal)
Proposals pushed during the voting epoch (null, if there were no proposals).


get
/v1/voting/epochs
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
[
{
"index": 0,
"firstLevel": 0,
"startTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"endTime": "2019-08-24T14:15:22Z",
"status": "string",
"periods": [],
"proposals": []
}
]
Get voting epoch by index
Returns a voting epoch at the specified index.

path Parameters
index
required
integer <int32>
Voting epoch index starting from zero

Responses
200
Response Schema: application/json
index	
integer <int32>
Index of the voting epoch, starting from zero

firstLevel	
integer <int32>
The height of the block in which the epoch starts

startTime	
string <date-time>
The timestamp of the block in which the epoch starts

lastLevel	
integer <int32>
The height of the block in which the epoch ends

endTime	
string <date-time>
The timestamp of the block in which the epoch ends

status	
string
Status of the voting epoch: no_proposals - there were no proposals proposed voting - there was at least one proposal and the voting is in progress completed - voting successfully completed and the proposal was accepted failed - voting was not completed due to either quorum or supermajority was not reached

periods	
Array of objects (VotingPeriod)
Voting periods in the epoch

proposals	
Array of objects (Proposal)
Proposals pushed during the voting epoch (null, if there were no proposals).


get
/v1/voting/epochs/{index}
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"index": 0,
"firstLevel": 0,
"startTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"endTime": "2019-08-24T14:15:22Z",
"status": "string",
"periods": [
{}
],
"proposals": [
{}
]
}
Get current voting epoch
Returns the current voting epoch

Responses
200
Response Schema: application/json
index	
integer <int32>
Index of the voting epoch, starting from zero

firstLevel	
integer <int32>
The height of the block in which the epoch starts

startTime	
string <date-time>
The timestamp of the block in which the epoch starts

lastLevel	
integer <int32>
The height of the block in which the epoch ends

endTime	
string <date-time>
The timestamp of the block in which the epoch ends

status	
string
Status of the voting epoch: no_proposals - there were no proposals proposed voting - there was at least one proposal and the voting is in progress completed - voting successfully completed and the proposal was accepted failed - voting was not completed due to either quorum or supermajority was not reached

periods	
Array of objects (VotingPeriod)
Voting periods in the epoch

proposals	
Array of objects (Proposal)
Proposals pushed during the voting epoch (null, if there were no proposals).


get
/v1/voting/epochs/current
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"index": 0,
"firstLevel": 0,
"startTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"endTime": "2019-08-24T14:15:22Z",
"status": "string",
"periods": [
{}
],
"proposals": [
{}
]
}
Get latest voting
Returns the latest epoch with at least one proposal

Responses
200
Response Schema: application/json
index	
integer <int32>
Index of the voting epoch, starting from zero

firstLevel	
integer <int32>
The height of the block in which the epoch starts

startTime	
string <date-time>
The timestamp of the block in which the epoch starts

lastLevel	
integer <int32>
The height of the block in which the epoch ends

endTime	
string <date-time>
The timestamp of the block in which the epoch ends

status	
string
Status of the voting epoch: no_proposals - there were no proposals proposed voting - there was at least one proposal and the voting is in progress completed - voting successfully completed and the proposal was accepted failed - voting was not completed due to either quorum or supermajority was not reached

periods	
Array of objects (VotingPeriod)
Voting periods in the epoch

proposals	
Array of objects (Proposal)
Proposals pushed during the voting epoch (null, if there were no proposals).


get
/v1/voting/epochs/latest_voting
Response samples
200
Content type
application/json

Copy
Expand allCollapse all
{
"index": 0,
"firstLevel": 0,
"startTime": "2019-08-24T14:15:22Z",
"lastLevel": 0,
"endTime": "2019-08-24T14:15:22Z",
"status": "string",
"periods": [
{}
],
"proposals": [
{}
]
}
Get Started
TzKT WebSocket API is based on SignalR that enables receiving data from the Tezos blockchain in real-time.

This is a very useful feature, especially when you need to receive updates immediately, as soon as they appear on the node and are indexed by the indexer. Also it allows to significantly simplify client's logic responsible for updating/synchronizing data.

WebSocket API base URL: https://{baseUrl}/v1/ws

Message types
After connecting to the WebSocket and subscribing, the client starts receiving messages from the server. There are three message types that the server sends to the client:

1. State message
{
    type: 0,    // 0 - state message
    state: 0    // subscription state
}
This is the very first message the client receives from the server after opening a subscription. This message is a kind of confirmation that the subscription has been successfully processed.

There is just one meaningful field - state, that represents current state of the subscription. The type of that field depends on a particular subscription (see documentation on each subscription). For example, if you subscribe to new blocks, the state will contain a level of the last sent block. So if you receive a state message with state: 1300123, the next block you may expect to receive will be 1300124.

State can be used to fetch historical data from the REST API right after opening a subscription, so that there will be no nor misses nor duplicates.

2. Data message
{
    type: 1,    // 1 - data message
    state: 0,   // subscription state
    data: {}    // data: object or array, depending on subscription
}
After subscription is registered and state message is received, client will receive data messages. As you can see, data is an array (array of blocks, operations, or whatever you have subscribed to), that means you may receive multiple items in a single message, which is great for performance and network traffic.

TzKT WebSocket API operates with the same data models as the REST API to achieve full compatibility and data consistency.

3. Reorg message
{              
    type: 2,    // 2 - reorg message
    state: 0    // subscription state
}
Reorg messages signal about chain reorganizations, when some blocks, including all operations, are rolled back in favor of blocks with higher weight. Chain reorgs happen quite often, so it's not something you can ignore. You have to handle such messages correctly, otherwise you will likely accumulate duplicate data or, worse, invalid data.

For example, if you receive blocks 10, 11, 12, 13 and then receive reorg message with state: 11, you should remove blocks 12 and 13 (if you saved them) as they are no longer valid.

Subscriptions
SubscribeToHead
Sends the blockchain head every time it is changed.

Method
SubscribeToHead

Channel
head

Parameters
No parameters.

Data model
Same as in /head

State
State contains level (int) of the last processed head.

Example
connection.on("head", (msg) => { console.log(msg); });
await connection.invoke("SubscribeToHead");
SubscribeToCycles
Notifies of the start of a new cycle with a specified delay.

Method
SubscribeToCycles

Channel
cycles

Parameters
{
    delayBlocks: 2,    // number of blocks (2 by default) to delay a new cycle notification
                       // should be >= 2 (to not worry abour reorgs) and < cycle size
}
Data model
Same as in /cycle

State
State contains an index (int) of the last processed cycle.

Example
connection.on("cycles", (msg) => { console.log(msg); });
await connection.invoke("SubscribeToCycles");
SubscribeToBlocks
Sends blocks added to the blockchain

Method
SubscribeToBlocks

Channel
blocks

Parameters
No parameters.

Data model
Same as in /blocks

State
State contains level (int) of the last processed block.

Example
connection.on("blocks", (msg) => { console.log(msg); });
await connection.invoke("SubscribeToBlocks");
SubscribeToAccounts
Sends touched accounts (affected by any operation in any way).

Method
SubscribeToAccounts

Channel
accounts

Parameters
{
    addresses: [], // array of address you want to subscribe to
}
Note: you can invoke this method multiple times with different parameters to register multiple subscriptions.

Data model
data is an array of items described in response section of /accounts/{address} request.

State
State contains level (int) of the last processed block.

Example
connection.on("accounts", (msg) => { console.log(msg); });
// subscribe to an account
await connection.invoke("SubscribeToAccounts", { addresses: [ 'tz1234...' ] });
SubscribeToOperations
Sends operations of specified types or related to specified accounts, included into the blockchain

Method
SubscribeToOperations

Channel
operations

Parameters
{
    address: '', // address you want to subscribe to,
                 // or null if you want to subscribe for all operations

    codeHash: 0, // hash of the code of the contract to which the operation is related
                 // (can be used with 'transaction', 'origination', 'delegation' types only)

    types: ''    // comma-separated list of operation types, any of:
                 // 'transaction', 'origination', 'delegation', 'reveal', etc.
}
Note: you can invoke this method multiple times with different parameters to register multiple subscriptions.

Data model
Same as in /operations/transactions, /operations/delegations, etc.

State
State contains level (int) of the last processed block.

Example
connection.on("operations", (msg) => { console.log(msg); });
// subscribe to all transactions
await connection.invoke("SubscribeToOperations", { types: 'transaction' });
// subscribe to all transactions of the entire contract family
await connection.invoke("SubscribeToOperations", { types: 'transaction', codeHash: 1928472 });
// subscribe to all delegations and originations related to the address 'tz1234...'
await connection.invoke("SubscribeToOperations", { address: 'tz1234...', types: 'delegation,origination' });
SubscribeToBigMaps
Sends bigmap updates

Method
SubscribeToBigMaps

Channel
bigmaps

Parameters
This method accepts the following parameters:

{
    ptr: 0,         // ptr of the bigmap you want to subscribe to
    tags: [],       // array of bigmap tags ('metadata' or 'token_metadata')
    contract: '',   // contract address
    path: ''        // path to the bigmap in the contract storage
}
You can set various combinations of these fields to configure what you want to subscribe to. For example:

// subscribe to all bigmaps
{
}     

// subscribe to all bigmaps with specific tags
{        
    tags: ['metadata', 'token_metadata']
}

// subscribe  to all bigmaps of the specific contract
{
    contract: 'KT1...'
}

// subscribe to all bigmaps of the specific contract with specific tags
{
    contract: 'KT1...',
    tags: ['metadata']
}

// subscribe to specific bigmap by ptr
{
    ptr: 123
}

// subscribe to specific bigmap by path
{
    contract: 'KT1...',
    path: 'ledger'
}
Note: you can invoke this method multiple times with different parameters to register multiple subscriptions.

Data model
Same as in /bigmaps/updates.

State
State contains level (int) of the last processed block.

Example
connection.on("bigmaps", (msg) => { console.log(msg); });
// subscribe to all bigmaps of the 'KT123...' contract
await connection.invoke("SubscribeToBigMaps", { contract: 'KT123...' });
// subscribe to bigmap with ptr 123
await connection.invoke("SubscribeToBigMaps", { ptr: 123 });
SubscribeToTokenBalances
Sends token balances when they are updated

Method
SubscribeToTokenBalances

Channel
token_balances

Parameters
This method accepts the following parameters:

{
    account: '',    // address of the account that holds tokens
    contract: '',   // address of the contract that manages tokens
    tokenId: ''     // id of the token within the specified contract
}
You can set various combinations of these fields to configure what you want to subscribe to. For example:

// subscribe to all token balance updates
{
}

// subscribe to balance updates of all tokens within the contract
{
    contract: 'KT1...'
}

// subscribe to balance updates of a particular token
{
    contract: 'KT1...',
    tokenId: '0'
}      

// subscribe to token balance updates for the account
{        
    account: 'tz1...'
}      

// subscribe to balance updates of all tokens within the contract for the account
{        
    account: 'tz1...',
    contract: 'KT1...'
} 

// subscribe to a particular token balance updates for the account
{        
    account: 'tz1...',
    contract: 'KT1...',
    tokenId: '0'
}
Note: you can invoke this method multiple times with different parameters to register multiple subscriptions.

Data model
Same as in /tokens/balances.

State
State contains level (int) of the last processed block.

Example
connection.on("token_balances", (msg) => { console.log(msg); });
// subscribe to all token balances of the 'tz123...' account
await connection.invoke("SubscribeToTokenBalances", { account: 'tz123...' });
SubscribeToTokenTransfers
Sends token transfers

Method
SubscribeToTokenTransfers

Channel
transfers

Parameters
This method accepts the following parameters:

{
    account: '',    // address of the account that sends/receives tokens
    contract: '',   // address of the contract that manages tokens
    tokenId: ''     // id of the token within the specified contract
}
You can set various combinations of these fields to configure what you want to subscribe to. For example:

// subscribe to all transfers
{
}

// subscribe to transfers of all tokens within the contract
{
    contract: 'KT1...'
}

// subscribe to transfers of a particular token
{
    contract: 'KT1...',
    tokenId: '0'
}      

// subscribe to transfers from/to the account
{        
    account: 'tz1...'
}      

// subscribe to transfers of all tokens within the contract from/to the account
{        
    account: 'tz1...',
    contract: 'KT1...'
} 

// subscribe to transfers of a particular token from/to the account
{        
    account: 'tz1...',
    contract: 'KT1...',
    tokenId: '0'
}
Note: you can invoke this method multiple times with different parameters to register multiple subscriptions.

Data model
Same as in /tokens/transfers.

State
State contains level (int) of the last processed block.

Example
connection.on("transfers", (msg) => { console.log(msg); });
// subscribe to all transfers of the 'tz123...' account
await connection.invoke("SubscribeToTokenTransfers", { account: 'tz123...' });
SubscribeToTicketBalances
Sends ticket balances when they are updated

Method
SubscribeToTicketBalances

Channel
ticket_balances

Parameters
This method accepts the following parameters:

{
    account: '',    // address of the account that holds tickets
    ticketer: '',   // address of the ticketer
}
You can set various combinations of these fields to configure what you want to subscribe to. For example:

// subscribe to all ticket balance updates
{
}

// subscribe to balance updates of all tickets within the ticketer
{
    ticketer: 'KT1...'
}     

// subscribe to ticket balance updates for the account
{        
    account: 'tz1...'
}      

// subscribe to balance updates of all tickets within the ticketer for the account
{        
    account: 'tz1...',
    ticketer: 'KT1...'
} 
Note: you can invoke this method multiple times with different parameters to register multiple subscriptions.

Data model
Same as in /tickets/balances.

State
State contains level (int) of the last processed block.

Example
connection.on("ticket_balances", (msg) => { console.log(msg); });
// subscribe to all ticket balances of the 'tz123...' account
await connection.invoke("SubscribeToTicketBalances", { account: 'tz123...' });
SubscribeToTicketTransfers
Sends ticket transfers

Method
SubscribeToTicketTransfers

Channel
ticket_transfers

Parameters
This method accepts the following parameters:

{
    account: '',    // address of the account that sends/receives tickets
    ticketer: '',   // address of the ticketer
}
You can set various combinations of these fields to configure what you want to subscribe to. For example:

// subscribe to all transfers
{
}

// subscribe to transfers of all tickets within the ticketer
{
    ticketer: 'KT1...'
} 

// subscribe to transfers from/to the account
{        
    account: 'tz1...'
}      

// subscribe to transfers of all tickets within the ticketer from/to the account
{        
    account: 'tz1...',
    ticketer: 'KT1...'
}
Note: you can invoke this method multiple times with different parameters to register multiple subscriptions.

Data model
Same as in /tickets/transfers.

State
State contains level (int) of the last processed block.

Example
connection.on("ticket_transfers", (msg) => { console.log(msg); });
// subscribe to all transfers of the 'tz123...' account
await connection.invoke("SubscribeToTicketTransfers", { account: 'tz123...' });
SubscribeToEvents
Sends contract events

Method
SubscribeToEvents

Channel
events

Parameters
This method accepts the following parameters:

{
    codeHash: 0,    // hash of the contract code
    contract: '',   // contract address
    tag: '',        // event tag
}
You can set various combinations of these fields to configure what you want to subscribe to. For example:

// subscribe to all events
{
}     

// subscribe to events with specific tag
{        
    tag: 'transfer'
}

// subscribe  to events of the specific contract
{
    contract: 'KT1...'
}

// subscribe to events of the specific contract with specific tag
{
    contract: 'KT1...',
    tag: 'transfer'
}

// subscribe to events of the 'family' of contracts
{
    codeHash: 1234
}

// subscribe to events of the 'family' of contracts with specific tag
{
    codeHash: 1234,
    tag: 'transfer'
}
Note: you can invoke this method multiple times with different parameters to register multiple subscriptions.

Data model
Same as in /contracts/events.

State
State contains level (int) of the last processed block.

Example
connection.on("events", (msg) => { console.log(msg); });
// subscribe to all events of the 'KT123...' contract
await connection.invoke("SubscribeToEvents", { contract: 'KT123...' });
Examples
Here are some examples of a simple client app in different languages.

C# simple client
Install SignalR package:

> dotnet add package Microsoft.AspNetCore.SignalR.Client
// if you use .NET 5.0 you will likely also need:
> dotnet add package System.Text.Encodings.Web
See more details here.

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.SignalR.Client;

namespace TestConsoleCore
{
    class Program
    {
        static async Task Main(string[] args)
        {
            var connection = new HubConnectionBuilder()
                .WithUrl("https://api.tzkt.io/v1/ws")
                .Build();

            async Task Init(Exception arg = null)
            {
                // open connection
                await connection.StartAsync();
                // subscribe to head
                await connection.InvokeAsync("SubscribeToHead");
                // subscribe to account transactions
                await connection.InvokeAsync("SubscribeToOperations", new
                {
                    address = "KT19kgnqC5VWoxktLRdRUERbyUPku9YioE8W",
                    types = "transaction"
                });
            }

            // auto-reconnect
            connection.Closed += Init;

            connection.On("head", (JsonElement msg) =>
            {
                Console.WriteLine(msg.GetRawText());
            });

            connection.On("operations", (JsonElement msg) =>
            {
                Console.WriteLine(msg.GetRawText());
            });

            await Init();

            Console.ReadLine();

            connection.Closed -= Init;
            await connection.StopAsync();
            await connection.DisposeAsync();
        }
    }
}
JS simple client
Install SignalR package via npm:

> npm install @microsoft/signalr

const signalR = require("@microsoft/signalr");
or via CDN:

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.7/signalr.min.js"></script>
See more details here.

const connection = new signalR.HubConnectionBuilder()
    .withUrl("https://api.tzkt.io/v1/ws")
    .build();

async function init() {
    // open connection
    await connection.start();
    // subscribe to head
    await connection.invoke("SubscribeToHead");
    // subscribe to account transactions
    await connection.invoke("SubscribeToOperations", {
        address: 'KT19kgnqC5VWoxktLRdRUERbyUPku9YioE8W',
        types: 'transaction'
    });
};

// auto-reconnect
connection.onclose(init);

connection.on("head", (msg) => {
    console.log(msg);            
});

connection.on("operations", (msg) => {
    console.log(msg);            
});

init();
Python simple client
Install pysignalr package via pypi:

> pip install pysignalr
See more details here.

import asyncio
from contextlib import suppress
from typing import Any
from typing import Dict
from typing import List

from pysignalr.client import SignalRClient
from pysignalr.messages import CompletionMessage


async def on_open() -> None:
    print('Connected to the server')


async def on_close() -> None:
    print('Disconnected from the server')


async def on_message(message: List[Dict[str, Any]]) -> None:
    print(f'Received message: {message}')


async def on_error(message: CompletionMessage) -> None:
    print(f'Received error: {message.error}')


async def main() -> None:
    client = SignalRClient('https://api.tzkt.io/v1/ws')

    client.on_open(on_open)
    client.on_close(on_close)
    client.on_error(on_error)
    client.on('operations', on_message)

    await asyncio.gather(
        client.run(),
        client.send('SubscribeToOperations', [{}]),
    )


with suppress(KeyboardInterrupt, asyncio.CancelledError):
    asyncio.run(main())
Typescript SDK
TzKT API is accompanied by a Typescript SDK you can use both on the client side and on the backend.
It offers fully typed response models and a convenient query builder with autocompletion. Also it is designed to support tree-shaking and to introduce a minimal overhead to the bundle size.

Check out the following resources:

SDK reference
GitHub repo
Installation
For querying REST API:

npm i @tzkt/sdk-api
For WebSocket API:

npm i @tzkt/sdk-events
Usage
Simplest request
Simplest example of getting double baking operations, accused of being such by a certain address.

import { operationsGetDoubleBaking } from '@tzkt/sdk-api'

await operationsGetDoubleBaking(
  {
    quote: 'Btc',
    accuser: {
      in: ['tz3VEZ4k6a4Wx42iyev6i2aVAptTRLEAivNN']
    }
  }
)
Overriding base API URL
You may override base URL used by the package in the following manner. This may come useful should you want to make requests to a test network or to your custom server.

import * as api from "@tzkt/sdk-api";

api.defaults.baseUrl = "https://api.ithacanet.tzkt.io/";
In case you need to override request headers, this is also possible.

import * as api from "@tzkt/sdk-api";

api.defaults.headers = {
  access_token: "secret",
};
Please refer to the original documentation for more details on how to configure defaults.

Subscriptions
Create an instance of events service specifying TzKT WebSocket endpoint.

import { EventsService } from "@tzkt/sdk-events";

const events = new EventsService({ url: "https://api.tzkt.io/v1/ws", reconnect: true });
Connection is not initiated until the first request (lazy connection):

const sub = events.operations({ types: [ 'origination' ] })
    .subscribe({ next: console.log });
Events service implements subscription router internally (on TzKT your subscriptions are aggregated) hence you can always "unsubscribe" from new updates (however it does not change anything on the TzKT side, just stops firing your observer):

sub.unsubscribe();
By default events service will infinitely try to reconnect in case of drop, you can monitor current state by subscribing to status updates:

events.status()
    .subscribe({ next: console.log });
In case you need to terminate the connection you can do that (note that event service will start again in case you send a subscription request afterwards):

await events.stop();
More examples
Access BigMaps
Please refer to an article on BigMaps indexing for a more detailed explanation on what these requests allow you to achieve.

Accessing BigMap by Ptr
import { bigMapsGetBigMapById } from '@tzkt/sdk-api'

const bigMapPtr = 543

await bigMapsGetBigMapById(bigMapPtr)
Accessing BigMap by the path in the contract storage
import { contractsGetBigMapByName } from '@tzkt/sdk-api'

const contractAddress = 'KT1TtaMcoSx5cZrvaVBWsFoeZ1L15cxo5AEy'
const pathToBigMap = 'ledger'

await contractsGetBigMapByName(
  contractAddress,
  pathToBigMap
)
Accessing BigMap keys
import { bigMapsGetKeys } from '@tzkt/sdk-api'

const bigMapId = 511
const limit = 10

await bigMapsGetKeys(
  bigMapId,
  { limit }
)
Accessing All owners of NFT with non-zero balance
import { bigMapsGetKeys } from '@tzkt/sdk-api'

const bigMapId = 511
const key = {
  value: 154,
  path: 'nat'
}
const minValue = 0

await bigMapsGetKeys(
  bigMapId,
  {
    key: {
      eq: {
        jsonValue: `${key.value}`,
        jsonPath: key.path
      }
    },
    value: {
      gt: {
        jsonValue: `${minValue}`
      }
    }
  }
)
Accessing all updates of all BigMaps of a specific contract
import { bigMapsGetBigMapUpdates } from '@tzkt/sdk-api'

const contract = 'KT1K9gCRgaLRFKTErYt1wVxA3Frb9FjasjTV'
await bigMapsGetBigMapUpdates({
  contract: {
    eq: contract
  }
})
Accessing Tokens API
Please refer to an article on Tokens indexing for a more detailed explanation on what these requests allow you to achieve.

Accessing tokens transfers with deep fields selection
import { tokensGetTokenTransfers } from '@tzkt/sdk-api'

const tokenId = 778919
const limit = 2
const sort = 'id'
const fields = [
  'from.address',
  'to.address',
  'amount',
  'token.metadata.symbol',
  'token.metadata.decimals'
]

await tokensGetTokenTransfers({
  tokenId: {
    eq: tokenId
  },
  sort: {
    desc: sort
  },
  limit,
  select: {
    fields
  }
})
Accessing FA1.2 tokens with the largest number of holders
import { tokensGetTokens } from '@tzkt/sdk-api'

const standard = 'fa1.2'
const sort = 'holdersCount'
const limit = 10

const r = await tokensGetTokens({
  standard: {
    eq: standard
  },
  sort: {
    desc: sort
  },
  limit
})
Accessing all account's NFTs
import { tokensGetTokenBalances } from '@tzkt/sdk-api'

const account = 'tz1SLgrDBpFWjGCnCwyNpCpQC1v8v2N8M2Ks'
const minBalance = 0
const symbol = 'OBJKT'
const limit = 10

const r = await tokensGetTokenBalances({
  account: {
    eq: account
  },
  balance: {
    ne: `${minBalance}`
  },
  tokenMetadata: {
    eq: {
      jsonPath: 'symbol',
      jsonValue: symbol
    }
  },
  limit
})
Accessing whale transfers of a token
import { tokensGetTokenTransfers } from '@tzkt/sdk-api'

const tokenId = 85
const minAmount = '100000000000000000000000'
const sort = 'id'
const limit = 10

const r = await tokensGetTokenTransfers({
  tokenId: {
    eq: tokenId
  },
  amount: {
    gt: minAmount
  },
  sort: {
    desc: sort
  },
  limit
})
Accessing "mints" of a token
import { tokensGetTokenTransfers } from '@tzkt/sdk-api'

const tokenId = 85
const sort = 'id'
const limit = 10

const r = await tokensGetTokenTransfers({
  tokenId: {
    eq: tokenId
  },
  from: {
    null: true
  },
  sort: {
    desc: sort
  },
  limit
})
Accessing Transactions
Please refer to an article on Transactions querying for a more detailed explanation on what these requests allow you to achieve.

Accessing incoming transfers for the account
import { operationsGetTransactions } from '@tzkt/sdk-api'

const target = 'KT1K9gCRgaLRFKTErYt1wVxA3Frb9FjasjTV'
const parameter = {
  path: 'to',
  value: 'tz1aKTCbAUuea2RV9kxqRVRg3HT7f1RKnp6a'
}

const r = await operationsGetTransactions({
  target: {
    eq: target
  },
  parameter: {
    eq: {
      jsonPath: parameter.path,
      jsonValue: parameter.value
    }
  }
})
Accessing Dexter XTZ to USDtz trades with specified amount
import { operationsGetTransactions } from '@tzkt/sdk-api'

const target = 'KT1K9gCRgaLRFKTErYt1wVxA3Frb9FjasjTV'
const parameter = {
  path: 'to',
  value: 'tz1aKTCbAUuea2RV9kxqRVRg3HT7f1RKnp6a'
}

const r = await operationsGetTransactions({
  target: {
    eq: target
  },
  parameter: {
    eq: {
      jsonPath: parameter.path,
      jsonValue: parameter.value
    }
  }
})
Accessing Atomex atomic swaps with specified refund time
import { operationsGetTransactions } from '@tzkt/sdk-api'

const target = 'KT1VG2WtYdSWz5E7chTeAdDPZNy2MpP8pTfL'
const filterField = 'settings.refund_time'
const timeFrame = '2021-02-*'

const r = await operationsGetTransactions({
  target: {
    eq: target
  },
  parameter: {
    as: {
      jsonPath: filterField,
      jsonValue: timeFrame
    }
  }
})
Accessing Dexter wXTZ/XTZ trades
import { operationsGetTransactions } from '@tzkt/sdk-api'

const target = 'KT1D56HQfMmwdopmFLTwNHFJSs6Dsg2didFo'
const entrypoints = ['xtzToToken', 'tokenToXtz', 'tokenToToken']

const r = await operationsGetTransactions({
  target: {
    eq: target
  },
  entrypoint: {
    in: entrypoints
  }
})
Accessing operations with tzBTC related to a specific account
import { operationsGetTransactions } from '@tzkt/sdk-api'

const target = 'KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn'
const entrypoints = ['mint', 'transfer', 'burn']
const parameter = '*tz1aKTCbAUuea2RV9kxqRVRg3HT7f1RKnp6a*'

const r = await operationsGetTransactions({
  target: {
    eq: target
  },
  entrypoint: {
    in: entrypoints
  },
  parameter: {
    as: {
      jsonValue: parameter
    }
  }
})
Taquito extension
TzKT extension for the Taquito library can significantly speed up your application by reducing the number of requests made to a Tezos node. Instead, most of the queries are routed through TzKT API which is much more scalable. The best thing is that you don't have to change anything in your code (almost).

Installation
npm i @tzkt/ext-taquito
Usage
In order to enable routing enable the TzKT extension per each TezosToolkit instance created:

import { TezosToolkit } from '@taquito/taquito';
import { TzktExtension } from '@tzkt/ext-taquito';

const Tezos = new TezosToolkit('https://rpc.tzkt.io/mainnet');
Tezos.addExtension(new TzktExtension());
TzKT extension will route the following requests:

getEntrypoints
getScript
getBalance
getDelegate
getNextProtocol
getProtocolConstants
getStorage
getBlockHash
getBlockLevel
getCounter
getBlockTimestamp
getBigMapValue
isAccountRevealed
getLiveBlocks
All other requests will be executed against the specified node URI, as usual.

Changing API endpoint
You may override base URL used by the package in the following manner. This may come useful should you want to make requests to a test network or to your custom server.

Tezos.addExtension(new TzktExtension({url: 'https://api.tzkt.io'}));
